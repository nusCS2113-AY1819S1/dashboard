[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d Timetable Deconflicter (TBC)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "image:https://travis-ci.org/CS2113-AY1819S1-W13-1/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/CS2113-AY1819S1-W13-1/main\"]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "https://ci.appveyor.com/project/nianfei97/main/branch/master[image:https://ci.appveyor.com/api/projects/status/7py8jwp3sgjoj3dj/branch/master?svg\u003dtrue[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "https://coveralls.io/github/CS2113-AY1819S1-W13-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2113-AY1819S1-W13-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* This is a desktop Timetable Deconflicting application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5], https://github.com/mangstadt/biweekly[biweekly]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* This project is based off the AddressBook-Level4 project created by http://github.com/se-edu/[SE-EDU initiative]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nianfei97": 6,
      "alexiscatnip": 1,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    compile \u0027net.sf.biweekly:biweekly:0.6.2\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    implementation group: \u0027net.sf.biweekly\u0027, name: \u0027biweekly\u0027, version: \u00270.6.2\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027Timetable Deconflicter (TBC)\u0027,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2113-AY1819S1-W13-1/main\u0027,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 3,
      "-": 247
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "Timetable Deconflicter (TBC) was developed by the following team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "This project is a deliverable for the module \"Software Engineering \u0026 Object-Oriented Programming\" (Module code: CS2113T)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Teh Nian Fei"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "image::nianfei97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "{empty}[https://github.com/nianfei97[github]]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Role: Team Lead, Code Quality +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Responsibilities: Managing Logic"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Benjamin Chong Zhi Yi"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "image::bennchong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "{empty}[http://github.com/bennchong[github]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Role: +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Responsibilities: Managing Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Cheng Jin Ting"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "image::cjinting-nus.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "{empty}[http://github.com/cjinting-nus[github]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Role: Deliverables +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Responsibilities: Managing Users"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Khoo Yuan Hui"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "image::alexiscatnip.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "{empty}[http://github.com/alexiscatnip[github]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Role: [small white]#Sleeping and typing bad code# +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Responsibilities: Managing UI"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Akshay Narayan"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "image::okkhoy.png[width\u003d\"150\", align\u003d:\"left\"]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "{empty}[http://github.com/okkhoy[github]]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Role: Module Coordinator, Instructor"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 1,
      "nianfei97": 21,
      "alexiscatnip": 1,
      "-": 27,
      "bennchong": 5
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2113-AY1819S1-W13-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* *Email us* : You can also reach us at `tehnf [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Timetable Deconflicter (TBC) - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-W13-1/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "By: `W13-1`      Since: `Sept 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson.java`] and link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bennchong"
        },
        "content": "The rest of the App consists of five components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bennchong"
        },
        "content": "* \u003c\u003cDesign-Security,*`Security`*\u003e\u003e: Enforces Authentication"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Each of the five components"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "[[Events-Driven-Nature]]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bennchong"
        },
        "content": "[[Design-Security]]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d\u003d Security component"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bennchong"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bennchong"
        },
        "content": "image::SecurityClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bennchong"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/security/Security.java[`Security.java`]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bennchong"
        },
        "content": "The `Security` component is an authentication module that ensures the users that are using the application are"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bennchong"
        },
        "content": "recognized, and an instance of a authenticated user will be created every time a user is logged in so as to allow"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bennchong"
        },
        "content": "the application to do user-specific tasks."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "The Sequence Diagram when a user logs in is given below:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".Interactions between the UI Component and Security Component for the `login` Command"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bennchong"
        },
        "content": "image::SecurityLoginSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* can save the `TimeTable` Objects in ics format and read it back."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* can read `TimeTable` data from a user-specified file in ics format."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".Interactions between the Logic Component and Model Component for the `undo` Command"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "// tag::timetable[]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Timetable feature"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "The timetable feature allows users to store and view their own timetables. Additionally, it allows users to view a deconflicted timetable, a timetable which highlights mutual free timeslots among all selected users."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "The timetable feature can be broadly split into two parts: +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. The backend, which handles the storage and logic of `TimeTable` objects; +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. The frontend, which handles the display of `TimeTable` objects."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Backend implementation"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "The `TimeTable` object is composed under the `Person` class in `Model`. Each `TimeTable` in turn is composed of any number of `TimeSlot` objects. Each `TimeSlot` consists of: +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. One `DayOfWeek` object to indicate the day of week of the timeslot; +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. Two `LocalTime` objects to indicate the start time and end time of the timeslot respectively."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "The following class diagram summarises the relationship between the components of the TimeTable class:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".Structure of the TimeTable Class"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "image::TimeTableClassDiagram.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "The `TimeTable` class implements three key methods: +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. `TimeTable#addTimeSlot()` - to add a new `TimeSlot` to the `TimeTable` +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. `TimeTable#deleteTimeSlot()` - to remove an existing `TimeSlot` from the `TimeTable` +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "3. `TimeTable#deconflict()` - to create a deconflicted timetable from two or more `TimeTable` objects +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Frontend implementation"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "`TimeTablePanel` extends the abstract class `UIPart` and is implemented using a `BorderPane`. It is composed of the following classes: +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. `TimeTableDayMarkerGrid` - a `GridPane` on the left of the `TimeTablePanel` to display the days of the week; +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. `TimeTableTimeMarkerGrid` - a `GridPane` on the top of the `TimeTablePanel` to display the time markers +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "3. `TimeTableMainGrid` - a `GridPane` in the center of the `TimeTablePanel`. Composed of any number of `TimeTablePanelTimeSlot` objects. +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "The following screenshot shows the relative position of all the components in `TimeTablePanel`:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".Layout of the TimeTablePanel"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "image::TimeTableScreenshotLabelled.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Interaction between backend and frontend"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "The following sequence diagrams show the sequence of significant method calls for the execution of the `TimeTable#addTimeSlot()` method. The execution of the `TimeTable#removeTimeSlot()` method is implemented in a similar manner."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "image::TimeTableSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the frontend updates the `TimeTable` to be displayed"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* **Alternative 1 (current choice):** Clears the entire `TimeTableMainGrid` before loading the new `TimeTable`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "** Pros: Easy to implement, only one method (`loadTimeTable`) required"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "** Cons: May suffer from performance degradation, especially when the `TimeTable` to be loaded contains many `TimeSlot` objects"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* **Alternative 2:** Detects the difference between the currently displayed `TimeTable` before adding or deleting `TimeTablePanelTimeSlot` objects accordingly."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "** Pros: Will reduce execution time of methods which update the displayed `TimeTable`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "** Cons: A method to detect the difference between `TimeTable` objects must be implemented. May not result in significant performance improvements when switching between `TimeTable` objects with few or no `TimeSlot` objects in common."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "// end::timetable[]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "// tag::import[]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Import timetable feature"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "The import timetable feature allows users to import their timetables from NUSMODS, as an .ics file."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "The timetable feature consists of two parts: +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "1. The backend, which handles the reading of the .ics file and the creation of the timetable object. +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "2. The frontend, which parses user input, and informs the user of success or failure."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Backend implementation"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "The file is read and parsed into a TimeTable by IcsUtil class."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "The following sequence diagram shows how the TimeTable is imported: +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".Interactions between the Logic Component and Model Component for the `import` Command"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "image::ImportSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "The `IcsUtil` class implements three key utility methods for handling .ics files: +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "1. `IcsUtil#getTimeTableFromFile()` - to obtain a `TimeTable`; accepts the `filePath` of the .ics file as parameter +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "3. +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Frontend implementation"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Same as the other commands, see \u003c\u003cEvents-Driven-Nature,*`Events-Driven nature of the design`*\u003e\u003e."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Which Classes (and which system(s)) should parse the ics file format?"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* **Alternative 1 (current choice):** All code related to parsing .ics timetable files are inside \u0027IcsUtil\u0027 class."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** Pros: All functions that have to do with .ics parsing is in 1 class."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "** Cons: Single responsibility principle is broken."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* **Alternative 2:** Follow the existing implementation of \u0027Storage\u0027; create an IcsTimeTableStorage class to access the ics file in hard disk, just like what is being done with \u0027preferences.json\u0027 and \u0027AddressBook.xml\u0027 files."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "** Pros: Better follows Single Responsibility Principle: classes that concerns storage are in the storage subsystem."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** Cons: Current implementation favors \u0027permanent\u0027 files on the hard disk: Compared to the \u0027preferences.json\u0027 and \u0027AddressBook.xml\u0027 files, the .ics timetable file is single-use, and can have varying filePaths specified by user."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "// end::timetable[]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d\u003d Security Implementation"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "bennchong"
        },
        "content": "To begin this section, we would need to introduce the idea of a Authenticated User instance."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Everytime a user successfully logs in, or creates a new account, the application will create an Authenticated User in"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Model. This User is an extension of the Person Class, which different UI and commands will access it. One example would"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "bennchong"
        },
        "content": "be the friend\u0027s UI panel, where it has to know the current user to know his friends"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "bennchong"
        },
        "content": "This section will be broken down into +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "bennchong"
        },
        "content": "1. Front-End +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "bennchong"
        },
        "content": "2. Back-End +"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Front-End Implementation"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "bennchong"
        },
        "content": "1. CLI +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "bennchong"
        },
        "content": "SecurityBox Class handles the command line interface, and passes every commands to"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "bennchong"
        },
        "content": "SecurityManager through the Security API."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "bennchong"
        },
        "content": "2. UI Prompt +"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Inside the UI package, there are two new windows created, LoginWindow and RegistrationWindow. Each Window would handle"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "bennchong"
        },
        "content": "UI events such as clicks and passing relevant information to the SecurityManager"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "bennchong"
        },
        "content": "similar to above. +"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Whenever login or register is called through the Security API, this raises their respective Events to the event bus. The preexisting UIManager is subscribed"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "bennchong"
        },
        "content": "to this events, and will react accordingly to the events raised."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Back-End Implementation"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Users credentials are stored in a json file called users.json at root. The class managing the reading and writing of"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "bennchong"
        },
        "content": "this file is JsonAppUserStorage. +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "bennchong"
        },
        "content": "The object that it is storing is the AppUsers class implemented in the Security Package. It contains an array of"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "bennchong"
        },
        "content": "AccountCredentials, which has the attribute of Username and Password, and methods such isPasswordValid(). Here it also"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "bennchong"
        },
        "content": "calls the static Hasher class, which takes the password and a salt to create the hash of the password to store."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Whenever a user logs in, the username is searched inside AppUsers. Once it matches the username, the input pasword is"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "bennchong"
        },
        "content": "then salted and hashed (SHA-512), and finally compared to the stored hashed password."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Has a need to manage complicated weekly timetable"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Has a need to schedule meeting with many people across many groups"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Prefer desktop apps over other types"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Prefers typing over mouse input"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "*Value proposition*: Can manage schedule and schedule meetings faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* * *` | Teacher | See when my students are free | Find a good time to hold extra classes"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* * *` | Student | Book a slot in my friend’s calendar | Automatically block out a timeslot in his schedule"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* * *` | User | Record my schedule | Know when I am free"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* * *` | Student | Share my schedule with my friends | Schedule meetings with them"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* * *` | Student | See my timetable in table form | See things intuitively and quickly"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* *` | Student | Know when my lecturer is free | Arrange for consultation slots"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* *` | Student | Form project groups with my friends | Do projects with them"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* *` | Student | Find times for me to meet my group members | Have a meeting without any troublesome planning"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* *` | Student | Start my meetings after a certain time | Not wake up early"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* *` | Student | End my before a certain time | Make it home for dinner"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* *` | Student | Have meetings that last for more than a set duration | Complete the agenda for the meeting"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* *` | Student | See when I can have meetings with my group mates in a graphical format | See all potential meeting times at a glance"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* *` | Student | Have meetings only on certain days of the week | Minimise the number of days I need to go to school"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`*` | Friend | Know when my friend is free | Have lunch with him"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`*` | User | Add friends on a platform | I won\u0027t be lonely"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d Use case: Check student’s timetable"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "MSS: +"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. Teacher logs into \u003c\u003caccount, account\u003e\u003e. +"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. Teacher checks one of her student groups. +"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "3. Teacher selects \"Find common free timeslots\". +"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "4. Address Book requests for confirmation. +"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "5. Teacher confirms. +"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "6. Address book returns a list of the free \u003c\u003ctimeslot,timeslots\u003e\u003e in descending order of availability. +"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d Use case: Block other user’s timeslot"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "MSS: +"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. Student logs into \u003c\u003caccount, account\u003e\u003e. +"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. Student requests his friend\u0027s \u003c\u003ctimetable,timetable\u003e\u003e. +"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "3. System prints friend\u0027s \u003c\u003ctimetable,timetable\u003e\u003e. +"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "4. Student chooses one \u003c\u003ctimeslot,timeslot\u003e\u003e to block out. +"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "5. System prints updated friend\u0027s \u003c\u003ctimetable,timetable\u003e\u003e. +"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "6. System logs notification to friend\u0027s \u003c\u003caccount, account\u003e\u003e. +"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d Use case: Add user\u0027s timeslot"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "MSS: +"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. User logs into their \u003c\u003caccount, account\u003e\u003e. +"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. System shows the possible commands. +"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "3. User chooses to add \u003c\u003ctimeslot,timeslot\u003e\u003e. +"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "4. System shows the instructions to add \u003c\u003ctimeslot,timeslot\u003e\u003e. +"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "5. Student adds one of their \u003c\u003ctimeslot,timeslots\u003e\u003e. +"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "6. System confirms the \u003c\u003ctimeslot,timeslot\u003e\u003e has been added. +"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d Use case: User View Own Timetable"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "MSS: +"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. User logs into their \u003c\u003caccount, account\u003e\u003e. +"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. System shows the possible commands. +"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "3. User selects \u0027View timetable in table form\u0027. +"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "4. System shows \u003c\u003ctimetable,timetable\u003e\u003e in table form. +"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d Use case: Find common free-slots (Group of students)"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "MSS: +"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. Student logs into their \u003c\u003caccount, account\u003e\u003e. +"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. System shows the possible commands. +"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "3. User selects \u0027Find common free \u003c\u003ctimeslot,timeslots\u003e\u003e\u0027. +"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "4. System asks for the people the user wants to find common free \u003c\u003ctimeslot,timeslots\u003e\u003e with. +"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "5. Student inputs/selects the people. +"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "6. System prints the free \u003c\u003ctimeslot,timeslots\u003e\u003e it has found. +"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Extensions: (Only an option if one-time \u0027events\u0027 has been implemented) +"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. Student selects one of those \u003c\u003ctimeslot,timeslots\u003e\u003e displayed. +"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. System adds an \u0027event\u0027 at that \u003c\u003ctimeslot,timeslots\u003e\u003e."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d Use case: Import TimeTable (for a person)"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "MSS: +"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "1. Student logs into their \u003c\u003caccount, account\u003e\u003e. +"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "2. System shows the possible commands. +"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "3. User selects \u0027Import \u003c\u003cTimetable,Timetable\u003e\u003e\u0027. +"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "4. System asks for the location of the file to import the \u003c\u003cTimetable,Timetable\u003e\u003e from. +"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "5. Student inputs the file location. +"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "6. System acknowledges the command, and displays the timetable that was imported. +"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Extensions: (user provided invalid file location) +"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "5a. Student inputs invalid file location. +"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "5b. System informs user about the invalid file location. +"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d Use case: Export TimeTable (for a person)"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "MSS: +"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "1. Student logs into their \u003c\u003caccount, account\u003e\u003e. +"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "2. System shows the possible commands. +"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "3. User selects \u0027Export \u003c\u003cTimetable,Timetable\u003e\u003e\u0027. +"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "4. System asks for the location of the file to export the \u003c\u003cTimetable,Timetable\u003e\u003e. +"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "5. Student inputs the file location. +"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "6. System indicates successful export. +"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Extensions: (export fails for any reason) +"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "6a. System indicates failed export. +"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".  Should be able to hold up to 1000 timeslots without a noticeable sluggishness (response time of \u003e500 ms) in performance for typical usage."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[[timeslot]] Timeslot::"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "A fixed duration of time with a start and end time"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[[timetable]] Timetable::"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "A set of non-overlapping \u003c\u003ctimeslot,timeslots\u003e\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[[groups]] Group::"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "A set of more than one user"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[[account]] Account::"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "A structure that stores all information related to one user. Only accessible to specified user."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 1,
      "nianfei97": 161,
      "alexiscatnip": 72,
      "-": 632,
      "bennchong": 53
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Timetable Deconflicter (TBC) - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-W13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "By: `W13-1`      Since: `Sept 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Timetable Deconflicter (TBC) is a desktop app that allows you to *find free timeslots to meet team members for projects*. More specifically, it helps you identify the times during which everyone you want to meet is free. Timetable Deconflicter is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Each command has an alias (given in round brackets after the command word) that can be used to replace the full command word. e.g. `find John` is equivaluent to `f John`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help` (`h`)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "Displays the userguide from within the app."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list` (`l`)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit` (`e`)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Locating persons by name : `find` (`f`)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Add a timeslot to your timetable: `addtime` (`at`)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Adds a filled timeslot to your timetable."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Format: `addtime Monday 10:00-12:00`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Shortforms for the day of the week are fine too. e.g. You can type `Mon` instead of Monday."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* If you type `10` for either the start or end time, FreeTime will assume that you mean `10:00`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* You cannot add a timeslot that clashes with your timetable."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `addtime Monday 10:00-12:00` +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Adds the timeslot from 10:00 to 12:00 on Monday to your timetable."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `addtime Fri 13:00-14:00` +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Adds the timeslot from 13:00 to 14:00 on Friday to your timetable."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `addtime Wed 17-18` +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Adds the timeslot from 17:00 to 18:00 on Wednesday to your timetable."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "After adding a timeslot, you should see the following:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "image:AddTimeSuccess.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Delete a timeslot from your timetable: `deletetime` (`dt`)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Delete a timeslot from your timetable."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Format: `deletetime Monday 10:00-12:00`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "****"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Shortforms for the day of the week are fine too. e.g. You can type `Mon` instead of Monday."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* If you type `10` for either the start or end time, FreeTime will assume that you mean `10:00`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* You cannot delete a timeslot that is not already filled in your timetable."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "****"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `deletetime Monday 10:00-12:00` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Deletes the timeslot from 10:00 to 12:00 on Monday from your timetable."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `deletetime Fri 13:00-14:00` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Deletes the timeslot from 13:00 to 14:00 on Friday from your timetable."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `deletetime Wed 17-18` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Deletes the timeslot from 17:00 to 18:00 on Wednesday from your timetable."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Show free slots among selected people `free` (`f`) (coming to you in v1.3!)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select` (`s`)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Selects the person and displays the person\u0027s timetable at the specified `INDEX`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history` (`g`)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo` (`u`)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo` (`r`)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear` (`c`)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d\u003d Import Timetable from a file : `import` (`i`)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Imports a timetable from file. Currently only support (.ics) files exported from NUSMODS. +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Format: `import INDEX file/FILE_LOCATION`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* To import the timetable `nusmods_calendar.ics` for the person at index `1`: +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "`import 1 file/C:\\Users\\happycat96\\Downloads\\nusmods_calendar.ics` +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "You can import your NUSMODS timetable as a .ics file, as shown in the picture below."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "image::importics.png[]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d\u003d Export Timetable to a file : `export` (`e`)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Imports a timetable to .ics file. +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Format: `export INDEX file/FILE_LOCATION`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* To export the timetable for the person at index `1` to the file `export.ics`: +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " `export 1 file/C:\\Users\\happycat96\\Downloads\\export.ics` +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit` (`x`)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d Security Feature"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "bennchong"
        },
        "content": "The timetable content is \u0027locked\u0027, and you will be prompted with this login pop up box."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "bennchong"
        },
        "content": "image::Security.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "bennchong"
        },
        "content": "You will have to enter your credentials to log in. Only then would you be able to edit and view your own timetable,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "bennchong"
        },
        "content": "and  view your friends\u0027 timetable. The timetable that belongs to people that are not your friends will not be available to you, till you"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "bennchong"
        },
        "content": "add them as friends."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Closing this popup box will close the entire program. +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* *Add timeslot* : `addtime` +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "e.g. `addtime mon 10-12`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* *Delete timeslot* : `deletetime` +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "e.g. `deletetime tue 12-14`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* *Import Timetable from a file* : `import INDEX file/FILE_LOCATION`"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 2,
      "nianfei97": 65,
      "alexiscatnip": 29,
      "-": 222,
      "bennchong": 17
    }
  },
  {
    "path": "docs/team/bennchong.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d Benjamin Chong Zhi Yi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d PROJECT: FreeTime"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "FreeTime is a security-enabled desktop application that is used for finding available meeting slots between its users. This"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "available slot will be displayed for the user to choose from, which will be reflected in his timetable using our FreeTime GUI."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "* *Major enhancement*: added *the ability to authenticate users*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "** What it does: Allows the users to have unique access and control to his own timetable"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "** Justification: To prevent malicious users to edit other users\u0027 timetable, and even to view non-friend users. Friended users"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "bennchong": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.LogoutEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.AppUsers;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.Security;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.storage.AppUsersStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.storage.JsonAppUsersStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected AppUsers appUsers;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected Security security;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing FreeTime ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        AppUsersStorage appUsersStorage \u003d new JsonAppUsersStorage(config.getAppUsersFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        appUsers \u003d initUsers(appUsersStorage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, appUsersStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        security \u003d new SecurityManager(false, logic, appUsers);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs, security);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Returns a {@code AppUsers} using the file at {@code storage}\u0027s app users file path,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * or a new {@code AppUsers} with default configuration if errors occur when"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected AppUsers initUsers(AppUsersStorage storage) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Path usersFilePath \u003d storage.getAppUsersFilePath();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logger.info(\"Using users file : \" + usersFilePath);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        AppUsers initializedUsers;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            Optional\u003cAppUsers\u003e usersOptional \u003d storage.readAppUsers();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            initializedUsers \u003d usersOptional.orElse(new AppUsers());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            logger.warning(\"AppUsers file at \" + usersFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            initializedUsers \u003d new AppUsers();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            initializedUsers \u003d new AppUsers();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //Update users file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            storage.saveAppUsers(initializedUsers);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            logger.warning(\"Failed to save user file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return initializedUsers;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        logger.info(\"Starting FreeTime \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping FreeTime ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            //TODO Save Users Here"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Saves new users whenever someone logs out (Superset of the new users and prexisting ones)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleLogoutEvent(LogoutEvent logout) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            storage.saveAppUsers(appUsers);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            logger.severe(\"Failed to save users \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 3,
      "-": 202,
      "bennchong": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private String appTitle \u003d \"Timetable Deconflicter (TBC) V0.1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Path appUsersFilePath \u003d Paths.get(\"users.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Path getAppUsersFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return appUsersFilePath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 1,
      "-": 73,
      "bennchong": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/TimeTableChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/** Indicates the TimeTable in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeTableChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public final TimeTable data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeTableChangedEvent(TimeTable data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeTable getNewTimeTable() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return \"TimeTable\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/security/LogoutEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons.events.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/***"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Event for logout"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class LogoutEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return \"User Logged Out\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/security/SuccessfulLoginEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons.events.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/***"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Indicates a successful login attempt"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class SuccessfulLoginEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return \"Login Success\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/security/UnsuccessfulLoginEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons.events.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/***"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Indicates a unsuccessful login attempt"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class UnsuccessfulLoginEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return \"Login Failure\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ExitRegisterEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class ExitRegisterEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return \"Register Window Exited\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ShowLoginEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class ShowLoginEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return \"Login Window Shown\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ShowRegisterEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class ShowRegisterEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return \"Register Window Shown\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/SuccessfulRegisterEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class SuccessfulRegisterEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return \"Successfully Registered New User\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/IcsUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static biweekly.util.DayOfWeek.valueOfAbbr;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import biweekly.Biweekly;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import biweekly.ICalendar;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import biweekly.component.VEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import biweekly.property.DateEnd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import biweekly.property.DateStart;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import biweekly.property.RecurrenceRule;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import biweekly.property.Summary;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import biweekly.util.Frequency;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import biweekly.util.Recurrence;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Converts a TimeTable object instance to .ics and vice versa."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Usage:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * 1) Mainly used to read and write the TimeTable(s) of FreeTime into the disk for permanent storage."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * 2) Also used during import and export commands."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class IcsUtil {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String DEFAULT_ZONE_ID \u003d \"Asia/Shanghai\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(IcsUtil.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static IcsUtil instance;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private IcsUtil(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static IcsUtil getInstance() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            instance \u003d new IcsUtil();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Returns the TimeTable object from the .ics file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Returns {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Missing or corrupted or incompatible entries in the .ics file will silently fail, for now."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws IOException if the file format is not as expected."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public Optional\u003cTimeTable\u003e readTimeTableFromFile(Path filePath)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ICalendar iCalendar \u003d new ICalendar();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            iCalendar \u003d readICalendarFromFile(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new IOException(e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Optional\u003cTimeTable\u003e optionalTimeTable \u003d iCalendarToTimeTable(iCalendar);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return optionalTimeTable;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Converts {@code ICalendar} to {@code TimeTable}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Returns {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Missing or corrupted or incompatible entries in the .ics file will silently fail, for now."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws IOException if the file format is not as expected."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private Optional\u003cTimeTable\u003e iCalendarToTimeTable(ICalendar iCalendar) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        TimeTable timeTable \u003d new TimeTable();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        In the for-loop, we go through all the VEvents (logical equivalent to TimeSlots)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        in the iCalendar (logical equivalent to TimeTable)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Then we get all the properties of each VEvent, and Instantiate a TimeSlot using these properties as parameters."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Then we add this TimeSlot to the TimeTable."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        for (VEvent event : iCalendar.getEvents()) { //for-each TimeSlot in TimeTable"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            //formatter"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyyMMdd\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            DateFormat timeFormat \u003d new SimpleDateFormat(\"HHmmss\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            // this part extracts the vital information"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            DateStart dateStart \u003d event.getDateStart();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            String dateStartStr \u003d (dateStart \u003d\u003d null) ? null : dateFormat.format(dateStart.getValue());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            String timeStartStr \u003d (dateStart \u003d\u003d null) ? null : timeFormat.format(dateStart.getValue());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            DateEnd dateEnd \u003d event.getDateEnd();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            //we assume event ends on same day."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            String timeEndStr \u003d (dateEnd \u003d\u003d null) ? null : timeFormat.format(dateEnd.getValue());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            Summary summary \u003d event.getSummary();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            String summaryStr \u003d (summary \u003d\u003d null) ? null : summary.getValue();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            //TODO: add this parameter to timetable object."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            RecurrenceRule recurrenceRule \u003d event.getRecurrenceRule();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            String recurrenceRuleStr \u003d (recurrenceRule \u003d\u003d null) ? null : \"hasrecurrance\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            if (recurrenceRule \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                continue; //TODO: this is currently hacky. pls make proper."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            //after the above information extraction, we instantiate a TimeSlot with these info."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            LocalTime timeSlotStartTime \u003d timeStringToLocalTime(timeStartStr);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            LocalTime timeSlotEndTime \u003d timeStringToLocalTime(timeEndStr);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            DayOfWeek timeSlotDay \u003d dateStringToDayOfWeek(dateStartStr);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            System.out.println(timeSlotStartTime + \" to \" + timeSlotEndTime + \" on \" + timeSlotDay + \": \" + summaryStr);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            //Add timeslot to timetable"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            TimeSlot timeSlot \u003d new TimeSlot(timeSlotDay, timeSlotStartTime, timeSlotEndTime);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            timeTable.addTimeSlot(timeSlot);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (timeTable.isEmpty()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return Optional.of(timeTable);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Saves TimeTable object data to the .ics file specified"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param filePath Points to a .ics file containing data {@code TimeTable}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *             Cannot be null."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws FileNotFoundException    Thrown if the file is missing."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws IOException  Thrown if there is an error during converting the data"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *                                  into .ics and writing to the file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void saveTimeTableToFile(TimeTable timeTable, Path filePath)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ICalendar iCalendar \u003d timeTableToICalendar(timeTable);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            writeICalendarToFile(iCalendar, filePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new IOException (e);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Converts TimeTable to ICalendar object."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private ICalendar timeTableToICalendar(TimeTable timeTable) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Collection\u003cTimeSlot\u003e timeSlots \u003d timeTable.getTimeSlots();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ICalendar iCalendar \u003d new ICalendar();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        for (TimeSlot timeSlot : timeSlots) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            VEvent vEvent \u003d toWeeklyVEvent(timeSlot, 14);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            iCalendar.addEvent(vEvent);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return iCalendar;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Converts {@code TimeSlot} to a {@code VEvent} that has a {@code Recurrence} of {@code Frequency.WEEKLY}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Note that the exported data will only stretch for 1 week, the current week. (as of now)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private VEvent toWeeklyVEvent(TimeSlot timeSlot, int count) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //extract data from {@code TimeSlot}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        LocalTime startTime \u003d timeSlot.getStartTime();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        LocalTime endTime \u003d timeSlot.getEndTime();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        DayOfWeek dayOfWeek \u003d timeSlot.getDayOfWeek();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String label \u003d timeSlot.getLabel();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String abbreviation \u003d timeSlot.getAbbreviationFromDayOfWeek();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //write data to {@code VEvent}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        VEvent vEvent \u003d new VEvent();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //write data to {@code VEvent}: set the recurrence rule"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Recurrence recurrence \u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                new Recurrence.Builder(Frequency.WEEKLY).count(14).byDay(valueOfAbbr(abbreviation)).build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        RecurrenceRule recurrenceRule \u003d new RecurrenceRule(recurrence);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        vEvent.setRecurrenceRule(recurrenceRule);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //write data to {@code VEvent}: set the DateStart"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        vEvent.setDateStart(getPreviousDateOfDay(startTime, dayOfWeek));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //write data to {@code VEvent}: set the DateEnd"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        vEvent.setDateEnd(getPreviousDateOfDay(endTime, dayOfWeek));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //write data to {@code VEvent}: set summary (Module Name)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        vEvent.setSummary(label);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return vEvent;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Get the Date of the previous dayOfWeek."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * ie: if dayOfWeek is monday, then the return last monday\u0027s Date."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private Date getPreviousDateOfDay(LocalTime startTime, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        LocalDate previousDay \u003d"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                LocalDate.now(ZoneId.of(DEFAULT_ZONE_ID))"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                        .with(TemporalAdjusters.previous(dayOfWeek));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        LocalDateTime localDateTime \u003d startTime.atDate(previousDay);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return localDateTimeToDate(localDateTime);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Utility function to convert {@code LocalDateTime} to {@code Date}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private Date localDateTimeToDate(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Date out \u003d Date.from(localDateTime.atZone(ZoneId.of(DEFAULT_ZONE_ID)).toInstant());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Utility function to convert {@code Date} to {@code LocalDateTime}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private LocalDateTime dateToLocalDateTime(Date date) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Writes ICalendar object to file specified"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws IOException if any error occurs during write."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private void writeICalendarToFile(ICalendar iCalendar, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        File file \u003d filePath.toFile();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            Biweekly.write(iCalendar).go(file);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Reads {@code ICalendar} object from file specified"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Will return an empty ICalendar if the .ics file is empty."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * This function will silently fail if there are more than 1 {@code ICalendar} in a .ics file"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * the other {@code ICalendar} are simply not read!"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Thankfully, NUSMODS export only has 1 VCalendar in an .ics file, so all is good."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws IOException if any error occurs during read."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private ICalendar readICalendarFromFile(Path filePath) throws IOException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ICalendar iCalendar;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            iCalendar \u003d Biweekly.parse(filePath.toFile()).first();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new IOException(e);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return iCalendar;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Converts the ics-formatted dateString into DayOfWeek object."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param dateString    is in format yyyyMMdd"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private DayOfWeek dateStringToDayOfWeek(String dateString) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //TODO: defensive coding"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyyMMdd\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(dateString, fmt);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        DayOfWeek day \u003d date.getDayOfWeek();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Converts the ics-formatted timeString into a LocalTime object."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param timeString    is in format HHmmss"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private LocalTime timeStringToLocalTime(String timeString) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //TODO: defensive coding"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        int timeInt \u003d Integer.parseInt(timeString);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String formattedTime \u003d String.format(\"%06d\", timeInt);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"HHmmss\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        LocalTime time \u003d LocalTime.parse(formattedTime, fmt);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 304
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /** Returns an unmodifiable view of the friends of the person */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    ObservableList\u003cPerson\u003e getFriendList(Person person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /** Returns an unmodifiable view of the non-friends of the person */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    ObservableList\u003cPerson\u003e getOtherList(Person person);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Instantiates the user with a Person in database"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    void matchUserToPerson(String name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Clears the user instance when logging out"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    void clearUser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return the current authenticated User"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    User getUser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 6,
      "-": 27,
      "bennchong": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.User;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFriendList(Person person) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return model.getFriendList(person);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public ObservableList\u003cPerson\u003e getOtherList(Person person) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return model.getOtherList(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void matchUserToPerson(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        model.matchUserToPerson(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void clearUser() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        model.clearUser();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public User getUser() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return model.getUser();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 9,
      "-": 52,
      "bennchong": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 1,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTimeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotOverlapException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Adds a {@code TimeSlot} to the {@code TimeTable} of person at {@code Index index}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class AddTimeCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addtime\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \": Adds a timeslot to your timetable.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \"Parameters: DAYOFWEEK START - END\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Monday 8-10\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_ADD_TIMESLOT_SUCCESS \u003d \"Added timeslot: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_OVERLAP_TIMESLOT \u003d \"The timeslot added overlaps with an existing timeslot!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private final TimeSlot toAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Creates an {@code AddTimeCommand} to add the specified {@code TimeSlot}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public AddTimeCommand(TimeSlot timeSlot) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireNonNull(timeSlot);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.toAdd \u003d timeSlot;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person personToEdit \u003d model.getUser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person editedPerson;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            editedPerson \u003d createEditedPerson(personToEdit, toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (TimeSlotOverlapException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new CommandException(AddTimeCommand.MESSAGE_OVERLAP_TIMESLOT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.updateTimeTable(editedPerson.getTimeTable());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_TIMESLOT_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * and the {@code TimeSlot toAdd} added."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, TimeSlot toAdd) throws TimeSlotOverlapException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireAllNonNull(personToEdit, toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable timeTable \u003d new TimeTable(personToEdit.getTimeTable());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            timeTable.addTimeSlot(toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (TimeSlotOverlapException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                personToEdit.getAddress(), personToEdit.getTags(), timeTable, personToEdit.getFriends());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (!(other instanceof AddTimeCommand)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        AddTimeCommand e \u003d (AddTimeCommand) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return toAdd.equals(e.toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 1,
      "nianfei97": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 1,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteTimeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotDoesNotExistException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotOverlapException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Deletes a {@code TimeSlot} from the {@code TimeTable} of person at {@code Index index}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class DeleteTimeCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletetime\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \": Deletes a timeslot from your timetable.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \"Parameters: DAYOFWEEK START - END\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Monday 8-10\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_DELETE_TIMESLOT_SUCCESS \u003d \"Deleted timeslot: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_TIMESLOT_DOES_NOT_EXIST \u003d \"The timeslot to be deleted does not exist!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private final TimeSlot toDelete;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Creates an {@code DeleteTimeCommand} to delete the specified timeSlot"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public DeleteTimeCommand(TimeSlot timeSlot) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireNonNull(timeSlot);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.toDelete \u003d timeSlot;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person personToEdit \u003d model.getUser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person editedPerson;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            editedPerson \u003d createEditedPerson(personToEdit, toDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (TimeSlotDoesNotExistException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new CommandException(DeleteTimeCommand.MESSAGE_TIMESLOT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.updateTimeTable(editedPerson.getTimeTable());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TIMESLOT_SUCCESS, toDelete));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * and the {@code TimeSlot toDelete} deleted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, TimeSlot toDelete) throws TimeSlotOverlapException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireAllNonNull(personToEdit, toDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable timeTable \u003d new TimeTable(personToEdit.getTimeTable());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            timeTable.removeTimeSlot(toDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (TimeSlotDoesNotExistException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                personToEdit.getAddress(), personToEdit.getTags(), timeTable, personToEdit.getFriends());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (!(other instanceof DeleteTimeCommand)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeleteTimeCommand e \u003d (DeleteTimeCommand) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return toDelete.equals(e.toDelete);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 1,
      "nianfei97": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Friend;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        TimeTable timeTable \u003d personToEdit.getTimeTable();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Set\u003cFriend\u003e friendList \u003d personToEdit.getFriends();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, timeTable, friendList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        private Set\u003cFriend\u003e friendList;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            setFriends(toCopy.friendList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "         * Sets {@code friendList} to this object\u0027s {@code friendList}."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "         * A defensive copy of {@code friendList} is used internally."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "         */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        public void setFriends(Set\u003cFriend\u003e friendList) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            this.friendList \u003d (friendList !\u003d null) ? new HashSet\u003c\u003e(friendList) : null;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 15,
      "nianfei97": 1,
      "-": 227,
      "bennchong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"x\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILELOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.util.IcsUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Export a timetable as a .ICS file to a user-specified filePath."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"ex\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \": Exports timetable for the person identified by the \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \" number used in the displayed person list. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + PREFIX_FILELOCATION + \"FILE_LOCATION \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \" 1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + PREFIX_FILELOCATION + \"C:\\\\export_folder\\\\nusmods_calendar.ics\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exported timetable to %1$s.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_EMPTY \u003d \"Timetable is empty. Why would you want to export an empty timetable?\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_IO_ERROR \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            \"Failed to write the timetable to the path specified.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Creates an ExportCommand to export the specified person\u0027s timetable as .ics file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public ExportCommand(Index index, Path filePath) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        TimeTable timeTable;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        timeTable \u003d model.getTimeTable();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (timeTable.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            IcsUtil.getInstance().saveTimeTableToFile(timeTable, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new CommandException(MESSAGE_IO_ERROR);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, filePath.toString()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (!(other instanceof ExportCommand)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 1,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FreeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.User;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.DeconflictTimeTable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Selects a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class FreeCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"free\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \": Displays all common free timeslots between your timetable and the timetables of all selected people.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \"Parameters: [INDEX]... (must be positive integers)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 2 3\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_FREE_SUCCESS \u003d \"Displaying free timeslots with people: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private final Collection\u003cIndex\u003e targetIndices;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public FreeCommand(Collection \u003cIndex\u003e targetIndices) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireNonNull(targetIndices);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.targetIndices \u003d targetIndices;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        User user \u003d model.getUser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        List\u003cPerson\u003e friendList \u003d model.getFriendList(user);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeconflictTimeTable deconflict \u003d new DeconflictTimeTable(user.getTimeTable());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (Index index : targetIndices) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d friendList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            Person person \u003d friendList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            deconflict.addTimeTable(person.getTimeTable());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.updateTimeTable(deconflict);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        StringBuilder resultString \u003d new StringBuilder(MESSAGE_FREE_SUCCESS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (Index index : targetIndices) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            resultString.append(index.getOneBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            resultString.append(\u0027 \u0027);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return new CommandResult(resultString.toString().trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                || (other instanceof FreeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                \u0026\u0026 targetIndices.equals(((FreeCommand) other).targetIndices)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FriendCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Friend;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Allows user to befriend a user from the others list, add a user to their friend list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class FriendCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"friend\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \": Adds the person selected with the index to the friends list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String MESSAGE_ADD_FRIEND_SUCCESS \u003d \"Person added to the friend list!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public FriendCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        List\u003cPerson\u003e otherList \u003d model.getOtherList(model.getUser());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d otherList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person personToEdit \u003d otherList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person editedPerson \u003d personToEdit;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person editedUser \u003d model.getUser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        addFriendToPerson(editedPerson, model.getUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        addFriendToPerson(editedUser, personToEdit);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        editedPerson.getFriends().add(new Friend(model.getUser().getName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        editedUser.getFriends().add(new Friend(personToEdit.getName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.updatePerson(model.getUser(), editedUser);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new CommandResult(MESSAGE_ADD_FRIEND_SUCCESS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private void addFriendToPerson(Person editedPerson, Person person) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"g\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILELOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.util.IcsUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.Friend;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Imports a timetable from a user-provided .ICS file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"im\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \": Imports and overwrites timetable for the person identified by the \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \" number used in the displayed person list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + PREFIX_FILELOCATION + \"FILE_LOCATION \\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \" 1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + PREFIX_FILELOCATION + \"C:\\\\import_folder\\\\nusmods.ics\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Imported timetable for %1$s.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_EMPTY \u003d \"Timetable file empty.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_IO_ERROR \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            \"Failed to read the file specified. Check if it is corrupted/ incompatible/ inaccessible/ exists?\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Creates an ImportCommand to import the .ics data, parse it, and add a {@code Person} with this timetable"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public ImportCommand(Index index, Path filePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Optional\u003cTimeTable\u003e optionalTimeTable;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        TimeTable timeTable;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            optionalTimeTable \u003d IcsUtil.getInstance().readTimeTableFromFile(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new CommandException(MESSAGE_IO_ERROR);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (!optionalTimeTable.isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EMPTY));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        timeTable \u003d optionalTimeTable.get();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Person modifiedPerson \u003d createModifiedPerson(personToEdit, timeTable);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        model.updatePerson(personToEdit, modifiedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        model.updateTimeTable(modifiedPerson.getTimeTable());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, modifiedPerson));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Creates and returns a {@code Person}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * The returned {@code Person} only has their (@code TimeTable) changed!"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static Person createModifiedPerson(Person personToEdit, TimeTable importedTimeTable) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Name updatedName \u003d personToEdit.getName();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Phone updatedPhone \u003d personToEdit.getPhone();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Email updatedEmail \u003d personToEdit.getEmail();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Address updatedAddress \u003d personToEdit.getAddress();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Set\u003cFriend\u003e updatedFriends \u003d personToEdit.getFriends();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        TimeTable timeTable \u003d importedTimeTable;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, timeTable, updatedFriends);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (!(other instanceof ImportCommand)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 5,
      "alexiscatnip": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LogoutCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class LogoutCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"logout\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"lg\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully Logged Out\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        model.commandLogout();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.updateTimeTable(filteredPersonList.get(targetIndex.getZeroBased()).getTimeTable());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.tag.TagsContainsKeywords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Find and display the persons with the same tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Allows one to find the friends of similar tags"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"t\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \"the specified tags (case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" friends\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final TagsContainsKeywords tagsKeywords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public TagCommand(TagsContainsKeywords tagsKeywords) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.tagsKeywords \u003d tagsKeywords;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.updateFilteredPersonList(tagsKeywords);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.updateFriendList(tagsKeywords);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.updateOtherList(tagsKeywords);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnfriendCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Adds a user from the frined list to the others list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class UnfriendCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unfriend\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \": Removes the person with the index to from the friends list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String MESSAGE_REMOVE_FRIEND_SUCCESS \u003d \"Person removed from the friend list!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public UnfriendCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        List\u003cPerson\u003e friendList \u003d model.getFriendList(model.getUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d friendList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person personToEdit \u003d friendList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person editedPerson \u003d personToEdit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person editedUser \u003d model.getUser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        editedPerson.getFriends().removeIf(p -\u003e p.friendName.equals(model.getUser().getName()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        editedUser.getFriends().removeIf(p -\u003e p.friendName.equals(editedPerson.getName()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.updatePerson(model.getUser(), editedUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new CommandResult(MESSAGE_REMOVE_FRIEND_SUCCESS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Friend;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        TimeTable timeTable \u003d new TimeTable();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Set\u003cFriend\u003e friendList \u003d new HashSet\u003cFriend\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList, timeTable, friendList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 5,
      "-": 59,
      "bennchong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTimeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.AddTimeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Parses input arguments and creates a new AddTimeCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class AddTimeCommandParser implements Parser\u003cAddTimeCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTimeCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * and returns an AddTimeCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public AddTimeCommand parse (String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            TimeSlot timeSlot \u003d ParserUtil.parseTimeSlot(args.trim());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return new AddTimeCommand(timeSlot);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTimeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.AddTimeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.DeleteTimeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.FreeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.commands.FriendCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.LogoutCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.commands.UnfriendCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case AddCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case EditCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case SelectCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case DeleteCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case ClearCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case FindCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case ListCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case LogoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case LogoutCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return new LogoutCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case HistoryCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case ExitCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case HelpCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case UndoCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case RedoCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        case TagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        case TagCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return new TagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        case FriendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return new FriendCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        case UnfriendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return new UnfriendCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        case ImportCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        case ExportCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // TODO: Implement aliases"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case AddTimeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return new AddTimeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case DeleteTimeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return new DeleteTimeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case FreeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return new FreeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 13,
      "nianfei97": 25,
      "alexiscatnip": 10,
      "-": 91,
      "bennchong": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final Prefix PREFIX_TIMESLOT \u003d new Prefix(\"time/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final Prefix PREFIX_FILELOCATION \u003d new Prefix(\"file/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 1,
      "-": 14,
      "bennchong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteTimeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.DeleteTimeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Parses input arguments and creates a new DeleteTimeCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class DeleteTimeCommandParser implements Parser\u003cDeleteTimeCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTimeCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * and returns an DeleteTimeCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public DeleteTimeCommand parse (String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            TimeSlot timeSlot \u003d ParserUtil.parseTimeSlot(args.trim());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return new DeleteTimeCommand(timeSlot);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTimeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "bennchong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILELOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FILELOCATION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            Path path \u003d ParserUtil.parseFileLocation(argMultimap.getValue(PREFIX_FILELOCATION).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return new ExportCommand(index, path);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (NoSuchElementException ee) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE), ee);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FreeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.FreeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Parses input arguments and creates a new FreeCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class FreeCommandParser implements Parser\u003cFreeCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FreeCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * and returns an FreeCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public FreeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            Collection \u003cIndex\u003e indices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            for (String string : Arrays.asList(args.trim().split(\"\\\\s+\"))) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                indices.add(ParserUtil.parseIndex(string));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return new FreeCommand(indices);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FreeCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FriendCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.commands.FriendCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Parses arguments and creates a new FriendCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class FriendCommandParser implements Parser\u003cFriendCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FriendCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * and returns an FriendCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public FriendCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return new FriendCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FriendCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILELOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FILELOCATION);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            //FileLocation fileLocation \u003d ParserUtil.parseFileLocation(argMultimap.getValue(PREFIX_FILELOCATION).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            Path path \u003d ParserUtil.parseFileLocation(argMultimap.getValue(PREFIX_FILELOCATION).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return new ImportCommand(index, path);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (NoSuchElementException ee) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE), ee);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final HashMap\u003cString, DayOfWeek\u003e DAY_OF_WEEK_MAP \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DAY_OF_WEEK_MAP.put(\"MON\", DayOfWeek.MONDAY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DAY_OF_WEEK_MAP.put(\"TUE\", DayOfWeek.TUESDAY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DAY_OF_WEEK_MAP.put(\"WED\", DayOfWeek.WEDNESDAY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DAY_OF_WEEK_MAP.put(\"THU\", DayOfWeek.THURSDAY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DAY_OF_WEEK_MAP.put(\"FRI\", DayOfWeek.FRIDAY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DAY_OF_WEEK_MAP.put(\"SAT\", DayOfWeek.SATURDAY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DAY_OF_WEEK_MAP.put(\"SUN\", DayOfWeek.SUNDAY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Parses a {@code String timeslot} into a {@code timeslot}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static TimeSlot parseTimeSlot (String timeslot) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        requireNonNull(timeslot);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        String trimmedTimeSlot \u003d timeslot.trim();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (!TimeSlot.isValidTimeSlot(trimmedTimeSlot)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new ParseException(TimeSlot.MESSAGE_GENERAL_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        String dayString \u003d trimmedTimeSlot.split(\"\\\\s+\", 2)[0];"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DayOfWeek day;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            day \u003d parseDay(dayString);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new ParseException((TimeSlot.MESSAGE_CANNOT_PARSE_DAY));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        String timeRangeString \u003d trimmedTimeSlot.split(\"\\\\s+\", 2)[1];"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        String startString \u003d timeRangeString.split(\"-\", 2)[0].trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        String endString \u003d timeRangeString.split(\"-\", 2)[1].trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        LocalTime startTime;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        LocalTime endTime;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            startTime \u003d parseTime(startString);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            endTime \u003d parseTime(endString);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new ParseException((TimeSlot.MESSAGE_CANNOT_PARSE_TIME));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            TimeSlot toReturn \u003d new TimeSlot(day, startTime, endTime);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return toReturn;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new ParseException(TimeSlot.MESSAGE_INVALID_TIME_SLOT);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Parses a string and returns a DayOfWeek"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param dayString String to be parsed"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @return DayOfWeek of String"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws IllegalArgumentException if string cannot be parsed"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static DayOfWeek parseDay(String dayString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (DAY_OF_WEEK_MAP.containsKey(dayString.toUpperCase())) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return DAY_OF_WEEK_MAP.get(dayString.toUpperCase());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                return DayOfWeek.valueOf(dayString.toUpperCase());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Parses {@code timeString} according to various defined formats into a {@code LocalTime} object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param timeString {@code String} to be parsed"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @return {@code LocalTime} object representing {@code timeString}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws DateTimeParseException if {@code timeString} cannot be parsed"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static LocalTime parseTime(String timeString) throws DateTimeParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (timeString.contains(\":\") \u0026\u0026 timeString.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            format \u003d DateTimeFormatter.ofPattern(\"H:mm\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else if (timeString.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            format \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else if (timeString.length() \u003d\u003d 3) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            format \u003d DateTimeFormatter.ofPattern(\"Hmm\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else if (timeString.length() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            format \u003d DateTimeFormatter.ofPattern(\"HH\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else if (timeString.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            format \u003d DateTimeFormatter.ofPattern(\"H\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return LocalTime.parse(timeString, format);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Parses a {@code String fileLocation} into a {@code fileLocation}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static Path parseFileLocation (String fileLocation) throws ParseException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(fileLocation);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String trimmedFileLocation \u003d fileLocation.trim();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //FileLocation newFileLocation \u003d new FileLocation(fileLocation);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Path newFilePath \u003d Paths.get(trimmedFileLocation);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //check file exists in the disk //does not check the validity of file!"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (!FileUtil.isFileExists(newFilePath)) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new ParseException(FileLocation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //check file ends in .ics //does not check the validity of file!"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String pattern \u003d \"^.*\\\\.(ics|ICS)$\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (Pattern.matches(pattern, fileLocation)) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new ParseException(FileLocation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return newFilePath;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 90,
      "alexiscatnip": 29,
      "-": 124,
      "bennchong": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TagCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.tag.TagsContainsKeywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Parses the arguments of tag command and returns as a Tag object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class TagCommandParser implements Parser\u003cTagCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TagCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * and returns an TagCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public TagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d Arrays.asList(tagKeywords); // Passing it a collection"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new TagCommand(new TagsContainsKeywords(ParserUtil.parseTags(tagSet)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnfriendCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.commands.UnfriendCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Parses input and creates a new UnfriendCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class UnfriendCommandParser implements Parser\u003cUnfriendCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnfriendCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * and returns an UnfriendCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public UnfriendCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return new UnfriendCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnfriendCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /** Returns the TimeTable */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    TimeTable getTimeTable();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Replaces the timetable shown with a new timetable"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param timeTable Timetable to replace"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    void updateTimeTable(TimeTable timeTable);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Update the friend list to show the current"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    void updateFriendList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Updates the others list to show current"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    void updateOtherList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Return the friends list of the current user"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    ObservableList\u003cPerson\u003e getFriendList(Person person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Return the non-friends list of the current user"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    ObservableList\u003cPerson\u003e getOtherList(Person person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Instantiates the user with a Person in database"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    void matchUserToPerson(String name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Clears the user instance when logging out"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    void clearUser();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return the current authenticated User"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    User getUser();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * For CLI Logout to call to raise event"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    void commandLogout();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 22,
      "nianfei97": 10,
      "-": 78,
      "bennchong": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.commons.events.model.TimeTableChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.LogoutEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.CombinedFriendPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.CombinedOtherPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.FriendListPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.OtherListPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final FilteredList\u003cPerson\u003e friendList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final FilteredList\u003cPerson\u003e otherList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private final TimeTable timeTable;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private ObservableList\u003cPerson\u003e list;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, userPrefs, timeTable."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendList \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        otherList \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTable \u003d new TimeTable();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeTable getTimeTable() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return timeTable;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //TODO Check whether this actually works when modifying your own data."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (user !\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            matchUserToPerson(user.getName().toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /** Raises an event to indicate the timetable has changed */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private void indicateTimeTableChanged() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        raise(new TimeTableChangedEvent(timeTable));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void updateTimeTable(TimeTable timeTable) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireNonNull(timeTable);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.timeTable.updateTimeTable(timeTable);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        indicateTimeTableChanged();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public void updateFriendList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendList.setPredicate(combinedFriendPredicate(predicate, friendsPredicateFromPerson(user)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public void updateOtherList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        otherList.setPredicate(combinedOtherPredicate(predicate, othersPredicateFromPerson(user)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFriendList(Person person) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendList.setPredicate(friendsPredicateFromPerson(person));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return FXCollections.unmodifiableObservableList(friendList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public ObservableList\u003cPerson\u003e getOtherList(Person person) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        otherList.setPredicate(othersPredicateFromPerson(person));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return FXCollections.unmodifiableObservableList(otherList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // TODO: Implement after user comes online"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // indicateTimeTableChanged(user.getTimeTable());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // TODO: Implement after user comes online"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // indicateTimeTableChanged(user.getTimeTable());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                \u0026\u0026 timeTable.equals(other.timeTable);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public FriendListPredicate friendsPredicateFromPerson(Person person) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new FriendListPredicate(person);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public OtherListPredicate othersPredicateFromPerson(Person person) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new OtherListPredicate(person);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Combines the predicates to allow SetPredicate to be called"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * @param friendListPredicate"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public CombinedFriendPredicate combinedFriendPredicate(Predicate\u003cPerson\u003e predicate,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                                                           FriendListPredicate friendListPredicate) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new CombinedFriendPredicate(predicate, friendListPredicate);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public CombinedOtherPredicate combinedOtherPredicate(Predicate\u003cPerson\u003e predicate,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                                                         OtherListPredicate otherListPredicate) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new CombinedOtherPredicate(predicate, otherListPredicate);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void matchUserToPerson(String name) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        list \u003d versionedAddressBook.getPersonList();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //Loops through personlist to get matched name Person Class"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        for (Person person : list) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            if (name.equals(person.getName().toString())) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                this.user \u003d new User(person.getData());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void clearUser() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.user \u003d null;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public User getUser() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //TODO Can you do this? Must you create a new object to be returned instead?"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return this.user;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void commandLogout() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        raise(new LogoutEvent());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 55,
      "nianfei97": 31,
      "-": 149,
      "bennchong": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/User.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.person.UserParameterHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/***"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Represents the authenticated User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class User extends Person {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public User(UserParameterHelper param) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        super(param.getName(), param.getPhone(), param.getEmail(), param.getAddress(), param.getTags(),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                param.getTimeTable(), param.getFriendList());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param name of the person that you are trying to find as a friend"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return boolean whether name is found as a friend"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //public boolean isFriend(String name){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //public void addFriend(String name){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //public void removeFriend(String name){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Returns true if a given string is a valid address."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 1,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/CombinedFriendPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Combines the predicates to allow SetPredicate to be called"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class CombinedFriendPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final Predicate\u003cPerson\u003e predicate1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final FriendListPredicate friendListPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public CombinedFriendPredicate(Predicate\u003cPerson\u003e predicate, FriendListPredicate friendListPredicate) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.predicate1 \u003d predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.friendListPredicate \u003d friendListPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        if (predicate1.test(person) \u0026\u0026 friendListPredicate.test(person)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/CombinedOtherPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Combines the predicates to allow SetPredicate to be called"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class CombinedOtherPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final Predicate\u003cPerson\u003e predicate1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final OtherListPredicate otherListPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public CombinedOtherPredicate(Predicate\u003cPerson\u003e predicate, OtherListPredicate otherListPredicate) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.predicate1 \u003d predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.otherListPredicate \u003d otherListPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        if (predicate1.test(person) \u0026\u0026 otherListPredicate.test(person)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/DeconflictTimeTable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotNotOverlapException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Represents a deconflicted {@code TimeTable}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Unlike {@code TimeTable}, any {@code TimeSlot}s added to {@code DeconflictTimeTable} will merge with any"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * {@code TimeSlot}s that it overlaps with."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * As such, the overwritten method {@code addTimeSlot()} does not throw {@code TimeSlotOverlapException}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class DeconflictTimeTable extends TimeTable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final Color DECONFLICT_TIMESLOT_COLOR \u003d Color.RED;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public DeconflictTimeTable() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public DeconflictTimeTable(TimeTable input) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        addTimeTable(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Adds {@code toAdd} to the {@code DeconflictTimeTable}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toAdd {@code TimeTable} to add"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void addTimeTable(TimeTable toAdd) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (TimeSlot timeSlot : toAdd.getTimeSlots()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            addTimeSlot(timeSlot);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Adds {@code toAdd} to the {@code DeconflictTimeTable}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toAdd {@code TimeSlot} to add"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void addTimeSlot(TimeSlot toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot merged \u003d new TimeSlot(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (TimeSlot overlap : findOverlapOrAdjacent(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                merged.mergeInto(overlap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            } catch (TimeSlotNotOverlapException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                // This should not happen since findOverlapOrAdjacent() only returns timeslots that can be merged"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            removeTimeSlot(overlap);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        merged.setColor(DECONFLICT_TIMESLOT_COLOR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeSlots.add(merged);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Determines which {@code TimeSlot}s in this {@code TimeTable} overlaps or is adjacent with {@code toCheck}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toCheck the {@code TimeSlot} to be checked against"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @return {@code Collection} containing overlapping {@code TimeSlot}s"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public Collection\u003cTimeSlot\u003e findOverlapOrAdjacent(TimeSlot toCheck) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection \u003cTimeSlot\u003e toReturn \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (TimeSlot timeSlot : timeSlots) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            if (timeSlot.isOverlap(toCheck) || timeSlot.isAdjacent(toCheck)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                toReturn.add(timeSlot);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/FileLocation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Represents a fileLocation."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFileLocation(String test)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class FileLocation {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            \"FileLocation should be a valid file path.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public final String fileLocation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Constructs a {@code FileLocation}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param fileLocation A valid fileLocation."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public FileLocation(String fileLocation) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(fileLocation);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        checkArgument(isValidFileLocation(fileLocation), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        this.fileLocation \u003d fileLocation;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Returns true if a given string is a valid file path."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public boolean isValidFileLocation(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return FileUtil.isValidPath(test);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Returns true if the file path of current object is valid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public boolean isValidFileLocation() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return FileUtil.isValidPath(fileLocation);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Returns the equivalent Path object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public Path toPath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return Paths.get(fileLocation.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return fileLocation;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                || (other instanceof FileLocation // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                \u0026\u0026 fileLocation.equals(((FileLocation) other).fileLocation)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return fileLocation.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Friend.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Represents the list of friends that a user can have"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class Friend {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Friend names must be one of the persons in the list.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public final Name friendName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public Friend(Name friendName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        requireNonNull(friendName);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.friendName \u003d friendName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public Name getFriendName() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return friendName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return friendName.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                || (other instanceof Friend // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u0026\u0026 friendName.equals(((Friend) other).friendName)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return friendName.hashCode();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/FriendListPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Creates a predicate from the Person to be used to create the friend list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class FriendListPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final Person currentUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public FriendListPredicate(Person currentUser) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.currentUser \u003d currentUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Set\u003cFriend\u003e friendList \u003d currentUser.getFriends();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        for (Friend friend : friendList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            if (currentUser.getName().equals(person.getName())) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            if (person.getName().equals(friend.getFriendName())) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/OtherListPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Creates a predicate to be used to find the non-friends in persons list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class OtherListPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final Person currentUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public OtherListPredicate(Person currentUser) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.currentUser \u003d currentUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Set\u003cFriend\u003e otherList \u003d currentUser.getFriends();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        for (Friend other : otherList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            if (currentUser.getName().equals(person.getName())) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            if (person.getName().equals(other.getFriendName())) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    //Timetable field (Currently only one)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private TimeTable timeTable;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    // Friend list of the person"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private Set\u003cFriend\u003e friendList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                  Set\u003cTag\u003e tags, TimeTable timeTable, Set\u003cFriend\u003e friendList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, timeTable, friendList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.friendList \u003d friendList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.timeTable \u003d timeTable;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public TimeTable getTimeTable() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return timeTable;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Returns an immutable Friend set"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public Set\u003cFriend\u003e getFriends() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return friendList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u0026\u0026 otherPerson.getFriends().equals(getFriends())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                \u0026\u0026 otherPerson.getTimeTable().equals(getTimeTable());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public UserParameterHelper getData() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return new UserParameterHelper(this.name, this.phone, this.email, this.address, this.tags,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                this.timeTable, this.friendList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 14,
      "nianfei97": 5,
      "-": 120,
      "bennchong": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TimeSlot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotNotOverlapException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Represents a single TimeSlot in TimeTable Class"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class TimeSlot {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // TODO: Make constraint message more descriptive"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_GENERAL_CONSTRAINTS \u003d \"Does not fit constraints!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_CANNOT_PARSE_DAY \u003d \"Accepted day format: MONDAY\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_CANNOT_PARSE_TIME \u003d \"Accepted time format: 8-10\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME_SLOT \u003d \"Invalid TimeSlot\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // TODO: Change to accept times with non 0 minutes"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            \"\\\\w+(\\\\s*)([0-9]|[0-1][0-9]|[2][0-3])[:]?[0]?[0]?(\\\\s*)[-](\\\\s*)([0-9]|[0-1][0-9]|[2][0-3])[:]?[0]?[0]?\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final Color DEFAULT_COLOR \u003d Color.BLACK;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private Color color;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private String label;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeSlot(DayOfWeek day, LocalTime start, LocalTime end) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireAllNonNull(day, start, end);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        checkArgument(isValidTimeSlot(start, end), MESSAGE_INVALID_TIME_SLOT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        dayOfWeek \u003d day;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        startTime \u003d start;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        endTime \u003d end;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        color \u003d DEFAULT_COLOR;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeSlot(DayOfWeek day, LocalTime start, LocalTime end, Color col) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireAllNonNull(day, start, end);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        checkArgument(isValidTimeSlot(start, end), MESSAGE_INVALID_TIME_SLOT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        dayOfWeek \u003d day;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        startTime \u003d start;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        endTime \u003d end;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        color \u003d col;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeSlot(TimeSlot input) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        dayOfWeek \u003d input.dayOfWeek;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        startTime \u003d input.startTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        endTime \u003d input.endTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        color \u003d input.color;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public DayOfWeek getDayOfWeek() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return dayOfWeek;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public String getLabel() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public Color getColor() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return color;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void setColor(Color color) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.color \u003d color;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static boolean isValidTimeSlot(String test) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static boolean isValidTimeSlot(LocalTime start, LocalTime end) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return !(start.equals(end) || start.isAfter(end));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Checks whether this {@code TimeSlot} overlaps with {@code toCompare}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toCompare {@code TimeSlot} to compare against"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @return Whether this {@code TimeSlot} overlaps with {@code toCompare}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean isOverlap(TimeSlot toCompare) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        boolean isNotOverlapTime \u003d (this.endTime.isBefore(toCompare.startTime)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                || toCompare.endTime.isBefore(this.startTime)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                || isAdjacent(toCompare));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return isSameDay(toCompare) \u0026\u0026 !isNotOverlapTime;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Checks whether this {@code TimeSlot} is adjacent to {@code toCompare}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toCompare {@code TimeSlot} to compare against"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @return Whether this {@code TimeSlot} is adjacent to {@code toCompare}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean isAdjacent(TimeSlot toCompare) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return isSameDay(toCompare)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                \u0026\u0026 (this.endTime.equals(toCompare.startTime) || this.startTime.equals(toCompare.endTime));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean isSameDay(TimeSlot toCompare) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return this.dayOfWeek \u003d\u003d toCompare.dayOfWeek;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Merges {@code toMerge} into this {@code TimeSlot}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * This {@code TimeSlot} must overlap or be adjacent with {@code toMerge}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toMerge {@code TimeSlot} to be merged"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws TimeSlotNotOverlapException if {@code toMerge} does not overlap with this {@code TimeSlot}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void mergeInto(TimeSlot toMerge) throws TimeSlotNotOverlapException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot merged;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            merged \u003d merge(toMerge);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (TimeSlotNotOverlapException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.startTime \u003d merged.startTime;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.endTime \u003d merged.endTime;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.dayOfWeek \u003d merged.dayOfWeek;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Returns a {@code TimeSlot} with {@code toMerge} merged with this {@code TimeSlot}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * This {@code TimeSlot} must overlap or be adjacent with {@code toMerge}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toMerge {@code TimeSlot} to be merged"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @return Merged {@code TimeSlot}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws TimeSlotNotOverlapException if {@code toMerge} does not overlap with this {@code TimeSlot}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeSlot merge(TimeSlot toMerge) throws TimeSlotNotOverlapException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (!isOverlap(toMerge) \u0026\u0026 !isAdjacent(toMerge)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new TimeSlotNotOverlapException();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        LocalTime toReturnStart \u003d this.startTime.isBefore(toMerge.startTime) ? this.startTime : toMerge.startTime;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        LocalTime toReturnEnd \u003d this.endTime.isAfter(toMerge.endTime) ? this.endTime : toMerge.endTime;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DayOfWeek toReturnDay \u003d this.dayOfWeek;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return new TimeSlot(toReturnDay, toReturnStart, toReturnEnd);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        builder.append(getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.ENGLISH))"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .append(\" \")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .append(startTime)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .append(\" - \")"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .append(endTime);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (!(other instanceof TimeSlot)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot otherTimeSlot \u003d (TimeSlot) other;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return otherTimeSlot.getDayOfWeek().equals(getDayOfWeek())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                \u0026\u0026 otherTimeSlot.startTime.equals(startTime)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                \u0026\u0026 otherTimeSlot.endTime.equals(endTime);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * converts DayOfWeek object into the corresponding abbreviation."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Possible outputs:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * MO, TU, WE, TH, FR, SA, SU"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public String getAbbreviationFromDayOfWeek() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String dayString \u003d dayOfWeek.getDisplayName(TextStyle.FULL , Locale.ENGLISH);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return dayString.substring(0, 2);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return Objects.hash(dayOfWeek, startTime, endTime);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 185,
      "alexiscatnip": 9,
      "-": 15,
      "bennchong": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TimeTable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotDoesNotExistException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotOverlapException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a timetable that is associated with a person"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class TimeTable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final ArrayList\u003cColor\u003e COLOR_LIST \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        COLOR_LIST.add(Color.BLUE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        COLOR_LIST.add(Color.GREEN);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        COLOR_LIST.add(Color.YELLOW);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        COLOR_LIST.add(Color.ORANGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        COLOR_LIST.add(Color.PINK);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        COLOR_LIST.add(Color.PURPLE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    protected Collection \u003cTimeSlot\u003e timeSlots;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TimeTable() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeSlots \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeTable(Collection \u003cTimeSlot\u003e input) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeSlots.addAll(input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeTable(TimeTable input) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this(input.getTimeSlots());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public Collection \u003cTimeSlot\u003e getTimeSlots() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection \u003cTimeSlot\u003e toReturn \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addAll(timeSlots);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Overwrites this {@code TimeTable} with {@code toReplace}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void updateTimeTable(TimeTable toReplace) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeSlots.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeSlots.addAll(toReplace.getTimeSlots());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Adds a TimeSlot to the TimeTable"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toAdd {@code TimeSlot} to be added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws TimeSlotOverlapException if {@code toAdd} overlaps with an existing {@code TimeSlot}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void addTimeSlot(TimeSlot toAdd) throws TimeSlotOverlapException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (hasOverlap(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new TimeSlotOverlapException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            toAdd.setColor(getRandomColor());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            timeSlots.add(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Removes a {@code TimeSlot} from the {@code TimeTable}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toRemove {@code TimeSlot} to be removed"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws TimeSlotDoesNotExistException if {@code toRemove} does not exist in the {@code TimeTable}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void removeTimeSlot (TimeSlot toRemove) throws TimeSlotDoesNotExistException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (!timeSlots.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new TimeSlotDoesNotExistException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Checks whether {@code toCheck} overlaps with any {@code TimeSlot}s in this {@code TimeTable}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toCheck {@code TimeSlot} to be checked"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @return Whether an overlapping {@code TimeSlot} exists in this {@code TimeTable}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean hasOverlap(TimeSlot toCheck) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (TimeSlot timeSlot : timeSlots) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            if (timeSlot.isOverlap(toCheck)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // TODO: Make it such that it doesn\u0027t repeat colors too often"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public Color getRandomColor() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return COLOR_LIST.get((int) (Math.random() * COLOR_LIST.size()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return timeSlots.isEmpty();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (!(other instanceof TimeTable)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable otherTimeTable \u003d (TimeTable) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return otherTimeTable.getTimeSlots().equals(this.getTimeSlots());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 102,
      "-": 15,
      "bennchong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UserParameterHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Helper class for User Class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class UserParameterHelper {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //Timetable field (Currently only one)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private TimeTable timeTable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    // Friend list of the person"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Set\u003cFriend\u003e friendList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public UserParameterHelper(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, TimeTable timeTable,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                               Set\u003cFriend\u003e friendList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.timeTable \u003d timeTable;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.friendList \u003d friendList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public TimeTable getTimeTable() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return timeTable;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Set\u003cFriend\u003e getFriendList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return friendList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/TimeSlotDoesNotExistException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Signals that the TimeSlot to be removed does not exist in the TimeTable."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeSlotDoesNotExistException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeSlotDoesNotExistException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        super(\"The timeslot to be removed does not exist!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/TimeSlotNotOverlapException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Signals that the {@code TimeSlot} to be merged cannot be merged"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeSlotNotOverlapException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeSlotNotOverlapException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        super(\"The timeslot to be merged does not overlap with the current timeslot!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/TimeSlotOverlapException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Signals that the operation will result in overlapping TimeSlots being added."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeSlotOverlapException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeSlotOverlapException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        super(\"The added timeslot overlaps with existing timeslots!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagsContainsKeywords.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Test for the keywords and if it\u0027s present in the collections"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class TagsContainsKeywords implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final Set\u003cTag\u003e tagKeywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public TagsContainsKeywords(Set\u003cTag\u003e tagKeywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.tagKeywords \u003d tagKeywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return !Collections.disjoint(person.getTags(), tagKeywords);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Friend;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                getTagSet(\"friends\"), new TimeTable(), new HashSet\u003cFriend\u003e()),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), new TimeTable(), new HashSet\u003cFriend\u003e()),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                getTagSet(\"neighbours\"), new TimeTable(), new HashSet\u003cFriend\u003e()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                getTagSet(\"family\"), new TimeTable(), new HashSet\u003cFriend\u003e()),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                getTagSet(\"classmates\"), new TimeTable(), new HashSet\u003cFriend\u003e()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                getTagSet(\"colleagues\"), new TimeTable(), new HashSet\u003cFriend\u003e())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 9,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/security/AccountCredential.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * A serializable class that contains username and hashed password"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class AccountCredential implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static final String DEFAULT_USERNAME \u003d \"test\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static final String DEFAULT_PASSWORD \u003d \"test\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private String userName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private String hashedPassword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public AccountCredential() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.userName \u003d DEFAULT_USERNAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.hashedPassword \u003d hash(DEFAULT_PASSWORD);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public AccountCredential(String userName, String password) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.hashedPassword \u003d hash(password);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String getUserName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return userName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Compares"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param password by hashing it first then comparing with stored hashedPassword"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean passwordIsValid(String password) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        String inputHashed \u003d hash(password);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (inputHashed.equals(hashedPassword)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Converts"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param password into"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return a hashed password"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private String hash(String password) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //TODO FIND A GOOD HASHING LIBRARY"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/security/AppUsers.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Represents FreeTime Registered Users"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class AppUsers {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private ArrayList\u003cAccountCredential\u003e accountCredentials;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public AppUsers() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.accountCredentials \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        accountCredentials.add(new AccountCredential());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ArrayList\u003cAccountCredential\u003e getAccountCredentials() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return accountCredentials;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void updateAccountCredentials(ArrayList\u003cAccountCredential\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.accountCredentials \u003d list;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (!(other instanceof AppUsers)) { //this handles null as well."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        AppUsers o \u003d (AppUsers) other;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return Objects.equals(accountCredentials, o.accountCredentials);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return Objects.hash(accountCredentials);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/security/RegisterFlag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Containing return types for register method"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public enum RegisterFlag {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    SUCCESS, USER_ALREADY_EXISTS, INCOMPLETE_FIELD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/security/Security.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/***"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * API of Security Component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public interface Security {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Login a user with associated password"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param username Username"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param password Password"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    void login(String username, String password);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Logs out"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    void logout();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Registers the user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Returns 1 if successful, 2 if user exists, 3 if the fields are incomplete"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    RegisterFlag register(String username, String password, String email, String phone, String address);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return is authenticated for tests"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    boolean getAuthentication();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return the current authenticated User"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    User getUser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/security/SecurityManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.LogoutEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.SuccessfulLoginEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.User;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/***"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": " *  Implements a Security Module that handles authentication"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class SecurityManager extends ComponentManager implements Security {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private boolean isAuthenticated;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private AppUsers appUsers;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private ArrayList\u003cAccountCredential\u003e userlist;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private boolean incorrectPassWord \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public SecurityManager(boolean isTest, Logic logic, AppUsers appUsers) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.isAuthenticated \u003d isTest; //Test for now"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.username \u003d \"test\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.password \u003d \"test\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.appUsers \u003d appUsers;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean getAuthentication() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return this.isAuthenticated;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void login(String username, String password) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        userlist \u003d appUsers.getAccountCredentials();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        for (AccountCredential acc : userlist) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            if (username.equals(acc.getUserName())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                if (acc.passwordIsValid(password)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    this.isAuthenticated \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    logic.matchUserToPerson(username);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    raise(new SuccessfulLoginEvent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    //THROW INCORRECT PASSWORD EXCEPTION"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    incorrectPassWord \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    raise(new NewResultAvailableEvent(\"Incorrect Password\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //When username is not in the list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (!incorrectPassWord \u0026\u0026 !this.isAuthenticated) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            //THROW USER NOT FOUND"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            raise(new NewResultAvailableEvent(\"Username not found\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        incorrectPassWord \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void logout() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.isAuthenticated \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //Clears instance of User in model to prevent anyone accessing previously logged in user"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logic.clearUser();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public RegisterFlag register(String username, String password, String email, String phone, String address) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            logic.execute(\"add n/\" + username + \" e/\" + email + \" p/\" + phone + \" a/\" + address);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            this.isAuthenticated \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            logic.matchUserToPerson(username);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            userlist \u003d appUsers.getAccountCredentials();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            userlist.add(new AccountCredential(username, password));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            appUsers.updateAccountCredentials(userlist);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return RegisterFlag.SUCCESS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return RegisterFlag.USER_ALREADY_EXISTS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return RegisterFlag.INCOMPLETE_FIELD;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //TODO Use password to create a database tgt with username"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public User getUser() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return logic.getUser();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleCommandLogoutEvent(LogoutEvent logout) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logout();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/security/UserStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Friend;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * A stub to test for user and the concept of \"me\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class UserStub {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static Person getUser() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        HashSet\u003cFriend\u003e friendSetStub \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Friend friend1 \u003d new Friend(new Name(\"Julian Tan\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Friend friend2 \u003d new Friend(new Name(\"Chun Teck\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Friend friend3 \u003d new Friend(new Name(\"Chun Lin\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendSetStub.addAll(Arrays.asList(friend1, friend2, friend3));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person personStub \u003d new Person(new Name(\"Julian Lim\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                new Phone(\"98765432\"), new Email(\"johnd@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                new Address(\"311, Clementi Ave 2, #02-25\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                new HashSet\u003cTag\u003e(), new TimeTable(), friendSetStub);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return personStub;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AppUsersStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.AppUsers;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Represents a storage for {@link AppUsers}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public interface AppUsersStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Returns the file path of the AppUsers data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    Path getAppUsersFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Returns AppUsers data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    Optional\u003cAppUsers\u003e readAppUsers() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Saves the given {@link AppUsers} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param appUsers cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    void saveAppUsers(AppUsers appUsers) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/IcsTimeTableStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.util.IcsUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * A class to access TimeTable stored in the hard disk as an .ics file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class IcsTimeTableStorage implements TimeTableStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public IcsTimeTableStorage(Path filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public Path getTimeTableFilePath() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public Optional\u003cTimeTable\u003e readTimeTable() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return readTimeTable(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Similar to {@link #readTimeTable()}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param timeTableFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public Optional\u003cTimeTable\u003e readTimeTable(Path timeTableFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(timeTableFilePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return IcsUtil.getInstance().readTimeTableFromFile(timeTableFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void saveTimeTable(TimeTable timeTable) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            IcsUtil.getInstance().saveTimeTableToFile(timeTable, filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAppUsersStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.AppUsers;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * A class to access AppUsers stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class JsonAppUsersStorage implements AppUsersStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public JsonAppUsersStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Path getAppUsersFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Optional\u003cAppUsers\u003e readAppUsers() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return readAppUsers(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Similar to {@link #readAppUsers()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param appUsersFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Optional\u003cAppUsers\u003e readAppUsers(Path appUsersFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return JsonUtil.readJsonFile(appUsersFilePath, AppUsers.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void saveAppUsers(AppUsers appUsers) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        JsonUtil.saveJsonFile(appUsers, filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.AppUsers;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, AppUsersStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    Optional\u003cAppUsers\u003e readAppUsers() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    void saveAppUsers(AppUsers appUsers) throws IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "bennchong": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.AppUsers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private AppUsersStorage appUsersStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private TimeTableStorage timeTableStorageStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                          AppUsersStorage appUsersStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.appUsersStorage \u003d appUsersStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppUsers methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Path getAppUsersFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return appUsersStorage.getAppUsersFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Optional\u003cAppUsers\u003e readAppUsers() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return appUsersStorage.readAppUsers();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void saveAppUsers(AppUsers appUsers) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        appUsersStorage.saveAppUsers(appUsers);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 1,
      "-": 91,
      "bennchong": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TimeTableStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Represents a storage for a single {@link seedu.address.model.person.TimeTable} object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public interface TimeTableStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Returns the file path of the TimeTable data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    Path getTimeTableFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Returns TimeTable data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage (.ics) file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    Optional\u003cTimeTable\u003e readTimeTable() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Saves the given {@link TimeTable} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param timeTable cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    void saveTimeTable(TimeTable timeTable) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedFriend.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Friend;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Constructs a friend"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class XmlAdaptedFriend {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private String friendName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Constructs an XmlAdaptedFriend."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public XmlAdaptedFriend() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Constructs a {@code XmlAdaptedFriend} with the given {@code friendName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public XmlAdaptedFriend(String friendName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.friendName \u003d friendName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Converts a given Friend into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public XmlAdaptedFriend(Friend source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendName \u003d source.friendName.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Converts this jaxb-friendly adapted friend object into the model\u0027s Friend object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public Friend toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new Friend(new Name(friendName));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        if (!(other instanceof XmlAdaptedFriend)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return friendName.equals(((XmlAdaptedFriend) other).friendName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Friend;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // TODO: Add TimeTable to Storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private List\u003cXmlAdaptedFriend\u003e friendList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                            List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendList \u003d source.getFriends().stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                .map(XmlAdaptedFriend::new)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        final List\u003cFriend\u003e friendSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        for (XmlAdaptedFriend friend : friendList) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            friendSet.add(friend.toModelType());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        final Set\u003cFriend\u003e friendList \u003d new HashSet\u003c\u003e(friendSet);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        TimeTable timeTable \u003d new TimeTable();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, timeTable, friendList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u0026\u0026 friendList.equals(otherPerson.friendList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 20,
      "nianfei97": 1,
      "-": 134,
      "bennchong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FriendListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Displays the friends in the first panel of the app"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class FriendListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private static final String FXML \u003d \"FriendListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private ListView\u003cPerson\u003e friendListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public FriendListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        setConnections(personList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private void setConnections(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendListView.setItems(personList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendListView.setCellFactory(listView -\u003e new FriendListPanel.FriendListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            friendListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            friendListView.getSelectionModel().select(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    class FriendListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LoginWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.SuccessfulLoginEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.UnsuccessfulLoginEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.ShowRegisterEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.Security;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/***"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Controller for the login"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class LoginWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static final String FXML \u003d \"LoginWindow.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Security user;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private TextField usernameTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private TextField passwordTextField;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Creates a new LoginWindow."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public LoginWindow(Stage root) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        root.setTitle(\"Login\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        root.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        root.setMinWidth(250);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Creates a new LoginWindow."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public LoginWindow(Security user) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //Links with eventsCenter I believe"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Shows the LoginWindow."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Hides the Login Window"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Runs whenever the login button is clicked"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleLoginClick() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        user.login(usernameTextField.getText(), passwordTextField.getText());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Runs whenever the login button is clicked"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleRegisterClick() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //Raise Event to create new window"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        raise(new ShowRegisterEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleSuccessfulLoginEvent(SuccessfulLoginEvent loginSuccess) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleUnsuccessfulLoginEvent(UnsuccessfulLoginEvent loginFailure) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        label.setText(\"Incorrect Username/Password\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.LogoutEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.SuccessfulLoginEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.ExitRegisterEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.ShowLoginEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.ShowRegisterEvent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.SuccessfulRegisterEvent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.Security;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Security security;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private TimeTablePanel timetablePanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private MePanel mePanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private FriendListPanel friendListPanel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private LoginWindow loginWindow;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private RegistrationWindow registrationWindow;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private Text meText;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private Text friendText;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private Text personText;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private StackPane timetablePlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private StackPane mePanelPlaceholder;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private StackPane friendListPanelPlaceholder;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic, Security security) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.security \u003d security;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        loginWindow \u003d new LoginWindow(security);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        registrationWindow \u003d new RegistrationWindow(security);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Enables Security CLI"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void fillSecurityCommandBox() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        SecurityBox commandBox \u003d new SecurityBox(security);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        commandBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        SecurityResultDisplay securityResultDisplay \u003d new SecurityResultDisplay();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        resultDisplayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(securityResultDisplay.getRoot());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Clear displays when user is logging out"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void removeInnerParts() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        commandBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        resultDisplayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        mePanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        timetablePlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        personListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        friendListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        statusbarPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        friendText.setText(\"\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        personText.setText(\"\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        meText.setText(\"\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void fillInnerParts() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        meText.setText(\"Me\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        meText.setFill(Color.LIGHTGOLDENRODYELLOW);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        meText.setStyle(\"-fx-font-size: 20px;\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendText.setText(\"Friends\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendText.setFill(Color.LIGHTGOLDENRODYELLOW);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendText.setStyle(\"-fx-font-size: 20px;\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        personText.setText(\"Others\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        personText.setFill(Color.LIGHTGOLDENRODYELLOW);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        personText.setStyle(\"-fx-font-size: 20px;\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        timetablePanel \u003d new TimeTablePanel();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        timetablePlaceholder.getChildren().add(timetablePanel.getRoot());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        mePanel \u003d new MePanel(FXCollections.observableArrayList(security.getUser()));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        mePanelPlaceholder.getChildren().add(mePanel.getRoot());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        // friendListPanel \u003d new FriendListPanel(logic.getFriendList(security.getUser()));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendListPanel \u003d new FriendListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendListPanelPlaceholder.getChildren().add(friendListPanel.getRoot());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        // personListPanel \u003d new PersonListPanel(logic.getOtherList(security.getUser()));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        resultDisplayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        commandBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Opens the Login Window."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleLogin() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (!loginWindow.isShowing()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            loginWindow.show();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            loginWindow.focus();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Opens the Registration Window."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleRegister() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        loginWindow.hide();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        registrationWindow.show();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Handles successful registration"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleSuccessRegister() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        registrationWindow.hide();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        raise(new SuccessfulLoginEvent()); //Calls method fill in data"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Logs out of the application"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleLogout() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        security.logout();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        removeInnerParts();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        fillSecurityCommandBox();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //timetablePanel.freeResources(); TODO: do the equivalent of releasing resources of browserPanel webview?"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void handleShowRegisterEvent(ShowRegisterEvent event) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        handleRegister();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void handleExitRegisterEvent(ExitRegisterEvent event) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        handleLogin();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void handleShowLoginEvent(ShowLoginEvent event) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        handleLogin();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void handleSuccessfulRegisterEvent(SuccessfulRegisterEvent event) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        handleSuccessRegister();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleLogoutEvent(LogoutEvent logout) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        security.logout();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        removeInnerParts();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        fillSecurityCommandBox();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 36,
      "alexiscatnip": 5,
      "-": 201,
      "bennchong": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MePanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Panel containing just the current User"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class MePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private static final String FXML \u003d \"MePanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MePanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private ListView\u003cPerson\u003e meView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public MePanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        setConnections(personList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private void setConnections(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        meView.setItems(personList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        meView.setCellFactory(listView -\u003e new MePanel.MeViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        meView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    class MeViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RegistrationWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.ExitRegisterEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.SuccessfulRegisterEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.Security;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/***"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Controller for the login"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class RegistrationWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static final String FXML \u003d \"RegistrationWindow.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Security user;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private TextField usernameTextField;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private TextField passwordTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private TextField phoneTextField;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private TextField emailTextField;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private TextField addressTextField;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Creates a new Registration Window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param root Stage to use as the root of the Registration Window."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public RegistrationWindow(Stage root) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        root.setTitle(\"Register\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        root.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        root.setMinWidth(250);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Creates a new Registration Window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public RegistrationWindow(Security user) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //Links with eventsCenter I believe"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Shows the LoginWindow."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Hides the Login Window"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Runs whenever the register button is clicked"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleRegister() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        switch(user.register(usernameTextField.getText(), passwordTextField.getText(), emailTextField.getText(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bennchong"
        },
        "content": "             phoneTextField.getText(), addressTextField.getText())) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case SUCCESS:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            raise(new SuccessfulRegisterEvent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Closes the register window and open the login window"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        raise(new ExitRegisterEvent());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SecurityBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.ShowLoginEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.SuccessfulRegisterEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.Security;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class SecurityBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static final String FXML \u003d \"SecurityBox.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SecurityBox.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final Security security;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public SecurityBox(Security security) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.security \u003d security;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        String[] command \u003d commandTextField.getText().trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (command[0].equals(\"login\") \u0026\u0026 command.length \u003e 2) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            security.login(command[1], command[2]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } else if (command[0].equals(\"register\") \u0026\u0026 command.length \u003d\u003d 6) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            switch(security.register(command[1], command[2], command[3], command[4], command[5])) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            case SUCCESS:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                System.out.println(\"Success\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                raise(new SuccessfulRegisterEvent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            case USER_ALREADY_EXISTS:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                raise(new NewResultAvailableEvent(\"Username already used\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                System.out.println(\"Failure: Username already used\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            case INCOMPLETE_FIELD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                raise(new NewResultAvailableEvent(\"Incomplete fields\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                System.out.println(\"Failure: Incomplete fields\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } else if (command[0].equals(\"ui\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            raise(new ShowLoginEvent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } else if (command[0].equals(\"exit\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            raise (new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SecurityResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class SecurityResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SecurityResultDisplay.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static final String FXML \u003d \"SecurityResultDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private TextArea securityResultDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public SecurityResultDisplay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityResultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimeTablePanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.commons.events.model.TimeTableChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * TODO ALEXIS: currently morphing this from BrowserPanel into a TimeTablePanel."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * This is TimeTablePanel, it is a panel where the TimeTable elements reside in:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Contains these Classes: (where * represents any number of)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * TimeTablePanel"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *  |-PanelTop (just a divider in javafx )"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " *  |   |-TimeTablePanelTimeMarkerGrid (invisible grid to hold the timing objects)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *  |       |-*TimeTablePanelTimingMarker (visually the timing markers at the top of the grid; eg: 0900 or 1500)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *  |"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *  |-PanelBottom (just a divider in javafx )"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *  |   |-TimeTablePanelMainGrid (visually the gridlines in the timetable)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *  |       |---*TimeTablePanelTimeSlot"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *  |       |       (represents a timeSlot; visually a square inside the timetable, just like in NUSMODS)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *  |       |---*TimeTablePanelDaySlot"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *  |               (represents a daySlot on the leftmost column of timetable; visually a square)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *  |"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *  |-UI logic:  (handles logic such as: SCALING of grid, ADDING/REMOVAL of timeslots, HANDLING TIMESLOT INDEXES, etc)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *____________________"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class TimeTablePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final int DEFAULT_START_HOUR \u003d 10;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final int DEFAULT_END_HOUR \u003d 19;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final String FXML \u003d \"TimeTablePanel.fxml\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private TimeTable timeTableLastLoaded;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // TODO: remove hardcoding here"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private LocalTime currStartHour \u003d LocalTime.parse(\"10:00\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private LocalTime currEndHour \u003d LocalTime.parse(\"19:00\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private int currNumRow \u003d 5;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private int currNumCol \u003d 9;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private double currRowDimensions;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private double currColDimensions;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private TimeTablePanelTimeMarkerGrid timeTablePanelTimeMarkerGrid;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private TimeTablePanelDayMarkerGrid timeTablePanelDayMarkerGrid;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private TimeTablePanelMainGrid timeTablePanelMainGrid;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private GridPane timeTablePanelTimeMarkerGridPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private GridPane timeTablePanelDayMarkerGridPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private GridPane timeTablePanelMainGridPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public TimeTablePanel() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableLastLoaded \u003d new TimeTable();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        updateDimensions();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTablePanelMainGrid.getRoot().widthProperty().addListener(new ChangeListener\u003cNumber\u003e() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            public void changed(ObservableValue\u003c? extends Number\u003e observable, Number oldValue, Number newValue) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                reloadTimeTable();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Fills up all the placeholders of this TimeTablePanel."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private void fillInnerParts() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTablePanelTimeMarkerGrid \u003d new TimeTablePanelTimeMarkerGrid();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTablePanelTimeMarkerGridPlaceholder.getChildren().add(timeTablePanelTimeMarkerGrid.getRoot());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTablePanelDayMarkerGrid \u003d new TimeTablePanelDayMarkerGrid();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTablePanelDayMarkerGridPlaceholder.getChildren().add(timeTablePanelDayMarkerGrid.getRoot());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        timeTablePanelMainGrid \u003d new TimeTablePanelMainGrid();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        timeTablePanelMainGridPlaceholder.getChildren().add(timeTablePanelMainGrid.getRoot());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private void updateDimensions() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        currRowDimensions \u003d timeTablePanelMainGrid.getRoot().getHeight() / currNumRow;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        currColDimensions \u003d timeTablePanelMainGrid.getRoot().getWidth() / currNumCol;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Reloads the last loaded timetable. Used for when the window is resized"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private void reloadTimeTable() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTablePanelMainGrid.clearGrid();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        updateDimensions();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (TimeSlot timeSlot : timeTableLastLoaded.getTimeSlots()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            timeTablePanelMainGrid.addTimeSlot("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                    timeSlot, currRowDimensions, currColDimensions, currStartHour, currEndHour);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Loads a TimeTable from the TimeTable object it is given."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private void loadTimeTable(TimeTable timeTable) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableLastLoaded \u003d timeTable;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTablePanelMainGrid.clearGrid();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        updateDimensions();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (TimeSlot timeSlot : timeTable.getTimeSlots()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            timeTablePanelMainGrid.addTimeSlot("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                    timeSlot, currRowDimensions, currColDimensions, currStartHour, currEndHour);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public double getCurrRowDimensions() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return currRowDimensions;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public double getCurrColDimensions() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return currColDimensions;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private void handleTimeTableChangedEvent(TimeTableChangedEvent event) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        loadTimeTable(event.getNewTimeTable());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 78,
      "alexiscatnip": 41,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimeTablePanelDayMarkerGrid.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.geometry.HPos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * A invisible grid for the TimingMarkers to live in. It contains multiple TimeTablePanelTimingMarker(s)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Refer to TimeTablePanel to better understand the relationships"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Note: we will scale the grid and add/remove columns in order to align with the TimeTablePanelMainGrid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * for now just a default size"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeTablePanelDayMarkerGrid extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String FXML \u003d \"TimeTablePanelDayMarkerGrid.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private GridPane dayMarkerGrid;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeTablePanelDayMarkerGrid() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // To prevent triggering events for typing inside the TimeTablePanelTimeMarkerGrid"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        //TODO ALEXIS: resizer, add, init functions."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        populateDays();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Populates the timings on the top row from 1000 to 1800"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private void populateDays() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DayOfWeek[] days \u003d DayOfWeek.values();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            Label label \u003d new Label((days[i].getDisplayName(TextStyle.SHORT, Locale.ENGLISH)).toUpperCase());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            dayMarkerGrid.add(label, 0, i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            GridPane.setHalignment(label, HPos.CENTER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nianfei97": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimeTablePanelMainGrid.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * This is a visible grid for the timetable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * It will contain children: TimeTablePanelTimeSlot(s)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Refer to TimeTablePanel class to better understand the relationships"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class TimeTablePanelMainGrid extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final String FXML \u003d \"TimeTablePanelMainGrid.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private GridPane mainGrid;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public TimeTablePanelMainGrid() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // To prevent triggering events for typing inside the timeTablePanelMainGrid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void clearGrid() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        mainGrid.getChildren().retainAll(mainGrid.getChildren().get(0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Adds a timetable to the current timetable displayed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param input TimeSlot to add"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param currRowDim Dimensions of the rows in the current grid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param currColDim Dimensions of the columns in the current grid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param currStart Start hour in the grid"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param currEnd End hour in the grid"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void addTimeSlot("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            TimeSlot input, double currRowDim, double currColDim, LocalTime currStart, LocalTime currEnd) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assert(currStart.getMinute() \u003d\u003d 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assert(currEnd.getMinute() \u003d\u003d 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot trimmedTimeSlot \u003d input;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // Check for whether the timeslot can be displayed on the current timetable"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (input.getDayOfWeek() \u003d\u003d DayOfWeek.SATURDAY"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                || input.getDayOfWeek() \u003d\u003d DayOfWeek.SUNDAY"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                || input.getEndTime().isBefore(currStart) || input.getEndTime().equals(currStart)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                || input.getStartTime().isAfter(currEnd) || input.getStartTime().equals(currEnd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (input.getStartTime().isBefore(currStart)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            trimmedTimeSlot \u003d new TimeSlot(input.getDayOfWeek(), currStart, input.getEndTime(), input.getColor());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (input.getEndTime().isAfter(currEnd)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            trimmedTimeSlot \u003d new TimeSlot(input.getDayOfWeek(), input.getStartTime(), currEnd, input.getColor());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTablePanelTimeSlot panelTimeSlot \u003d new TimeTablePanelTimeSlot("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                trimmedTimeSlot, currRowDim, currColDim);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        mainGrid.add(panelTimeSlot.getBox(), getColIndex(trimmedTimeSlot, currStart), getRowIndex(trimmedTimeSlot));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private int getColIndex(TimeSlot timeSlot, LocalTime currStartHour) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return timeSlot.getStartTime().getHour() - currStartHour.getHour();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private int getRowIndex(TimeSlot timeSlot) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return timeSlot.getDayOfWeek().getValue() - 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 52,
      "alexiscatnip": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimeTablePanelTimeMarkerGrid.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.geometry.HPos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.geometry.VPos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * TODO ALEXIS: working on this"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * A invisible grid for the TimingMarkers to live in. It contains multiple TimeTablePanelTimingMarker(s)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Refer to TimeTablePanel to better understand the relationships"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Note: we will scale the grid and add/remove columns in order to align with the TimeTablePanelMainGrid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * for now just a default size"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeTablePanelTimeMarkerGrid extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String FXML \u003d \"TimeTablePanelTimeMarkerGrid.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private GridPane timingGrid;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeTablePanelTimeMarkerGrid(int startHour, int endHour) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // To prevent triggering events for typing inside the TimeTablePanelTimeMarkerGrid"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //TODO ALEXIS: resizer, add, init functions."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        populateTimings(startHour, endHour);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeTablePanelTimeMarkerGrid() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this(TimeTablePanel.DEFAULT_START_HOUR, TimeTablePanel.DEFAULT_END_HOUR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Populates the timings on the top row from 1000 to 1800"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private void populateTimings(int startHour, int endHour) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (int currHour \u003d startHour, col \u003d 0; currHour \u003c endHour; currHour++, col +\u003d 2) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            Label hourLabel \u003d new Label(Integer.toString(currHour));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            GridPane.setHalignment(hourLabel, HPos.RIGHT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            GridPane.setValignment(hourLabel, VPos.BOTTOM);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            timingGrid.add(hourLabel, col, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            Label minuteLabel \u003d new Label(\"00\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            GridPane.setHalignment(minuteLabel, HPos.LEFT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            GridPane.setValignment(minuteLabel, VPos.BOTTOM);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            timingGrid.add(minuteLabel, col + 1, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 21,
      "alexiscatnip": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimeTablePanelTimeSlot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * An UI component that displays information of a {@code TimeSlot}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Lives in the TimeTablePanelMainGrid."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Will be used to implement normal TimeSlots, and free-TimeSlots."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeTablePanelTimeSlot {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public final TimeSlot timeSlot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private Rectangle box;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeTablePanelTimeSlot(TimeSlot timeSlot, double currRowDimensions, double currColDimensions) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        box \u003d new Rectangle(currColDimensions * timeSlot.getDuration().toHours(), currRowDimensions);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        box.setFill(timeSlot.getColor());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        box.setOpacity(0.5);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        box.setArcHeight(10);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        box.setArcWidth(10);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (!(other instanceof TimeTablePanelTimeSlot)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        TimeTablePanelTimeSlot card \u003d (TimeTablePanelTimeSlot) other;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return timeSlot.equals(card.timeSlot);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public Rectangle getBox() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return box;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 18,
      "alexiscatnip": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.SuccessfulLoginEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.Security;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/FreeTime_32.png\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Security security;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs, Security security) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.security \u003d security;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        //Set the application icon"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic, security);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            //Gets rid of the login window when testing, can remove this once released"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            if (security.getAuthentication()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                //CLI for Authentication"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                mainWindow.fillSecurityCommandBox();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleSuccessfulLoginEvent(SuccessfulLoginEvent loginSuccess) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 2,
      "-": 114,
      "bennchong": 20
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".timetable-pane {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "bennchong"
        },
        "content": "#securityResultDisplay .content {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 4,
      "-": 349,
      "bennchong": 7
    }
  },
  {
    "path": "src/main/resources/view/FriendListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    \u003cListView fx:id\u003d\"friendListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 9
    }
  },
  {
    "path": "src/main/resources/view/LoginWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003cImage url\u003d\"@/images/login.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cGridPane hgap\u003d\"8.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"200.0\" prefWidth\u003d\"300.0\" vgap\u003d\"10.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cLabel layoutX\u003d\"20.0\" layoutY\u003d\"72.0\" text\u003d\"Password:\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cTextField id\u003d\"username\" promptText\u003d\"Username\" GridPane.columnIndex\u003d\"1\" fx:id\u003d\"usernameTextField\" \u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cTextField id\u003d\"password\" promptText\u003d\"Password\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" fx:id\u003d\"passwordTextField\" onAction\u003d\"#handleLoginClick\" \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cLabel text\u003d\"Username:\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cButton mnemonicParsing\u003d\"false\" text\u003d\"Register\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"RIGHT\" GridPane.rowIndex\u003d\"2\" onAction\u003d\"#handleRegisterClick\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cButton mnemonicParsing\u003d\"false\" text\u003d\"Log In\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\" onAction\u003d\"#handleLoginClick\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cLabel fx:id\u003d\"label\" textFill\u003d\"RED\" text\u003d\"\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bennchong": 58
    }
  },
  {
    "path": "src/main/resources/view/LoginWindowSB.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003cGridPane hgap\u003d\"8.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"200.0\" prefWidth\u003d\"300.0\" vgap\u003d\"10.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cLabel layoutX\u003d\"20.0\" layoutY\u003d\"72.0\" text\u003d\"Password:\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cTextField id\u003d\"username\" promptText\u003d\"Username\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/TextField\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cTextField id\u003d\"password\" promptText\u003d\"Password\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/TextField\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cLabel text\u003d\"Username:\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cLabel text\u003d\"Label\" textFill\u003d\"RED\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cButton mnemonicParsing\u003d\"false\" text\u003d\"Register\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"RIGHT\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cButton contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" text\u003d\"Log In\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "bennchong": 44
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "         minWidth\u003d\"800\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    \u003cImage url\u003d\"@/images/FreeTime_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Logout\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "              \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleLogout\" text\u003d\"Logout\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "              \u003cText id\u003d\"meText\" fx:id\u003d\"meText\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                  \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "              \u003cStackPane fx:id\u003d\"mePanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "              \u003cSplitPane id\u003d\"splitteringPane\" fx:id\u003d\"splitteringPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                  \u003cVBox fx:id\u003d\"FriendsList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                    \u003cText id\u003d\"friendText\" fx:id\u003d\"friendText\"/\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            \u003cStackPane fx:id\u003d\"friendListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "              \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            \u003cSplitPane id\u003d\"splitterPane\" fx:id\u003d\"splitterPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "              \u003cVBox fx:id\u003d\"nonFriendsList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u003cText id\u003d\"personText\" fx:id\u003d\"personText\"/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                  \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "          \u003cStackPane fx:id\u003d\"timetablePlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 25,
      "alexiscatnip": 2,
      "-": 61,
      "bennchong": 9
    }
  },
  {
    "path": "src/main/resources/view/MainWindowSB.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.MenuButton?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003cMenuBar id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003citems\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cMenuItem id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "               \u003cgraphic\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                  \u003cMenuButton mnemonicParsing\u003d\"false\" text\u003d\"MenuButton\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                      \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Action 1\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                      \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Action 2\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                  \u003c/MenuButton\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "               \u003c/graphic\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003c/MenuItem\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/items\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cMenu mnemonicParsing\u003d\"false\" onAction\u003d\"#handleLogout\" text\u003d\"Logout\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "          \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Action 1\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003cStackPane id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003cStackPane id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cInsets bottom\u003d\"5\" left\u003d\"5\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003cSplitPane id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cVBox id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cStackPane id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cStackPane id\u003d\"timetablePlaceholder\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003cStackPane id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bennchong": 66
    }
  },
  {
    "path": "src/main/resources/view/MePanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    \u003cListView fx:id\u003d\"meView\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 8
    }
  },
  {
    "path": "src/main/resources/view/RegistrationWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003cImage url\u003d\"@/images/login.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cGridPane hgap\u003d\"8.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"276.0\" prefWidth\u003d\"386.0\" vgap\u003d\"10.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"281.59998474121096\" minWidth\u003d\"10.0\" prefWidth\u003d\"120.39998779296874\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"300.5999755859375\" minWidth\u003d\"10.0\" prefWidth\u003d\"238.00001220703123\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cLabel text\u003d\"Username\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cLabel layoutX\u003d\"20.0\" layoutY\u003d\"72.0\" text\u003d\"Password\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cLabel text\u003d\"Email\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cLabel text\u003d\"Phone\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cLabel text\u003d\"Address\" GridPane.rowIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cTextField id\u003d\"username\" promptText\u003d\"Username\" GridPane.columnIndex\u003d\"1\" fx:id\u003d\"usernameTextField\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cTextField id\u003d\"password\" promptText\u003d\"Password\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" fx:id\u003d\"passwordTextField\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cButton mnemonicParsing\u003d\"false\" text\u003d\"Register\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"5\" onAction\u003d\"#handleRegister\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cTextField id\u003d\"email\" promptText\u003d\"abs@nus.edu.sg\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\" fx:id\u003d\"emailTextField\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cTextField id\u003d\"phone\" promptText\u003d\"8888 8888\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\" fx:id\u003d\"phoneTextField\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cTextField id\u003d\"address\" promptText\u003d\"38 Oxley Road\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"4\" fx:id\u003d\"addressTextField\" onAction\u003d\"#handleRegister\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cLabel text\u003d\"Label\" textFill\u003d\"RED\" GridPane.rowIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bennchong": 77
    }
  },
  {
    "path": "src/main/resources/view/RegistrationWindowSB.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003cGridPane hgap\u003d\"8.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"276.0\" prefWidth\u003d\"386.0\" vgap\u003d\"10.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"281.59998474121096\" minWidth\u003d\"10.0\" prefWidth\u003d\"120.39998779296874\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"300.5999755859375\" minWidth\u003d\"10.0\" prefWidth\u003d\"238.00001220703123\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cLabel text\u003d\"Username\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cLabel layoutX\u003d\"20.0\" layoutY\u003d\"72.0\" text\u003d\"Password\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cLabel text\u003d\"Email\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cLabel text\u003d\"Phone\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cLabel text\u003d\"Address\" GridPane.rowIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cTextField id\u003d\"username\" promptText\u003d\"Username\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/TextField\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cTextField id\u003d\"password\" promptText\u003d\"Password\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/TextField\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cButton mnemonicParsing\u003d\"false\" text\u003d\"Register\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cTextField id\u003d\"email\" promptText\u003d\"abs@nus.edu.sg\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/TextField\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cTextField id\u003d\"phone\" promptText\u003d\"8888 8888\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/TextField\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cTextField id\u003d\"address\" promptText\u003d\"38 Oxley Road\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/TextField\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cLabel text\u003d\"Label\" textFill\u003d\"RED\" GridPane.rowIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "bennchong": 64
    }
  },
  {
    "path": "src/main/resources/view/SecurityBox.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bennchong": 9
    }
  },
  {
    "path": "src/main/resources/view/SecurityResultDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003cHBox fx:id\u003d\"placeHolder\"  xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003cVBox HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cLabel prefWidth\u003d\"300.0\" text\u003d\"Security Commands\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cLabel text\u003d\"1. Login\" textFill\u003d\"WHITE\" underline\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Command:\u0026#10;  login \u0026lt;Username\u0026gt; \u0026lt;Password\u0026gt;\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/Text\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cLabel text\u003d\"2. Register\" textFill\u003d\"WHITE\" underline\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Command:\u0026#10;  register \u0026lt;Username\u0026gt; \u0026lt;Password\u0026gt; \u0026lt;Email\u0026gt; \u0026lt;HandPhone\u0026gt; \u0026lt;Address\u0026gt; \"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/Text\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cLabel text\u003d\"3. UI\" textFill\u003d\"WHITE\" underline\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"command:  \u0026#10;  ui\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/Text\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"*Note*\u0026#10;The fields between \u0026lt;\u0026gt; are compulsory\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cInsets top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/Text\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003cTextArea fx:id\u003d\"securityResultDisplay\" styleClass\u003d\"result-display\" editable\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bennchong": 58
    }
  },
  {
    "path": "src/main/resources/view/TimeTablePanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003cBorderPane minHeight\u003d\"600\" minWidth\u003d\"800\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "  \u003cleft\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003cGridPane fx:id\u003d\"timeTablePanelDayMarkerGridPlaceholder\" maxWidth\u003d\"60.0\" minWidth\u003d\"60.0\" prefWidth\u003d\"60.0\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "  \u003c/left\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "  \u003ctop\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003cGridPane fx:id\u003d\"timeTablePanelTimeMarkerGridPlaceholder\" maxWidth\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "  \u003c/top\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "  \u003ccenter\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003cGridPane fx:id\u003d\"timeTablePanelMainGridPlaceholder\" maxWidth\u003d\"Infinity\" minWidth\u003d\"0\" prefWidth\u003d\"900\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "  \u003c/center\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 20,
      "alexiscatnip": 4
    }
  },
  {
    "path": "src/main/resources/view/TimeTablePanelDayMarkerGrid.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003cGridPane fx:id\u003d\"dayMarkerGrid\" gridLinesVisible\u003d\"true\" maxWidth\u003d\"60.0\" minWidth\u003d\"60.0\" prefHeight\u003d\"400.0\" prefWidth\u003d\"60.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "          \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "          \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "          \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "          \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "          \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 21
    }
  },
  {
    "path": "src/main/resources/view/TimeTablePanelMainGrid.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003cGridPane xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"mainGrid\" alignment\u003d\"BASELINE_LEFT\" gridLinesVisible\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"5.0\" prefWidth\u003d\"1000\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"5.0\" prefWidth\u003d\"1000\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"5.0\" prefWidth\u003d\"1000\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"5.0\" prefWidth\u003d\"1000\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"5.0\" prefWidth\u003d\"1000\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"5.0\" prefWidth\u003d\"1000\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"5.0\" prefWidth\u003d\"1000\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"5.0\" prefWidth\u003d\"1000\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"5.0\" prefWidth\u003d\"1000\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "  \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "  \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 11,
      "alexiscatnip": 15
    }
  },
  {
    "path": "src/main/resources/view/TimeTablePanelTimeMarkerGrid.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "  \u003cGridPane fx:id\u003d\"timingGrid\" alignment\u003d\"BOTTOM_LEFT\" gridLinesVisible\u003d\"false\" minHeight\u003d\"50.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"60.0\" minWidth\u003d\"60.0\" prefWidth\u003d\"60.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5.0\" prefWidth\u003d\"500\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5.0\" prefWidth\u003d\"500\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5.0\" prefWidth\u003d\"500\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5.0\" prefWidth\u003d\"500\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5.0\" prefWidth\u003d\"500\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5.0\" prefWidth\u003d\"500\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5.0\" prefWidth\u003d\"500\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5.0\" prefWidth\u003d\"500\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5.0\" prefWidth\u003d\"500\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5.0\" prefWidth\u003d\"500\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5.0\" prefWidth\u003d\"500\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5.0\" prefWidth\u003d\"500\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5.0\" prefWidth\u003d\"500\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5.0\" prefWidth\u003d\"500\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5.0\" prefWidth\u003d\"500\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5.0\" prefWidth\u003d\"500\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5.0\" prefWidth\u003d\"500\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5.0\" prefWidth\u003d\"500\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "      \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 22,
      "alexiscatnip": 13
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PersonListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    //private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 4,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.Security;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.storage.AppUsersStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.storage.JsonAppUsersStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected Security user;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        AppUsersStorage appUsersStorage \u003d new JsonAppUsersStorage(config.getAppUsersFilePath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        appUsers \u003d initUsers(appUsersStorage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, appUsersStorage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        user \u003d new SecurityManager(true, logic, appUsers);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs, user);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 119,
      "bennchong": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Timetable Deconflicter (TBC) V0.1\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/FreeTime_32.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.User;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        public TimeTable getTimeTable() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        public void updateTimeTable(TimeTable timeTable) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        public void updateFriendList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        public void updateOtherList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFriendList(Person person) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        public ObservableList\u003cPerson\u003e getOtherList(Person person) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        public void matchUserToPerson(String name) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        public User getUser() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        public void clearUser() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        public void commandLogout() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 18,
      "nianfei97": 11,
      "-": 206,
      "bennchong": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTimeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.commands.AddTimeCommand.MESSAGE_ADD_TIMESLOT_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class AddTimeCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void constructor_nullTimeSlot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        new AddTimeCommand(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void execute_timeSlotAccepted_addSuccessful() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot toAdd \u003d TypicalTimeSlots.WED_10_TO_12;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection\u003cTimeSlot\u003e expectedTimeSlots \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedTimeSlots.addAll(TypicalTimeSlots.getTypicalTimeSlots());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedTimeSlots.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable expectedTimeTable \u003d new TimeTable(expectedTimeSlots);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ADD_TIMESLOT_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person lastPerson \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTags(\"friends\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTimeTable(new TimeTable(TypicalTimeSlots.getTypicalTimeTable())).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTags(\"friends\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTimeTable(expectedTimeTable).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        AddTimeCommand command \u003d new AddTimeCommand(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.updateTimeTable(expectedTimeTable);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void execute_timeSlotOverlaps_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot toAdd \u003d TypicalTimeSlots.MON_8_TO_10;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        AddTimeCommand command \u003d new AddTimeCommand(toAdd);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expectMessage(AddTimeCommand.MESSAGE_OVERLAP_TIMESLOT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        command.execute(model, commandHistory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        AddTimeCommand addMon8To10Command \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new AddTimeCommand(TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        AddTimeCommand addTue8To10Command \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new AddTimeCommand(TypicalTimeSlots.TUE_10_TO_12);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(addMon8To10Command.equals(addMon8To10Command));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        AddTimeCommand addMon8To10CommandCopy \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new AddTimeCommand(TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(addMon8To10Command.equals(addMon8To10CommandCopy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(addMon8To10Command.equals(1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(addMon8To10Command.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // different timeslot -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(addMon8To10Command.equals(addTue8To10Command));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteTimeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.commands.DeleteTimeCommand.MESSAGE_DELETE_TIMESLOT_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class DeleteTimeCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void constructor_nullTimeSlot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        new DeleteTimeCommand(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void execute_timeSlotAccepted_deleteSuccessful() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot toDelete \u003d TypicalTimeSlots.MON_8_TO_10;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection\u003cTimeSlot\u003e expectedTimeSlots \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedTimeSlots.addAll(TypicalTimeSlots.getTypicalTimeSlots());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedTimeSlots.remove(toDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable expectedTimeTable \u003d new TimeTable(expectedTimeSlots);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELETE_TIMESLOT_SUCCESS, toDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person lastPerson \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTags(\"friends\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTimeTable(new TimeTable(TypicalTimeSlots.getTypicalTimeTable())).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTags(\"friends\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTimeTable(expectedTimeTable).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeleteTimeCommand command \u003d new DeleteTimeCommand(toDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.updateTimeTable(expectedTimeTable);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void execute_timeSlotDoesNotExist_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot toDelete \u003d TypicalTimeSlots.WED_10_TO_12;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeleteTimeCommand command \u003d new DeleteTimeCommand(toDelete);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expectMessage(DeleteTimeCommand.MESSAGE_TIMESLOT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        command.execute(model, commandHistory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeleteTimeCommand deleteMon8To10Command \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new DeleteTimeCommand(TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeleteTimeCommand deleteTue8To10Command \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new DeleteTimeCommand(TypicalTimeSlots.TUE_10_TO_12);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(deleteMon8To10Command.equals(deleteMon8To10Command));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeleteTimeCommand deleteMon8To10CommandCopy \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new DeleteTimeCommand(TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(deleteMon8To10Command.equals(deleteMon8To10CommandCopy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(deleteMon8To10Command.equals(1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(deleteMon8To10Command.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // different timeslot -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(deleteMon8To10Command.equals(deleteTue8To10Command));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 4,
      "-": 245
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FreeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class FreeCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        new FreeCommand(null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection\u003cIndex\u003e containsOne \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        containsOne.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection\u003cIndex\u003e containsOneAndTwo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        containsOneAndTwo.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        containsOneAndTwo.add(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        FreeCommand freeOne \u003d new FreeCommand(containsOne);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        FreeCommand freeOneAndTwo \u003d new FreeCommand(containsOneAndTwo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(freeOne.equals(freeOne));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        FreeCommand freeOneCopy \u003d new FreeCommand(containsOne);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(freeOne.equals(freeOneCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(freeOne.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(freeOne.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // different indices -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(freeOne.equals(freeOneAndTwo));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // TODO: Execution tests"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.updateTimeTable(TypicalTimeSlots.getTypicalTimeTable());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.updateTimeTable(TypicalTimeSlots.getTypicalTimeTable());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 3,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddTimeCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.AddTimeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class AddTimeCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private AddTimeCommandParser parser \u003d new AddTimeCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parse_validArgs_returnsAddTimeCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertParseSuccess(parser, \" monday 08:00-10:00 \","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new AddTimeCommand(TypicalTimeSlots.MON_8_TO_10));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parse_invalidTimeSlot_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertParseFailure(parser, \"monday\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTimeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseCommandAlias_add() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommandAlias(person));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseCommandAlias_clear() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseCommandAlias_delete() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                DeleteCommand.COMMAND_WORD_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseCommandAlias_edit() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD_ALIAS + \" \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseCommandAlias_exit() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD_ALIAS) instanceof ExitCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseCommandAlias_find() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                FindCommand.COMMAND_WORD_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseCommandAlias_help() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD_ALIAS) instanceof HelpCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseCommandAlias_history() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseCommandAlias_list() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseCommandAlias_select() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                SelectCommand.COMMAND_WORD_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseCommandAlias_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD_ALIAS) instanceof RedoCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseCommandAlias_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD_ALIAS) instanceof UndoCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 87,
      "-": 143,
      "bennchong": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteTimeCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.DeleteTimeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class DeleteTimeCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private DeleteTimeCommandParser parser \u003d new DeleteTimeCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertParseSuccess(parser, \" monday 08:00-10:00 \","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new DeleteTimeCommand(TypicalTimeSlots.MON_8_TO_10));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parse_invalidTimeSlot_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertParseFailure(parser, \"monday\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTimeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FreeCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.FreeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class FreeCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private FreeCommandParser parser \u003d new FreeCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection\u003cIndex\u003e containsOne \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        containsOne.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection\u003cIndex\u003e containsOneAndTwo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        containsOneAndTwo.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        containsOneAndTwo.add(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertParseSuccess(parser, \"1\", new FreeCommand(containsOne));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertParseSuccess(parser, \"1 2\", new FreeCommand(containsOneAndTwo));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FreeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String INVALID_TIMESLOT \u003d \"something\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String INVALID_DAY \u003d \"someday\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String INVALID_TIME \u003d \"24:00\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_DAY_FULL \u003d \"monday\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_DAY_SHORT \u003d \"mon\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_TIME_0800HRS_FULL \u003d \"08:00\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_TIME_0800HRS_SHORT_1 \u003d \"8:00\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_TIME_0800HRS_SHORT_2 \u003d \"0800\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_TIME_0800HRS_SHORT_3 \u003d \"800\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_TIME_0800HRS_SHORT_4 \u003d \"8\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_TIME_1000HRS_FULL \u003d \"10:00\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_TIME_1000HRS_SHORT \u003d \"10\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String DASH \u003d \"-\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ParserUtil.parseTimeSlot(null);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ParserUtil.parseTimeSlot(INVALID_TIMESLOT);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_invalidDay_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ParserUtil.parseTimeSlot(INVALID_DAY + WHITESPACE + VALID_TIME_0800HRS_FULL + DASH + VALID_TIME_1000HRS_FULL);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_invalidStartTime_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ParserUtil.parseTimeSlot(VALID_DAY_FULL + WHITESPACE + INVALID_TIME + DASH + VALID_TIME_1000HRS_FULL);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_invalidEndTime_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ParserUtil.parseTimeSlot(VALID_DAY_FULL + WHITESPACE + VALID_TIME_0800HRS_FULL + DASH + INVALID_TIME);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_invalidRange_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_1000HRS_FULL + DASH + VALID_TIME_0800HRS_FULL);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_invalidRangeSameTime_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_1000HRS_FULL + DASH + VALID_TIME_1000HRS_FULL);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_validValues_returnsTimeSlot() throws Exception {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot expected \u003d TypicalTimeSlots.MON_8_TO_10;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual \u003d ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0800HRS_FULL + DASH + VALID_TIME_1000HRS_FULL);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_validValuesShortDay_returnsTimeSlot() throws Exception {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot expected \u003d TypicalTimeSlots.MON_8_TO_10;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual \u003d ParserUtil.parseTimeSlot(VALID_DAY_SHORT"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0800HRS_FULL + DASH + VALID_TIME_1000HRS_FULL);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_validValuesShortTime_returnsTimeSlot() throws Exception {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot expected \u003d TypicalTimeSlots.MON_8_TO_10;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual1 \u003d ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0800HRS_SHORT_1 + DASH + VALID_TIME_1000HRS_FULL);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual1);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual2 \u003d ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0800HRS_SHORT_2 + DASH + VALID_TIME_1000HRS_FULL);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual2);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual3 \u003d ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0800HRS_SHORT_3 + DASH + VALID_TIME_1000HRS_FULL);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual3);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual4 \u003d ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0800HRS_SHORT_4 + DASH + VALID_TIME_1000HRS_FULL);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual4);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual5 \u003d ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0800HRS_FULL + DASH + VALID_TIME_1000HRS_SHORT);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual5);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_validValuesWithWhitespace_returnsTimeSlot() throws Exception {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot expected \u003d TypicalTimeSlots.MON_8_TO_10;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual \u003d ParserUtil.parseTimeSlot(WHITESPACE + VALID_DAY_FULL"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0800HRS_FULL + WHITESPACE + DASH"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_1000HRS_FULL + WHITESPACE);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 109,
      "-": 208
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/DeconflictTimeTableTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class DeconflictTimeTableTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public final DeconflictTimeTable timeTableTypical \u003d new DeconflictTimeTable(TypicalTimeSlots.getTypicalTimeTable());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection\u003cTimeSlot\u003e expected \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expected.add(TypicalTimeSlots.MON_8_TO_12);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expected.add(TypicalTimeSlots.TUE_10_TO_12);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableTypical.getTimeSlots(), expected);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeconflictTimeTable toTest \u003d new DeconflictTimeTable();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toTest.addTimeSlot(TypicalTimeSlots.MON_8_TO_12);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toTest.addTimeSlot(TypicalTimeSlots.TUE_10_TO_12);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableTypical, toTest);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void findOverlapTimeSlots_hasOverlap_returnsOverlapTimeSlots() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection\u003cTimeSlot\u003e expected \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expected.add(TypicalTimeSlots.MON_8_TO_12);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableTypical.findOverlapOrAdjacent(TypicalTimeSlots.MON_9_TO_11), expected);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void findOverlapTimeSlots_noOverlap_returnsEmpty() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableTypical.findOverlapOrAdjacent(TypicalTimeSlots.WED_10_TO_12), Collections.emptySet());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void addTimeSlot() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeconflictTimeTable expected \u003d new DeconflictTimeTable();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expected.addTimeSlot(TypicalTimeSlots.MON_8_TO_12);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expected.addTimeSlot(TypicalTimeSlots.TUE_10_TO_12);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableTypical.addTimeSlot(TypicalTimeSlots.MON_9_TO_11);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, timeTableTypical);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void addTimeTable() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeconflictTimeTable toAdd \u003d new DeconflictTimeTable();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toAdd.addTimeSlot(TypicalTimeSlots.WED_10_TO_12);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toAdd.addTimeSlot(TypicalTimeSlots.TUE_12_TO_14);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toAdd.addTimeSlot(TypicalTimeSlots.MON_9_TO_11);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeconflictTimeTable expected \u003d new DeconflictTimeTable(TypicalTimeSlots.getTypicalTimeTable());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expected.addTimeSlot(TypicalTimeSlots.TUE_12_TO_14);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expected.addTimeSlot(TypicalTimeSlots.WED_10_TO_12);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableTypical.addTimeTable(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableTypical, expected);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/TimeSlotTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotNotOverlapException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeSlotTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            -\u003e new TimeSlot(null, LocalTime.MIDNIGHT, LocalTime.NOON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            -\u003e new TimeSlot(DayOfWeek.MONDAY, null, LocalTime.NOON));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            -\u003e new TimeSlot(DayOfWeek.MONDAY, LocalTime.MIDNIGHT, null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void constructor_invalidTimeSlot_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            -\u003e new TimeSlot(DayOfWeek.MONDAY, LocalTime.NOON, LocalTime.NOON));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot toTest \u003d new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"08:00\"), LocalTime.parse(\"10:00\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(toTest, TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void isValidTimeSlot() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // invalid TimeSlots"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(TimeSlot.isValidTimeSlot(LocalTime.NOON, LocalTime.NOON));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(TimeSlot.isValidTimeSlot(LocalTime.NOON, LocalTime.MIDNIGHT));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // valid TimeSlots"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(TimeSlot.isValidTimeSlot(LocalTime.MIDNIGHT, LocalTime.NOON));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(TimeSlot.isValidTimeSlot(LocalTime.MIDNIGHT, LocalTime.MAX));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void isOverlap() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot timeSlot \u003d new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"01:00\"), LocalTime.NOON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // Overlapping, subset with same start time"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(timeSlot.isOverlap(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"01:00\"), LocalTime.MAX)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // Overlapping, subset with same end time"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(timeSlot.isOverlap(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"06:00\"), LocalTime.NOON)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // Overlapping, not subset, is after"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(timeSlot.isOverlap(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"06:00\"), LocalTime.MAX)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // Overlapping, not subset, is before"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(timeSlot.isOverlap(new TimeSlot(DayOfWeek.MONDAY, LocalTime.MIDNIGHT, LocalTime.parse(\"02:00\"))));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // Not overlapping, different day"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(timeSlot.isOverlap(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.MIDNIGHT, LocalTime.MAX)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // Not overlapping, end time of first \u003d start time of second"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(timeSlot.isOverlap(new TimeSlot(DayOfWeek.MONDAY, LocalTime.NOON, LocalTime.MAX)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // Not overlapping, general case"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(timeSlot.isOverlap(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"13:00\"), LocalTime.MAX)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void merge_invalidInput_throwsException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(TimeSlotNotOverlapException.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TypicalTimeSlots.MON_8_TO_10.merge(TypicalTimeSlots.TUE_10_TO_12);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void merge_validInput_returnsMerged() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(TypicalTimeSlots.MON_8_TO_10.merge(TypicalTimeSlots.MON_10_TO_12), TypicalTimeSlots.MON_8_TO_12);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(TypicalTimeSlots.MON_8_TO_10.merge(TypicalTimeSlots.MON_9_TO_11), TypicalTimeSlots.MON_8_TO_11);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/TimeTableTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotDoesNotExistException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotOverlapException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeTableTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private final TimeTable timeTableBlank \u003d new TimeTable();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private final TimeTable timeTableFromParams \u003d new TimeTable(TypicalTimeSlots.getTypicalTimeSlots());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private final TimeTable timeTableTypical \u003d TypicalTimeSlots.getTypicalTimeTable();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(Collections.emptySet(), timeTableBlank.getTimeSlots());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void constructorWithParams() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(TypicalTimeSlots.getTypicalTimeSlots(), timeTableFromParams.getTimeSlots());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void hasOverlap_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(timeTableTypical.hasOverlap(TypicalTimeSlots.MON_9_TO_11));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void noOverlap_returnsFalse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(timeTableTypical.hasOverlap(TypicalTimeSlots.WED_10_TO_12));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(timeTableTypical.hasOverlap(TypicalTimeSlots.TUE_12_TO_14));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void addTimeSlot_timeSlotNotInTimeTable_addsTimeSlot() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection \u003cTimeSlot\u003e expected \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expected.add(TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableBlank.addTimeSlot(TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getTimeSlots(), expected);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void addTimeSlot_duplicateTimeSlot_throwsTimeSlotOverlapException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(TimeSlotOverlapException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableTypical.addTimeSlot(TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void removeTimeSlot_timeSlotInTimeTable_removesTimeSlot() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableTypical.removeTimeSlot(TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableTypical.removeTimeSlot(TypicalTimeSlots.MON_10_TO_12);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableTypical.removeTimeSlot(TypicalTimeSlots.TUE_10_TO_12);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getTimeSlots(), Collections.EMPTY_SET);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void removeTimeSlot_timeSlotNotInTimeTable_throwsTimeSlotDoesNotExistException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(TimeSlotDoesNotExistException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableBlank.removeTimeSlot(TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/security/AccountCredentialTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class AccountCredentialTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static AccountCredential accountCredentialNoParam;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static AccountCredential accountCredentialParam;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static void testFixtureSetup() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        accountCredentialNoParam \u003d new AccountCredential();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        accountCredentialParam \u003d new AccountCredential(\"test1\", \"test1\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void getUserName_correctReturnedValue() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(accountCredentialNoParam.getUserName().equals(\"test\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(accountCredentialParam.getUserName().equals(\"test1\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void getUserName_incorrectReturnedValue() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertFalse(accountCredentialNoParam.getUserName().equals(\"test1\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertFalse(accountCredentialParam.getUserName().equals(\"test\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void passwordIsValid_correctPassword_correctBooleanReturned() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(accountCredentialNoParam.passwordIsValid(\"test\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(accountCredentialParam.passwordIsValid(\"test1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void passwordIsValid_incorrectPassword_correctBooleanReturned() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertFalse(accountCredentialNoParam.passwordIsValid(\"test1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertFalse(accountCredentialParam.passwordIsValid(\"test\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/security/AppUsersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class AppUsersTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static AppUsers appUsers;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static ArrayList\u003cAccountCredential\u003e list;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static ArrayList\u003cAccountCredential\u003e fakelist;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static void testFixtureSetup() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        fakelist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        appUsers \u003d new AppUsers();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void resetFixture() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        list.clear();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        list.add(new AccountCredential(\"test\", \"test\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void getAccountCredentials_correctListUpdatedAndReturned() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        appUsers.updateAccountCredentials(list);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(appUsers.getAccountCredentials().equals(list));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void getAccountCredentials_correctListUpdatedTwiceAndReturned() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        list.add(new AccountCredential(\"test1\", \"test\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        appUsers.updateAccountCredentials(list);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(appUsers.getAccountCredentials().equals(list));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void getAccountCredentials_incorrectListReturned() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        appUsers.updateAccountCredentials(list);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertFalse(appUsers.getAccountCredentials().equals(fakelist));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/security/AppUsersTestStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Test Class to instantiate AppUsers with one account of username \"test\" and password \"test\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class AppUsersTestStub extends AppUsers {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private ArrayList\u003cAccountCredential\u003e userlist;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public AppUsersTestStub() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        userlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        userlist.add(new AccountCredential());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        updateAccountCredentials(userlist);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/security/SecurityManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.TEST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.SuccessfulLoginEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.UnsuccessfulLoginEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.User;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class SecurityManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static SecurityManager securityManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static UserPrefs userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static AppUsers appUsers;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static boolean succcessfulLoginEventCalled;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static boolean unsuccessfulLoginEventCalled;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public SecurityManagerTest() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        EventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //Set up subscribe to test whether raise events are successfully raised and subscribed"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleSuccessfulLoginEvent(SuccessfulLoginEvent loginSuccess) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.succcessfulLoginEventCalled \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleUnsuccessfulLoginEvent(UnsuccessfulLoginEvent loginFailure) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.unsuccessfulLoginEventCalled \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static void testFixtureSetup() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        succcessfulLoginEventCalled \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        unsuccessfulLoginEventCalled \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        appUsers \u003d new AppUsersTestStub();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(TEST).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        model \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager \u003d new SecurityManager(false, logic, appUsers);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void resetFixture() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        succcessfulLoginEventCalled \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        unsuccessfulLoginEventCalled \u003d false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.logout();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void login_correctCredentials_isAuthenticatedToTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.login(\"test\", \"test\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(securityManager.getAuthentication());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void login_incorrectCredentials_isAuthenticatedRemainsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.login(\"test\", \"test1\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertFalse(securityManager.getAuthentication());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void login_correctCredentials_raisedSuccessfulLoginEvent() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.login(\"test\", \"test\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(this.succcessfulLoginEventCalled);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertFalse(this.unsuccessfulLoginEventCalled);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Ignore(\"Ignore till correction exceptions can be raised\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void login_incorrectCredentials_raisedUnsuccessfulLoginEvent() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.login(\"test\", \"test1\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertFalse(this.succcessfulLoginEventCalled);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(this.unsuccessfulLoginEventCalled);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void logout_isAuthenticatedToFalse() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.login(\"test\", \"test\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.logout();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertFalse(securityManager.getAuthentication());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void register_existingUser_returnExistingUserExists() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        boolean testFlag \u003d false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (securityManager.register(\"test\", \"test\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \"test@test.com\", \"88888888\", \"Lucky Road\") \u003d\u003d RegisterFlag.USER_ALREADY_EXISTS) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            testFlag \u003d true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(testFlag);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void register_incompleteAddress_returnIncompleteField() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        boolean testFlag \u003d false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (securityManager.register(\"test1\", \"test\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \"test\", \"8888888\", \"\") \u003d\u003d RegisterFlag.INCOMPLETE_FIELD) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            testFlag \u003d true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(testFlag);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void register_validCompleteFields_returnSuccess() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        boolean testFlag \u003d false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (securityManager.register(\"test1\", \"test\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \"test@test.com\", \"88888888\", \"Testy Road\") \u003d\u003d RegisterFlag.SUCCESS) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            testFlag \u003d true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(testFlag);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void getUser_correctUserReturned() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.login(\"test\", \"test\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        User currentUser \u003d securityManager.getUser();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        String userName \u003d currentUser.getName().toString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertEquals(\"test\", userName);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void getUser_afterLoggedOut_nullReturnedInsteadOfUser() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.login(\"test\", \"test\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.logout();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        User currentUser \u003d securityManager.getUser();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertNull(currentUser);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        AppUsersStorage appUsersStorage \u003d new JsonAppUsersStorage(getTempFilePath(\"userz\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, appUsersStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Removed until timetable storage implemented"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                                             new JsonAppUsersStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 6,
      "-": 100,
      "bennchong": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private static final List\u003cXmlAdaptedFriend\u003e FRIEND_LIST \u003d BENSON.getFriends().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            .map(XmlAdaptedFriend::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Removed until timetable storage implemented"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 3,
      "nianfei97": 6,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new XmlAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"NotXmlFormatAddressBook.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Removed until timetable storage implemented"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            new XmlAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 5,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Removed until timetable storage implemented"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 6,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Friend;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private Set\u003cFriend\u003e friendList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private TimeTable timeTable;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTable \u003d new TimeTable();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendList \u003d new HashSet\u003c\u003e(personToCopy.getFriends());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTable \u003d personToCopy.getTimeTable();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Sets the {@code TimeTable} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public PersonBuilder withTimeTable(TimeTable timeTable) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.timeTable \u003d timeTable;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new Person(name, phone, email, address, tags, timeTable, friendList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 5,
      "nianfei97": 11,
      "-": 92,
      "bennchong": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Returns an add command alias string for adding the {@code person}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static String getAddCommandAlias(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return AddCommand.COMMAND_WORD_ALIAS + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 7,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).withTags(\"friends\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final Person TEST \u003d new PersonBuilder().withName(\"test\").withPhone(\"88888888\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            .withEmail(\"test@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // Without timetables, for add and find command system test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final Person ALICE_NOTT \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final Person BENSON_NOTT \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final Person CARL_NOTT \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final Person DANIEL_NOTT \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final Person HOON_NOTT \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final Person IDA_NOTT \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 38,
      "-": 67,
      "bennchong": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTimeSlots.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * A utility class containing a list of {@code TimeSlot} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TypicalTimeSlots {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // In typical timetable"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final TimeSlot MON_8_TO_10 \u003d new TimeSlot(DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"08:00\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"10:00\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final TimeSlot MON_10_TO_12 \u003d new TimeSlot(DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"10:00\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"12:00\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final TimeSlot TUE_10_TO_12 \u003d new TimeSlot(DayOfWeek.TUESDAY,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"10:00\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"12:00\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // Not in typical timetable, will overlap"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final TimeSlot MON_9_TO_11 \u003d new TimeSlot(DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"09:00\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"11:00\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // Not in typical timetable, will not overlap"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final TimeSlot TUE_12_TO_14 \u003d new TimeSlot(DayOfWeek.TUESDAY,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"12:00\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"14:00\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // Not in typical timetable, will not overlap"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final TimeSlot WED_10_TO_12 \u003d new TimeSlot(DayOfWeek.WEDNESDAY,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"10:00\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"12:00\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // Not in typical timetable, for merge testing"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final TimeSlot MON_8_TO_12 \u003d new TimeSlot(DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"08:00\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"12:00\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // Not in typical timetable, for merge testing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final TimeSlot MON_8_TO_11 \u003d new TimeSlot(DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"08:00\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"11:00\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static TimeTable getTypicalTimeTable() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable t \u003d new TimeTable();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (TimeSlot timeSlot : getTypicalTimeSlots()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            t.addTimeSlot(timeSlot);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static Collection\u003cTimeSlot\u003e getTypicalTimeSlots() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return new HashSet\u003c\u003e(Arrays.asList(MON_8_TO_10, MON_10_TO_12, TUE_10_TO_12));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "*/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(ALICE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // associated web page of a person"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 4,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.AppUsers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new Config(), new UserPrefs(), new LogicManager(new ModelManager()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    new SecurityManager(true, new LogicManager(new ModelManager()), new AppUsers()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(mainWindow.getRoot().getScene());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "bennchong": 4
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE_NOTT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL_NOTT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON_NOTT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA_NOTT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertCommandSuccess(ALICE_NOTT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertCommandSuccess(HOON_NOTT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertCommandSuccess(IDA_NOTT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertCommandSuccess(CARL_NOTT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON_NOTT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON_NOTT).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON_NOTT).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON_NOTT).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON_NOTT) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 13,
      "-": 235
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "//import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "//import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "//import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "//import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "//import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "//import seedu.address.MainApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "//import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //To login in with test account"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        getCommandBox().run(\"login test test\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 18,
      "-": 279,
      "bennchong": 3
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON_NOTT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL_NOTT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL_NOTT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON_NOTT, DANIEL_NOTT); // Benson\u0026Daniel\u0027s first names are \"Meier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL_NOTT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON_NOTT, DANIEL_NOTT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON_NOTT));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL_NOTT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL_NOTT.getPhone().value;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL_NOTT.getAddress().value;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL_NOTT.getEmail().value;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL_NOTT.getTags());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL_NOTT.getName().fullName));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL_NOTT);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL_NOTT);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 15,
      "-": 180
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "//import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        /*getBrowserPanel().click();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        //assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 6,
      "-": 104
    }
  }
]
