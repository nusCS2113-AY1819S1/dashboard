[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d FreeTime"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "image:https://travis-ci.org/CS2113-AY1819S1-W13-1/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/CS2113-AY1819S1-W13-1/main\"]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "https://ci.appveyor.com/project/nianfei97/main/branch/master[image:https://ci.appveyor.com/api/projects/status/7py8jwp3sgjoj3dj/branch/master?svg\u003dtrue[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "https://coveralls.io/github/CS2113-AY1819S1-W13-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2113-AY1819S1-W13-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "* This is a desktop time management application where you can find common slots between friends. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "* This application is also secured with an authentication system. More information would be found in the user guide."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5], https://github.com/mangstadt/biweekly[biweekly]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* This project is based off the AddressBook-Level4 project created by http://github.com/se-edu/[SE-EDU initiative]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nianfei97": 4,
      "alexiscatnip": 1,
      "-": 26,
      "bennchong": 3
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    compile \u0027net.sf.biweekly:biweekly:0.6.2\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    implementation group: \u0027net.sf.biweekly\u0027, name: \u0027biweekly\u0027, version: \u00270.6.2\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    archiveName \u003d \u0027FreeTime.jar\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                \u0027headless.geometry\u0027: \"1280x720-32\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        \u0027site-name\u0027: \u0027FreeTime\u0027,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2113-AY1819S1-W13-1/main\u0027,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 3,
      "alexiscatnip": 3,
      "-": 244
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "FreeTime was developed by the following team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "This project is a deliverable for the module \"Software Engineering \u0026 Object-Oriented Programming\" (Module code: CS2113T)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Teh Nian Fei"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "image::nianfei97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "{empty}[https://github.com/nianfei97[github]][\u003c\u003cnianfei97#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Role: Team Lead, Code Quality +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Responsibilities: Managing Logic"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Benjamin Chong Zhi Yi"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "image::bennchong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "{empty}[http://github.com/bennchong[github]][\u003c\u003cbennchong#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Role: +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Responsibilities: Managing Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Cheng Jin Ting"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "image::cjinting-nus.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "{empty}[http://github.com/cjinting-nus[github]][\u003c\u003ccjinting-nus#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Role: Deliverables +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Responsibilities: Managing Users"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Khoo Yuan Hui"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "image::alexiscatnip.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "{empty}[http://github.com/alexiscatnip[github]][\u003c\u003calexiscatnip#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Role:  +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Responsibilities: Managing UI"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Akshay Narayan"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "image::okkhoy.png[width\u003d\"150\", align\u003d:\"left\"]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "{empty}[http://github.com/okkhoy[github]]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Role: Module Coordinator, Instructor"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 22,
      "alexiscatnip": 1,
      "-": 27,
      "bennchong": 5
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2113-AY1819S1-W13-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* *Email us* : You can also reach us at `tehnf [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d FreeTime - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-W13-1/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "By: `W13-1`      Since: `Sept 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson.java`] and link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bennchong"
        },
        "content": "The rest of the App consists of five components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bennchong"
        },
        "content": "* \u003c\u003cDesign-Security,*`Security`*\u003e\u003e: Enforces Authentication"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Each of the five components"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "[[Events-Driven-Nature]]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bennchong"
        },
        "content": "// tag::designSecurity[]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bennchong"
        },
        "content": "[[Design-Security]]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d\u003d Security component"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bennchong"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bennchong"
        },
        "content": "image::SecurityClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bennchong"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/security/Security.java[`Security.java`]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "The `Security` component is a module that ensures the users that are using the application are"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "authenticated, and an instance of an authenticated user will be created and stored in `ModelManager` every time a user"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "is logged in so as to allow the application to do user-specific tasks."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "It also handles all the commands entered to check for security clearance. On top of that, it is able to hash passwords and"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "save them into a file named users.json at root folder."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "In Figure 9, AppUsers is  an object that stores the list of AccountCredentials. This object is created when _FreeTime_"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "runs. Storage Component will try to find a user.json file to convert that into the AppUsers object. If the file is not found, or the data is corrupted,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "this program will create a new AppUsers object with default Users in it."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "More information is detailed below in Security Implementation."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bennchong"
        },
        "content": "// end::designSecurity[]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `AppUsers` objects in json format and read it back."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "// end::designSecurity[]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".Interactions between the Logic Component and Model Component for the `undo` Command"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "// tag::timetable[]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Timetable feature"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "FreeTime\u0027s timetable feature allows users to store and view their own timetables. +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "FreeTime can also display a deconflicted timetable, highlighting mutually free timeslots among the current user and all other selected people."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "The timetable feature can be broadly split into two parts: +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. The backend, which handles the storage and logic of `TimeTable` objects; +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. The frontend, which handles the display of `TimeTable` objects."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Backend implementation"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "The `TimeTable` object is composed under the `Person` class in `Model`. Each `TimeTable` is composed of any number of `TimeSlot` objects. Each `TimeSlot` consists of: +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. One `DayOfWeek` object to indicate the day of week of the `TimeSlot`; +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. Two `LocalTime` objects to indicate the start time and end time of the `TimeSlot` respectively. +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "3. One `Color` object to indicate the color of the `TimeSlot` when displayed on FreeTime\u0027s UI."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "The following class diagram summarises the relationship between the components of the `TimeTable` class:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".Structure of the `TimeTable` Class"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "image::TimeTableClassDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "The `TimeTable` class implements two key methods: +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. `TimeTable#addTimeSlot()` - to add a new `TimeSlot` to the `TimeTable` +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. `TimeTable#deleteTimeSlot()` - to remove an existing `TimeSlot` from the `TimeTable` +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "The class `DeconflictTimeTable`, which inherits from `TimeTable`, is used when the `free` command is executed to store mutually free timeslots among users. +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "When the `free` command is executed, a `DeconflictTimeTable` object is instantiated with all `TimeSlot` objects in the user\u0027s `TimeTable`. Subsequently, the `TimeTable` objects of every `Person` that is passed as an argument to the `free` command is added to the `DeconflictTimeTable`."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "The following sequence diagram shows the significant method calls for the method `FreeCommand#execute()`:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".Interactions between the Logic Component and Model Component for the `FreeTime#execute()` Method"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "image::DeconflictSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "The key difference between `TimeTable` and `DeconflictTimeTable` lies in the implementation of the `addTimeSlot()` method. `TimeTable#addTimeSlot()` throws a `TimeSlotOverlapException` when the `TimeSlot` to be added overlaps with an existing `TimeSlot` in the `TimeTable`. +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "However, `DeconflictTimeTable#addTimeSlot()` merges the `TimeSlot` to be added with all overlapping `TimeSlot` objects in the `DeconflictTimeTable`. Thus, `DeconflictTimeTable#addTimeSlot()` never throws `TimeSlotOverlapException`."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Frontend implementation"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "`TimeTablePanel` extends the abstract class `UIPart` and is implemented using a `BorderPane`. It is composed of the following classes: +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. `TimeTableDayMarkerGrid` - a `GridPane` on the left of the `TimeTablePanel` to display the days of the week; +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. `TimeTableTimeMarkerGrid` - a `GridPane` on the top of the `TimeTablePanel` to display the time markers +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "3. `TimeTableMainGrid` - a `GridPane` in the center of the `TimeTablePanel`. Composed of any number of `TimeTablePanelTimeSlot` objects. +"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "The following class diagram summarises the relationship between the components of the TimeTablePanel class:"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".Structure of the `TimeTablePanel` Class"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "image::TimeTablePanelClassDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "The following screenshot shows the relative position of all the components in `TimeTablePanel`:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".Layout of the TimeTablePanel"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "image::TimeTableScreenshotLabelled.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "FreeTime\u0027s UI is updated through the `EventsCenter` every time `Model#updateTimeTable()` is called."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "The following sequence diagram shows the significant method calls for the method `Model#updateTimeTable()`."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".Interactions between the Model, EventsCenter, and UI Components for the `FreeTime#execute()` Method"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "image::UpdateTimeTableSequenceDiagram.png[width\u003d\"1600\"]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the frontend updates the `TimeTable` to be displayed"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* **Alternative 1 (current choice):** Clears the entire `TimeTableMainGrid` before loading the new `TimeTable`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "** Pros: Easy to implement, only one method (`loadTimeTable()`) is required"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "** Cons: May suffer from performance degradation, especially when the `TimeTable` to be loaded contains many `TimeSlot` objects"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* **Alternative 2:** Detect the difference between the currently displayed `TimeTable` before adding or deleting `TimeTablePanelTimeSlot` objects accordingly."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "** Pros: Reduces execution time of methods which update the displayed `TimeTable`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "** Cons: A method to detect the difference between `TimeTable` objects must be implemented. May not result in significant performance improvements when switching between `TimeTable` objects with few or no `TimeSlot` objects in common."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "// end::timetable[]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "// tag::import_export_timetable[]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d\u003d Import and Export timetable feature"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "The import and export timetable feature allows users to import and export their timetables from and to external applications as _.ics_ files."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "The Import command currently supports timetables from NUSMODS. [https://nusmods.com] This makes it easy for existing users of NUSMODS to bring their timetables into FreeTime +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "The Export command currently supports FreeTime. This makes it possible to make backups of your timetable, or to share it with other users of FreeTime."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "The import and export feature consists of two parts: +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ". The frontend, which parses user input, and informs the user of success or failure."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ". The backend, which handles the reading and writing of _.ics_ files, and the conversion between the _.ics_ format and the TimeTable object. +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Frontend implementation"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Similar to the other commands; see \u003c\u003cEvents-Driven-Nature,*`Events-Driven nature of the design`*\u003e\u003e."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Backend implementation - IcsUtil Class"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "The `IcsUtil` class implements two public methods for handling _.ics_ files: +"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "1. `IcsUtil#readTimeTableFromFile()` - to read a `TimeTable` from a specified _.ics_ file on the disk +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "2. `IcsUtil#saveTimeTableToFile()` - to write a `TimeTable` to a specified location on the disk +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Backend implementation - Import"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "The general implementation are as follows: +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ". `Biweekly`(external library) is used to obtain an `ICalendar` object, by reading the import file"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ". The `ICalendar` is converted to `TimeTable` by IcsUtil."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ". Using this `TimeTable`, we can update the model."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "The following sequence diagram shows how the TimeTable is imported: +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".Interactions between the various Components for the Import Command"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "image::ImportSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Backend implementation - Export"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "The general implementation are as follows: +"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ". The currently displayed `TimeTable` is obtained from model."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ". the `TimeTable` is converted into an `ICalendar` by IcsUtil."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ". The `ICalendar` is written to the file using `Biweekly`(external library)."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "The following sequence diagram shows how the TimeTable is exported: +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".Interactions between the various Components for the `export` Command"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "image::ExportSequenceDiagram.png[width \u003d \"800\"]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Which Classes (and which system(s)) should parse the ics file format?"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* **Alternative 1 (current choice):** All code related to parsing _.ics_ timetable files are inside \u0027IcsUtil\u0027 class. When executing ImportCommand/ExportCommand, it directly calls a method in IcsUtil."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "*** All methods that have to do with _.ics_ parsing are in one class. Easier to implement and manage, given that there are only a few methods for now."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "*** Less dependencies. (directly call IcsUtil to read/write .ics files; compared to having to call IcsStorage which then calls IcsUtil)."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "*** Single responsibility principle is broken. Also, difficult to manage if the class expands and has more methods."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* **Alternative 2 (Go through the \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e subsystem):** Follow the existing IO implementation of `addressbook.xml`; create an IcsTimeTableStorage class to access the ics file in hard disk."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "*** Similar implementation to existing: Classes that have to do with IO are accessed using the Storage Interface."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "*** Increased dependency: LogicManager will then have increased dependency on Storage."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "*** More difficult to implement: Storage subsystem needs to be created on starting the app, whereas the import and export commands are called  ad-hoc."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "// end::import_export_timetable[]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "bennchong"
        },
        "content": "// tag::securityImplementation[]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d\u003d Security Implementation"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "bennchong"
        },
        "content": "To begin this section, we would need to introduce the idea of a Authenticated User instance."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "Whenever a user successfully logs in, or creates a new account, the application will create an Authenticated User in"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "Model. This User is an extension of the Person Class, which different part of the UI and `SecurityManager` will access it. One example would"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "be the friend\u0027s UI panel, where _FreeTime_ has to know the current user to display his friends"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "bennchong"
        },
        "content": "This section will be broken down into +"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "bennchong"
        },
        "content": "1. Front-End +"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "bennchong"
        },
        "content": "2. Back-End +"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Front-End Implementation"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "bennchong"
        },
        "content": "1. CLI +"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox Class handles the command line interface, and passes every command to"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "bennchong"
        },
        "content": "SecurityManager through the Security API."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "bennchong"
        },
        "content": "2. UI Prompt +"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Inside the UI package, there are two new windows created, LoginWindow and RegistrationWindow. Each Window would handle"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "bennchong"
        },
        "content": "UI events such as clicks and passing relevant information to the SecurityManager"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "bennchong"
        },
        "content": "similar to above. +"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Back-End Implementation"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ".Command Parsing"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "The Sequence Diagram when a user enters a command is seen in the figure below:"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions between the UI Component and Security Component for the login Command"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "image::SecurityParseCommandsSD.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "`AuthReturn` is a enum type that contains the following definition:"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "COMMAND_ALLOWED, COMMAND_LOGOUTFIRST, COMMAND_LOGINFIRST, COMMAND_ERROR;"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "The above figure shows the sequence when the `AuthReturn` is `COMMAND_ALLOWED`. When it is not that, there will be an `SecurityAuthenticationException`"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "thrown with the relevant message to the user."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "`CommandsEnum` is another enum type that contains the method `iscommandAllowed()`. They are found in `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions between the UI Component and Security Component for the login Command"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "image::SecurityLoginSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "bennchong"
        },
        "content": "The figure above shows the steps when login is called after parsing the command (since login is a command too)."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "AppUsers contains an array of"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "bennchong"
        },
        "content": "AccountCredentials, which has the attribute of Username and Password, and methods such isPasswordValid(). Here it also"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "calls the static Hasher class, which takes the password and a salt to create the hash of the password."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "Whenever a user logs in, the username is searched from userList returned by AppUsers. Once it matches a username, the input pasword is"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "then salted and hashed (SHA-512), and finally compared to the stored hashed password. A boolean is then returned to the"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "SecurityManager."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Where to store Authenticated User object"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Inside of ModelManager"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: All the methods in LogicManager can access User object"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: The concept of an authenticated user object should be inside SecurityManager"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Inside of SecurityManager"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: ModelManager does not have security related objects inside it"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic and Model methods cannot access it"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d How to store user password credentials"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** To encrypt with a hash function"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Password is protected"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: There is a slight computational overhead and code complexity"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Store the plaintext password"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Less work to do"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Anyone who have access to the credential file can have access to all the application users"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "bennchong"
        },
        "content": "// end::securityImplementation[]"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "// tag::friend[]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d\u003d Friend feature"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d\u003d\u003d Feature description"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "The friend feature allows users to befriend and add other users to their friend list."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "Timetables and personal information is only viewable for users in your friend list and timetables can only be deconflicted within your friends."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "The feature is implemented with two main parts. The frontend and the backend, which will be explained below."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Frontend implementation"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "On the left side users will now see two panes, one above for friends and one below for the rest of the users not inside the friend list."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "PersonListPanel is adapted to now have two `Stackpane` instead of one and is nested inside a `Splitpane` in the `VBox`."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ".Class diagram of Friend"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "image::FriendFeatureFrontEndDiagramFix.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "The two panels will be filtered based on two predicates, `FriendListPredicate` and `OtherListPredicate`."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "The friends of the current user is iterated through and those that belong to the friend will be shown on the FriendListPanel."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "The rest of the users will be shown on PersonListPanel. Both predicates will filter out the current user."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "When additional filtering commands such as `group` or `find` are executed, the predicate produce from either of the commands will be added to a new `CombinedFriendListPredicate` and `CombinedOtherListPredicate`."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "This creates a new predicate in which will filter the two panels accordingly."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Backend implementation"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "The `User` is associated with a specific `Person`. Each person can have any number of `Friend` objects."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "Every friend will have a `Name` object that corresponds to the specific `Person` object in the list."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ".Class diagram of Friend"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "image::FriendClassDiagram.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "When the friend command is executed, the Person selected at the index will be added as a `Friend` to the current user."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "Likewise, the reverse will occur and the user will be added to the Person selected as a `Friend`."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "When the selected person logs in, he or she will see the user as a friend as well."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "The following sequence diagram shows the execution of the Friend command:"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ".Sequence diagram of friend command"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "image::FriendCommandSequenceDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d How to store the friends of the User"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* **Alternative 1 (current choice):** Every Friend of the user has a name which matches a specific person in the database"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "** Pros: Every friend only includes essential information about the specific person"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "** Cons: Takes longer to match the person in the friends list to a person in the database"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* **Alternative 2:** Allowing every Friend to compose a Person object"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "** Pros: Friend contains more information that can be used"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "** Cons: Duplicated entries of the same Person"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d How to display the friends and others of the current User"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* **Alternative 1 (current choice):** Use of predicates to set the list to reflect only the desired people."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "** Pros: Allow different predicates to be nested when more filtering commands are called. More dynamic filtering can be done."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "** Cons: The list internally contains all the users of the database, extra information is being loaded."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* **Alternative 2:** Send a list of all friends and non-friends at the start of the application to individual panels."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "** Pros: Correct users will be loaded at the start for each panel."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "** Cons: Friends panel and others panel have to be repopulated again after every friend/unfriend"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "// end::friend[]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Has a need to manage complicated weekly timetable"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Has a need to schedule meeting with many people across many groups"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Prefer desktop apps over other types"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Prefers typing over mouse input"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "*Value proposition*: Can manage schedule and schedule meetings faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* * *` | Teacher | See when my students are free | Find a good time to hold extra classes"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* * *` | Student | Book a slot in my friend’s calendar | Automatically block out a timeslot in his schedule"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* * *` | User | Record my schedule | Know when I am free"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* * *` | Student | Share my schedule with my friends | Schedule meetings with them"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* * *` | Student | See my timetable in table form | See things intuitively and quickly"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* *` | Student | Know when my lecturer is free | Arrange for consultation slots"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* *` | Student | Form project groups with my friends | Do projects with them"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* *` | Student | Find times for me to meet my group members | Have a meeting without any troublesome planning"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* *` | Student | Start my meetings after a certain time | Not wake up early"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* *` | Student | End my before a certain time | Make it home for dinner"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* *` | Student | Have meetings that last for more than a set duration | Complete the agenda for the meeting"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* *` | Student | See when I can have meetings with my group mates in a graphical format | See all potential meeting times at a glance"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`* *` | Student | Have meetings only on certain days of the week | Minimise the number of days I need to go to school"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`*` | Friend | Know when my friend is free | Have lunch with him"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|`*` | User | Add friends on a platform | I won\u0027t be lonely"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d Use case: Check student’s timetable"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "MSS: +"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. Teacher logs into \u003c\u003caccount, account\u003e\u003e. +"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. Teacher checks one of her student groups. +"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "3. Teacher selects \"Find common free timeslots\". +"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "4. Address Book requests for confirmation. +"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "5. Teacher confirms. +"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "6. Address book returns a list of the free \u003c\u003ctimeslot,timeslots\u003e\u003e in descending order of availability. +"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d Use case: Block other user’s timeslot"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "MSS: +"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. Student logs into \u003c\u003caccount, account\u003e\u003e. +"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. Student requests his friend\u0027s \u003c\u003ctimetable,timetable\u003e\u003e. +"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "3. System prints friend\u0027s \u003c\u003ctimetable,timetable\u003e\u003e. +"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "4. Student chooses one \u003c\u003ctimeslot,timeslot\u003e\u003e to block out. +"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "5. System prints updated friend\u0027s \u003c\u003ctimetable,timetable\u003e\u003e. +"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "6. System logs notification to friend\u0027s \u003c\u003caccount, account\u003e\u003e. +"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d Use case: Add user\u0027s timeslot"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "MSS: +"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. User logs into their \u003c\u003caccount, account\u003e\u003e. +"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. System shows the possible commands. +"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "3. User chooses to add \u003c\u003ctimeslot,timeslot\u003e\u003e. +"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "4. System shows the instructions to add \u003c\u003ctimeslot,timeslot\u003e\u003e. +"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "5. Student adds one of their \u003c\u003ctimeslot,timeslots\u003e\u003e. +"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "6. System confirms the \u003c\u003ctimeslot,timeslot\u003e\u003e has been added. +"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d Use case: User View Own Timetable"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "MSS: +"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. User logs into their \u003c\u003caccount, account\u003e\u003e. +"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. System shows the possible commands. +"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "3. User selects \u0027View timetable in table form\u0027. +"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "4. System shows \u003c\u003ctimetable,timetable\u003e\u003e in table form. +"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d Use case: Find common free-slots (Group of students)"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "MSS: +"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. Student logs into their \u003c\u003caccount, account\u003e\u003e. +"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. System shows the possible commands. +"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "3. User selects \u0027Find common free \u003c\u003ctimeslot,timeslots\u003e\u003e\u0027. +"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "4. System asks for the people the user wants to find common free \u003c\u003ctimeslot,timeslots\u003e\u003e with. +"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "5. Student inputs/selects the people. +"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "6. System prints the free \u003c\u003ctimeslot,timeslots\u003e\u003e it has found. +"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Extensions: (Only an option if one-time \u0027events\u0027 has been implemented) +"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "1. Student selects one of those \u003c\u003ctimeslot,timeslots\u003e\u003e displayed. +"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "2. System adds an \u0027event\u0027 at that \u003c\u003ctimeslot,timeslots\u003e\u003e."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d Use case: Import TimeTable (for a person)"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "MSS: +"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "1. Student logs into their \u003c\u003caccount, account\u003e\u003e. +"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "2. System shows the possible commands. +"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "3. User selects \u0027Import \u003c\u003cTimetable,Timetable\u003e\u003e\u0027. +"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "4. System asks for the location of the file to import the \u003c\u003cTimetable,Timetable\u003e\u003e from. +"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "5. Student inputs the file location. +"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "6. System acknowledges the command, and displays the timetable that was imported. +"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Extensions: (user provided invalid file location) +"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "5a. Student inputs invalid file location. +"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "5b. System informs user about the invalid file location. +"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d Use case: Export TimeTable (for a person)"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "MSS: +"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "1. Student logs into their \u003c\u003caccount, account\u003e\u003e. +"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "2. System shows the possible commands. +"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "3. User selects \u0027Export \u003c\u003cTimetable,Timetable\u003e\u003e\u0027. +"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "4. System asks for the location of the file to export the \u003c\u003cTimetable,Timetable\u003e\u003e. +"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "5. Student inputs the file location. +"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "6. System indicates successful export. +"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Extensions: (export fails for any reason) +"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "6a. System indicates failed export. +"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".  Should be able to hold up to 1000 timeslots without a noticeable sluggishness (response time of \u003e500 ms) in performance for typical usage."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[[timeslot]] Timeslot::"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "A fixed duration of time with a start and end time"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[[timetable]] Timetable::"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "A set of non-overlapping \u003c\u003ctimeslot,timeslots\u003e\u003e"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[[groups]] Group::"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "A set of more than one user"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[[account]] Account::"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "A structure that stores all information related to one user. Only accessible to specified user."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Launch and shutdown"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "   Expected: Shows the login page. The window size may not be optimual."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Register, logging in, and logging out"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". Opening the help window"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Test case: `help` +"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "   Expected: The help window opens, showing the User Guide."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". Logging in with a test account"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "bennchong"
        },
        "content": ".. Test case: `login u/test pw/test` +"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "   Expected: The login is successful and the main GUI appears. The `Me` panel should show a person card panel with `test` in the name field."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". Registering a new account"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Test case: `register u/John Goe pw/testpassword p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 t/CS2113T` +"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "   Expected: The registration is successful and the main GUI appears. The `Me` panel should show a person card panel with `John Goe` in the name field."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". Trying to register a new account with an existing username"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Test case: `register u/test pw/testpassword p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 t/CS2113T` +"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "   Expected: An error message appears indicating that the user already exists."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". Logging out"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Prerequisites: Have logged in to a user account"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Test case: `logout` +"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "   Expected: The logout is successful and the login screen reappears with the message \"Successfully logged out\"."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "All following sections assume that the user is currently logged into FreeTime."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Basic commands"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". Editing your details"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "bennchong"
        },
        "content": ".. Test case: `edit p/91234567 e/johndoe@example.com g/CS2101` +"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "   Expected: The details of the user in the `Me` panel is updated to specified details."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". Showing command history"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Test case: `history` +"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "   Expected: The list of all previously-entered commands appears below the command box."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Adding and removing friends"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". Adding a friend"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Test case: `friend 1` +"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "   Expected: The first person in the `Others` panel moves to the `Friends` panel. Hidden fields, namely phone number, address, and email of this person should now be visible."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". Removing a friend"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Prerequisites: Have previously added a friend"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Test case: `unfriend 1` +"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "   Expected: The first person in the `Friends` panel moves to the `Others` panel. Hidden fields, namely phone number, address, and email of this person should no longer be visible."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Finding a person by name and by group"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". Finding a person by name"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Test case: `find John` +"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "   Expected: Only people with the word `John` in their names in both `Friends` and `Others` panels are shown. The command box reflects the total number of people listed in both panels."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". Finding a person by group"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Test case: `group CS2101-A` +"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "   Expected: Only people with the group `CS2101-A` in both `Friends` and `Others` panels are shown. The command box reflects the total number of people listed in both panels."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". Listing all people"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Prerequisite: Have previously used the `find` or `group` command"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Test case: `listall` +"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "   Expected: All people currently registered are shown in their respective panels."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Adding and removing timeslots from the user\u0027s timetable"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". View the user\u0027s timetable"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Test case: `select me` +"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "   Expected: If logged in with a newly-registed account, the timetable panel should be empty. Otherwise, the user\u0027s timetable is shown on the timetable panel."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". View a friend\u0027s timetable"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Prerequisite: Have previously added a friend"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Test case: `select 1` +"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "   Expected: The first person in the `Friends` panel is highlighted, with his timetable showing in the timetable panel (should be non-blank for users pre-loaded into FreeTime)"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". Adding a timeslot to your timetable"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Prerequisite: The timeslot from 0800 hrs to 1000 hrs on Monday is empty"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Test case: `add mon 8-10` +"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "   Expected: A new timeslot, represented by a colored rectangle, appears in the corresponding position on the timetable. The timetable should also automatically resize to begin at 0800 hrs instead of the default 1000 hrs."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". Removing a timeslot from your timetable"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Prerequisite: The timeslot from 0800 hrs to 1000 hrs on Monday is occupied by a single timeslot"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Test case: `delete mon 8-10` +"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "   Expected: The timeslot corresponding to Monday, 0800 hrs to 1000 hrs is removed from the timetable panel. If no other timeslots in the timetable begin before 1000 hrs, the timetable should automatically resize to begin at the default 1000 hrs."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Showing free timeslots across users"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". Showing free timeslots across users"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Prerequisites: Have previously added a friend"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Test case: `free 1` +"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "   Expected: A deconflicted timetable should appear in the timetable panel. Timeslots where both the user and the friend at index 1 are available are highlighted in green. All other timeslots are highlighted in red."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Importing and exporting the user\u0027s timetable"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". Exporting a timetable"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".. Prerequisite: The User\u0027s timetable is not empty."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".. Test case: `select me`, followed by `export file` +"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "   Expected: The user\u0027s timetable is exported to `[root]/import_export/file.ics`, where `[root]` represents the directory where FreeTime.jar is located."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". Importing a timetable"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".. Prerequisite: An `nusmods_calendar.ics` file should be present in the `import_export` directory. This directory is located in the root directory (where the FreeTime.jar file resides). The file should have been downloaded from NUSMODS. +"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".. Test case: `import nusmods_calendar` +"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "   Expected: The user\u0027s timetable is imported from the .ics file. The timetable will be shown on the timetable panel."
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 62,
      "nianfei97": 236,
      "alexiscatnip": 108,
      "-": 713,
      "bennchong": 44
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnumlevels: 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use High-Level Designs `[LO-HighLevelDesign]`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e describes the high-level design using an _Architecture Diagrams_ and high-level sequence diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/[se-edu/se-book: Design: Architecture]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/design/introduction/multilevelDesign/[se-edu/se-book: Design: Introduction: Multi-Level Design]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Event-Driven Programming `[LO-EventDriven]`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e uses events to communicate with components without needing a direct coupling. Also note how the link:{repoURL}/src/main/java/seedu/address/commons/core/index/EventsCenter.java[`EventsCenter.java`] acts as an event dispatcher to facilitate communication between event creators and event consumers."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/architecturalStyles/eventDriven/[se-edu/se-book: Design: Architecture: Architecture Styles: Event-Driven Architectural Style]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use API Design `[LO-ApiDesign]`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Note how components of AddressBook have well-defined APIs. For example, the API of the `Logic` component is given in the link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image:LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/reuse/apis/[se-edu/se-book: Implementation: Reuse: APIs]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Assertions `[LO-Assertions]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the AddressBook app uses Java ``assert``s to verify assumptions."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/assertions/[se-edu/se-book: Implementation: Error Handling: Assertions]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more assertions"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Make sure assertions are enabled in your IDE by forcing an assertion failure (e.g. add `assert false;` somewhere in the code and run the code to ensure the runtime reports an assertion failure)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add more assertions to AddressBook as you see fit."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Logging `[LO-Logging]`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cDeveloperGuide#logging, how the AddressBook app uses Java\u0027s `java.util.log` package to do logging\u003e\u003e."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/logging/[se-edu/se-book: Implementation: Error Handling: Logging]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more logging"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Add more logging to AddressBook as you see fit."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Defensive Coding `[LO-DefensiveCoding]`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Note how AddressBook uses the `ReadOnly*` interfaces to prevent objects being modified by clients who are not supposed to modify them."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/defensiveProgramming/[se-edu/se-book: Implementation: Error Handling: Defensive Programming]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: identify more places for defensive coding"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Analyze the AddressBook code/design to identify,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* where defensive coding is used"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* where the code can be more defensive"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Build Automation `[LO-BuildAutomation]`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingGradle#, how the AddressBook app uses Gradle to automate build tasks\u003e\u003e."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/what/[se-edu/se-book: Implementation: Integration: Build Automation: What]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to run tasks"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* Use gradle to do these tasks: Run all tests in headless mode, build the jar file."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to manage dependencies"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the build script `build.gradle` file manages third party dependencies such as ControlsFx. Update that file to manage a third-party library dependency."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Continuous Integration `[LO-ContinuousIntegration]`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingTravis#, how the AddressBook app uses Travis to perform Continuous Integration\u003e\u003e. (https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]])"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/continuousIntegrationDeployment/[se-edu/se-book: Implementation: Integration: Build Automation: CI \u0026 CD]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use Travis in your own project"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Set up Travis to perform CI on your own fork."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Code Coverage `[LO-CodeCoverage]`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Note how our CI server \u003c\u003cUsingTravis#, Travis uses Coveralls to report code coverage\u003e\u003e. (https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]) After \u003c\u003cUsingCoveralls#, setting up Coveralls\u003e\u003e for your project, you can visit Coveralls website to find details about the coverage of code pushed to your repo. https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[Here] is an example."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testCoverage/[se-edu/se-book: QA: Testing: Test Coverage]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use the IDE to measure coverage locally"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the IDE to measure code coverage of your tests."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Test Case Design Heuristics `[LO-TestCaseDesignHeuristics]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/src/test/java/seedu/address/commons/util/StringUtilTest.java[`StringUtilTest.java`]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "class gives some examples of how to use _Equivalence Partitions_, _Boundary Value Analysis_, and _Test Input Combination Heuristics_ to improve the efficiency and effectiveness of test cases testing the link:../src/main/java/seedu/address/commons/util/StringUtil.java[`StringUtil.java`] class."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testCaseDesign/[se-edu/se-book: QA: Test Case Design]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Apply Test Case Design Heuristics to other places"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the test case design heuristics mentioned above to improve test cases in other places."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write Integration Tests `[LO-IntegrationTests]`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the link:{repoURL}/src/test/java/seedu/address/storage/StorageManagerTest.java[`StorageManagerTest.java`] class."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* Test methods `prefsReadSave()` and `addressBookReadSave()` are integration tests. Note how they simply test if The `StorageManager` class is correctly wired to its dependencies."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Test method `handleAddressBookChangedEvent_exceptionThrown_eventRaised()` is a unit test because it uses _dependency injection_ to isolate the SUT `StorageManager#handleAddressBookChangedEvent(...)` from its dependencies."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Compare the above with link:{repoURL}/src/test/java/seedu/address/logic/LogicManagerTest.java[`LogicManagerTest`]. Some of the tests in that class (e.g. `execute_*` methods) are neither integration nor unit tests. They are _integration + unit_ tests because they not only check if the LogicManager is correctly wired to its dependencies, but also checks the working of its dependencies. For example, the following two lines test the `LogicManager` but also the `Parser`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "@Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write unit and integration tests for the same method."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Write a unit test for a high-level method somewhere in the code base (or a new method you wrote)."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* Write an integration test for the same method."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write System Tests `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Note how tests below `src/test/java/systemtests` package (e.g link:{repoURL}/src/test/java/systemtests/RegisterCommandSystemTest.java[`RegisterCommandSystemTest.java`]) are system tests because they test the entire system end-to-end."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more system tests"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* Write system tests for the new features you add."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Automate GUI Testing `[LO-AutomateGuiTesting]`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses TextFX library to automate GUI testing, including \u003c\u003cDeveloperGuide#headless-gui-testing, _headless_ GUI testing\u003e\u003e."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more automated GUI tests"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* Covered by `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Design Patterns `[LO-DesignPatterns]`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some example design patterns used in the code base."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* *Singleton Pattern* : link:{repoURL}/src/main/java/seedu/address/commons/core/EventsCenter.java[`EventsCenter.java`] is Singleton class. Its single instance can be accessed using the `EventsCenter.getInstance()` method."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* *Facade Pattern* : link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager.java`] is not only shielding the internals of the Storage component from outsiders, it is mostly redirecting method calls to its internal components (i.e. minimal logic in the class itself). Therefore, `StorageManager` can be considered a Facade class."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* *Command Pattern* : The link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command.java`] and its sub classes implement the Command Pattern."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* *Observer Pattern* : The \u003c\u003cDeveloperGuide#events-driven-nature-of-the-design, event driven mechanism\u003e\u003e used by this code base employs the Observer pattern. For example, objects that are interested in events need to have the `@Subscribe` annotation in the class (this is similar to implementing an `\\\u003c\u003cObserver\u003e\u003e` interface) and register with the `EventsCenter`. When something noteworthy happens, an event is raised and the `EventsCenter` notifies all relevant subscribers. Unlike in the Observer pattern in which the `\\\u003c\u003cObservable\u003e\u003e` class is notifying all `\\\u003c\u003cObserver\u003e\u003e` objects, here the `\\\u003c\u003cObservable\u003e\u003e` classes simply raises an event and the `EventsCenter` takes care of the notifications."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* *MVC Pattern* :"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "** The \u0027View\u0027 part of the application is mostly in the `.fxml` files in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** `Model` component contains the \u0027Model\u0027. However, note that it is possible to view the `Logic` as the model because it hides the `Model` behind it and the view has to go through the `Logic` to access the `Model`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Sub classes of link:{repoURL}/src/main/java/seedu/address/ui/UiPart.java[`UiPart`] (e.g. `PersonListPanel` ) act as \u0027Controllers\u0027, each controlling some part of the UI and communicating with the \u0027Model\u0027 (via the `Logic` component which sits between the \u0027Controller\u0027 and the \u0027Model\u0027)."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* *Abstraction Occurrence Pattern* : Not currently used in the app."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designPatterns/[se-edu/se-book: Design: Design Patterns]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Discover other possible applications of the patterns"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* Find other possible applications of the patterns to improve the current design. e.g. where else in the design can you apply the Singleton pattern?"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* Discuss pros and cons of applying the pattern in each of the situations you found in the previous step."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Find more applicable patterns"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* Learn other _Gang of Four_ Design patterns to see if they are applicable to the app."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Static Analysis `[LO-StaticAnalysis]`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses the http://checkstyle.sourceforge.net/[CheckStyle] static analysis tool to confirm compliance with the coding standard."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/qualityAssurance/staticAnalysis/[se-edu/se-book: QA: Static Analysis]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use CheckStyle locally to check style compliance"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* Install the CheckStyle plugin for your IDE and use it to check compliance of your code with our style rules (given in `/config/checkstyle/checkstyle.xml`)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Do Code Reviews `[LO-CodeReview]`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how some PRs in this project have been reviewed by other developers. Here is an https://github.com/se-edu/addressbook-level4/pull/147[example]."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note how we have used https://www.codacy.com[Codacy] to do automate some part of the code review workload (https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]])"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Review a PR"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* Review PRs created by team members."
      }
    ],
    "authorContributionMap": {
      "-": 265,
      "bennchong": 1
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d FreeTime - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-W13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "By: `W13-1`      Since: `Sept 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "Welcome to _FreeTime_!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "_FreeTime_ is a desktop app that allows you to *find free timeslots to meet team members for projects*. More specifically, it helps you identify the times during which everyone you want to meet is free."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "_FreeTime_ is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ".  Download the latest `FreeTime.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".  You should see _FreeTime_\u0027s login screen, as follows:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".FreeTime\u0027s login screen, shown when you first launch FreeTime"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "image::StartUpScreenFix.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". The command line is indicated by the red arrow in the figure above. Type your commands here and press kbd:[Enter] to execute the command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ". If this is your first time using _FreeTime_, follow the on-screen instructions to create your account. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "****"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "Creating account example: +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "`register u/Paul pw/12345678` +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Creates an account name _Paul_ with password _12345678_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "****"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".  After registering or logging in, you will be brought into _FreeTime_\u0027s main screen."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "+"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ".Window of the Main Screen of FreeTime after logging in"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "image::FreeTimeMainScreenFix.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "+"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "// tag::security[]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d Registering and Logging In"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Whenever you open the application, the timetable content and commands are locked. You are required to either"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "login with a pre-existing account, or register a new one."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "NOTE: _FreeTime_ has a default user with username: *test* and password: *test*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "There are five security related commands that can be entered on this command line:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "1. `login`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "2. `register`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "3. `ui`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "4. `logout` (Only when you have logged in)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "5. `exit`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": ".Login Page with Red Arrow pointing to where you should enter your commands"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "image::StartUpScreenFix.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": "At this page you will have to enter your credentials to log in. Only then would you be able to edit and view your own timetable,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "and view your friends\u0027 timetable. +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": "TIP: Friends are other users that you have \"friended\", and all users start off without"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "having any friends. +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": "The timetable that belongs to users that are not your friends will not be available for you to see, till you"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "add them as friends."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging In: `login` (`li`)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Command: `login u/USERNAME pw/PASSWORD`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "* `login u/test pw/test` +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": " Logins with Username: test and Password: test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bennchong"
        },
        "content": "* `login u/tim pw/tam` +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Logins with Username: tim and Password: tam"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bennchong"
        },
        "content": "CAUTION: You are required to to enter a password that contains more or equal to 8 characters."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bennchong"
        },
        "content": "To ensure that your account is well-protected, do use a password that is not common."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Registering: `register` (`re`)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Command: `register u/USERNAME pw/PASSWORD e/[EMAIL] p/[MOBILEPHONE] a/[ADDRESS]`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bennchong"
        },
        "content": "* `register u/tim pw/tam e/tim@tam.com p/88888888 a/Tammy Road`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bennchong"
        },
        "content": "NOTE: Only the `Username` and `Password` fields are necessary, the others are optional and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bennchong"
        },
        "content": "you are not required to enter them."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Showing the UI Interface: (`ui`)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Command: `ui`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Entering the command `ui` will cause the Login Window to appear as seen in figure 4."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bennchong"
        },
        "content": ".Login UI"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bennchong"
        },
        "content": "image::LoginUI.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Clicking on the Register button changes your view to the Registration Window seen in figure 5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bennchong"
        },
        "content": ".Registration UI"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bennchong"
        },
        "content": "image::RegisterUI.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bennchong"
        },
        "content": "// end::security[]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "This section contains all of the features that are currently present in _FreeTime_. Feel free to click any one of the links to quickly jump to the feature!"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "//tag::featureoverview"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ".Overview of all the features in FreeTime"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "[cols\u003d\"20%,80%\"]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "|Feature |Function"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|\u003c\u003chelp,help (h)\u003e\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "|Opens the help window"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|\u003c\u003cedit,edit (ed)\u003e\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "|Edits your information in the database"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|\u003c\u003cfind,find (f)\u003e\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "|Filters the database based on the keywords specified"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|\u003c\u003cgroup,group (g)\u003e\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "|Filters the database based on the group tags specified"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|\u003c\u003clist,listall (l)\u003e\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|Lists all the users in the database"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|\u003c\u003cfriend,friend (af)\u003e\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|Adds a user to your friend list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|\u003c\u003cunfriend,unfriend (uf)\u003e\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|Removes a friend from your friend list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|\u003c\u003cselect,select (s)\u003e\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "|Selects a user in your friends list and shows their timetable"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|\u003c\u003cadd,add (a)\u003e\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|Adds a timeslot to your timetable"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|\u003c\u003cdelete,delete (d)\u003e\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|Removes a timeslot from your timetable"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|\u003c\u003cclear,clear (c)\u003e\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|Clears all timeslots from your timetable"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|\u003c\u003cfree,free (fr)\u003e\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "|Highlights timeslots where you and everyone specified is free"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|\u003c\u003cimport,import (im)\u003e\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|Imports a timetable for the current user from a specified (.ics) file"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|\u003c\u003cexport,export (ex)\u003e\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|Exports the currently-displayed timetable to the specified (.ics) file"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|\u003c\u003cundo,undo (u)\u003e\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "|Restores the address book to the state before the previous undoable command was executed."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|\u003c\u003credo,redo (r)\u003e\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "|Reverses the most recent undo command"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|\u003c\u003chistory,history (hi)\u003e\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|Lists all the commands that you have entered in reverse chronological order"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|\u003c\u003clogout,logout (lo)\u003e\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|Logs out of _FreeTime_ and brings you back to the login screen"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|\u003c\u003cexit,exit (x)\u003e\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "|Closes _FreeTime_"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "//end::featureoverview"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* Each command has an alias (given in round brackets after the command word) that can be used to replace the full command word. e.g. `find John` is equivaluent to `f John`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `edit p/PHONE`, `PHONE` is a parameter which can be used as `edit p/12345678`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Items in square brackets are optional e.g `[p/PHONE_NUMBER][g/GROUP]` can be used as `p/12345678 g/CS2101` or as `g/CS2101`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[g/GROUP]...` can be used as `{nbsp}` (i.e. 0 times), `g/CS2101`, `g/CS2113T g/W13-1` etc."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `e/EMAIL p/PHONE_NUMBER`, `p/PHONE_NUMBER e/EMAIL` is also acceptable."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "[[help]]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help` (`h`)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Displays the User Guide from within the app."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c\u003cFeatures,Jump back to _FreeTime_\u0027s feature list\u003e\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "[[edit]]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit` (`ed`)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "Edits your information in the database. +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Format: `edit [p/PHONE] [e/EMAIL] [a/ADDRESS] [g/GROUP]...`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* When editing groups, your existing groups will be removed. i.e adding groups is not cumulative."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* You can remove all your groups by typing `g/` without specifying any groups after it."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Groups should be alphanumeric (contains letters and numbers), and can also contain hyphens \"-\" and underscores \"_\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c\u003cFeatures,Jump back to _FreeTime_\u0027s feature list\u003e\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "[[find]]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Locating persons by name : `find` (`f`)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c\u003cFeatures,Jump back to _FreeTime_\u0027s feature list\u003e\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "// tag::tagcommand[]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "[[group]]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d\u003d Locating persons by group : `group` (`g`)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Find persons whose groups match the specified groups."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Format: `group GROUPNAME [MORE_GROUPNAMES]`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "****"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* By default, FreeTime shows all the users that are using the application, on both the Friends and Others panel."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* The search is case sensitive. e.g `CS2101` will not match `cs2101`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* The order of the groups do not matter. e.g. `CS2101 CS2113T` will match `CS2113T CS2101`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Persons matching at least one group will be returned (i.e. `OR` search). e.g. `CS2113T CS2101` will return persons with in either `CS2101` or `CS2113T` groups"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "****"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* `group CS2101` +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Filters both the others list and the friends list to show only users with the group \"CS2101\"."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* `group CS2101 CS2113T` +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Filters both the others list and the friends list to show only users with both group \"CS2101\" and \"CS2113T\"."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "Use the command `listall` to revert the panels back to its original state."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c\u003cFeatures,Jump back to _FreeTime_\u0027s feature list\u003e\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "// end::tagcommand[]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[[list]]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `listall` (`l`)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Shows a list of all persons in _FreeTime_."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Format: `listall`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "After filtering your results by executing commands such as `group` or `find`, executing `listall` will revert the list back to it\u0027s initial state"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c\u003cFeatures,Jump back to _FreeTime_\u0027s feature list\u003e\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "// tag::friendcommand[]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "[[friend]]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d\u003d Adding a person to your friend list : `friend` (`af`)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "Adds a person from the others list to your friend list."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "Format: `friend INDEX`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* Personal information of the user will be obscured until you have befriended them."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* Most commands in this application (like `free` and `select`) can only be executed only after adding someone to your friend list."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* You can only befriend someone who is in the others list."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* The indices *must be positive integers* `1, 2, 3, ...` and have to match someone on the others list"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* `friend 1` +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "Adds the first user in the others list to your list of friends."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ".  Before executing the command, your window might look like the following, without friends:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "+"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ".Before adding friend to your friend list."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "image::BeforeAddingFriendsPS.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "+"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "bennchong"
        },
        "content": ".  After executing `friend 6`, there will be a success message and the first person should be added to the friend\u0027s list, as follows:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "+"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ".After adding friend to your friend list."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "image::AfterAddingFriendsPS.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "+"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ". More information about the user is now shown and commands such as `free` and `select` can now be used."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c\u003cFeatures,Jump back to _FreeTime_\u0027s feature list\u003e\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "// end::friendcommand[]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "// tag::unfriendcommand[]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "[[unfriend]]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d\u003d Removing a person from your friend list : `unfriend` (`uf`)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "Removes a person from your friend list."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "Format: `unfriend INDEX`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "****"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* You can only unfriend someone who is in your friends list."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* The indices *must be positive integers* `1, 2, 3, ...` and have to match someone on the friends list"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "****"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* `unfriend 1` +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "Removes the first user from the friends list."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ".  Before executing the command, look for the index of the person you would like to remove from your list:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "+"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ".Before removing friend from friend list."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "image::BeforeRemovingFriendsPS.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "+"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ".  After executing `unfriend 1`, there will be a success message and the first person should be removed from the friend\u0027s list, as follows:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "+"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ".After adding friend to your friend list."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "image::AfterRemovingFriendsPS.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "+"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ". More information about the user is now shown and commands such as `free` can now be used."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c\u003cFeatures,Jump back to _FreeTime_\u0027s feature list\u003e\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "// end::unfriendcommand[]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[[select]]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select` (`s`)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Selects your friend with the specified index, showing you their timetable. +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* The index refers to the index number shown in your friend list."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* You cannot select someone who is not your friend yet. Try using the `friend` command first!"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* You can select yourself by using the command `select me`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `select me` +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Selects yourself."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `select 2` +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Selects the 2nd person listed in your friend list."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c\u003cFeatures,Jump back to _FreeTime_\u0027s feature list\u003e\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "// tag::timeslot[]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[[add]]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Add a timeslot to your timetable: `add` (`a`)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Adds a timeslot to your timetable."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Format: `add Monday 10:00-12:30`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "****"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* _FreeTime_ uses the 24-hour clock, so 01:00 means 1 am, not 1 pm!"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Shortforms for the day of the week are fine too. e.g. you can type `Mon` instead of `Monday`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* If you type a single number, like `10` for either the start or end time, FreeTime will assume that you mean `10:00`."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* You cannot add a timeslot that clashes with your current timetable."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "****"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `add Monday 10:00-12:30` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Adds the timeslot from 10:00 to 12:30 on Monday to your timetable."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `add Fri 13:30-14:00` +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Adds the timeslot from 13:30 to 14:00 on Friday to your timetable."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `add Wed 17-18` +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Adds the timeslot from 17:00 to 18:00 on Wednesday to your timetable."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "After adding a timeslot, you should see the following:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".Timeslot added to your timetable"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "image::AddTimeSuccess.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c\u003cFeatures,Jump back to _FreeTime_\u0027s feature list\u003e\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[[delete]]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Delete a timeslot from your timetable: `delete` (`d`)"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Deletes a timeslot from your timetable."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Format: `delete Monday 10:00-12:30`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "****"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* _FreeTime_ uses the 24-hour clock, so 01:00 means 1 am, not 1 pm!"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* Shortforms for the day of the week are fine too. e.g. you can type `Mon` instead of `Monday`."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* If you type a single number, like `10` for either the start or end time, FreeTime will assume that you mean `10:00`."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* You cannot delete a timeslot that is not already in your timetable."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "****"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `delete Monday 10:00-12:30` +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Deletes the timeslot from 10:00 to 12:00 on Monday from your timetable."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `delete Fri 13:30-14:00` +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Deletes the timeslot from 13:30 to 14:00 on Friday from your timetable."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `delete Wed 17-18` +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Deletes the timeslot from 17:00 to 18:00 on Wednesday from your timetable."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "// end::timeslot[]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c\u003cFeatures,Jump back to _FreeTime_\u0027s feature list\u003e\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "[[clear]]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Clears your timetable : `clear` (`c`)"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Clears all timeslots from your timetable. +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c\u003cFeatures,Jump back to _FreeTime_\u0027s feature list\u003e\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "// tag::freecommand[]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[[free]]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Show free slots among selected people: `free` (`fr`)"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Highlights timeslots where you and everyone specified is free."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Format: `free INDEX...`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "****"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* You can specify more than one friend."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* The indices refer to the index number shown in your friend list."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* The indices *must be positive integers* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "****"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `free 1 2` +"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Highlights timeslots where you, friend 1, and friend 2, are all free to meet up."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "After executing the command, you should see the following:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ".Timeslots highlighted in green are available while timeslots highlighted in red are unavailable."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "image::FreeTimeSuccess.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c\u003cFeatures,Jump back to _FreeTime_\u0027s feature list\u003e\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "// end::freecommand[]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "// tag::import[]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "[[import]]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d\u003d Import Timetable : `import` (`im`)"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Use this command to import a timetable for the *current user* from a specified file. +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "See the example below for a quick start! +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Format: `import FILE_NAME` +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "****"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* Command parameters:"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** `FILE_NAME` refers to the name of the file that you want to import."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "*** Do not include the _.ics_ file extension when typing the command."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "*** In other words, type: `import nusmods_calendar` instead of `import nusmods_calendar.ics`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* Compatibility:"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** Only supports _.ics_ files exported from NUSMODS."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* Location of the import file:"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** The file will be imported from the folder `import_export`, which is located in the same folder as the `FreeTime.jar` file."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "*** Please see the image below: +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "****"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".Location to put your import files."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "image::UG_import_directory.png[width\u003d\"500\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* `import nusmods_calendar` +"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Imports the timetable from `.\\import_export\\nusmods_calendar.ics` +"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "(where `.` represents the folder that the application is in.)"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".  Download your file from NUDMODS website:"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "+"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".Download your file from NUDMODS website."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "image::UG_import_step_1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "+"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".  Copy your desired _.ics_ file to the `import_export` folder:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "+"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".Copy your file to the correct folder."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "image::UG_import_step_2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "+"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".  Go back to FreeTime, and type in the command `import nusmods_calendar`  :"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "+"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".Type this, then press enter!"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "image::UG_import_step_3.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "+"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".  If the import was successful, FreeTime should look similar to this  :"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "+"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".Import Success! :)"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "image::UG_import_step_4.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "+"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c\u003cFeatures,Jump back to _FreeTime_\u0027s feature list\u003e\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "// end::import[]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "// tag::export[]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "[[export]]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d\u003d Export Timetable : `export` (`ex`)"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Use this command to export the *currently-displayed* timetable as an _.ics_ file."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "See the example below for a quick start! +"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Format: `export FILE_NAME`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "****"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* See the example below for a quick start!"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* Command parameters:"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** `FILE_NAME` refers to the name of the file that you want to export."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "*** Do not include the _.ics_ file extension when typing the command."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "*** In other words, type: `export my_timetable` instead of `export my_timetable.ics`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* Compatibility:"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** Can be imported back into FreeTime"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* Location of the exported file:"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** The file will be exported to the folder `import_export`, which is located in the same folder as the `FreeTime.jar` file."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "*** Please see the image below: +"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "****"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".Location of your exported files."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "image::UG_export_directory.png[width\u003d\"500\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* `export my_timetable` +"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Exports the displayed timetable to `.\\import_export\\my_timetable.ics` +"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "(where `.` represents the folder that the application is in.)"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".  Ensure that the timetable you want to export is being shown:"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".. type `select me` to display your own timetable."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".. type `select INDEX` to display one of your friend\u0027s timetable."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "+"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".Select the desired timetable."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "image::UG_export_step_1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "+"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".  Type the command `export my_timetable`:"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "+"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".Type the command."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "image::UG_export_step_2.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "+"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".  If the export was successful, Your timetable should be waiting for you in the folder  :"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "+"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".Exported file is in the import_export folder"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "image::UG_export_step_3.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "+"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c\u003cFeatures,Jump back to _FreeTime_\u0027s feature list\u003e\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "// end::export[]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[[undo]]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo` (`u`)"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Restores _FreeTime_ to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Undoable commands: `edit`, `add`, `delete`, `clear`, `import`."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `import my_file` +"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "`undo` (reverses the `import my_file` command) +"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "`listall` +"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `import my_file` +"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "`undo` (reverses the `import my_file` command) +"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c\u003cFeatures,Jump back to _FreeTime_\u0027s feature list\u003e\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[[redo]]"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo` (`r`)"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `delete mon 8-10` +"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "`undo` (reverses the `delete mon 8-10` command) +"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "`redo` (reapplies the `delete mon 8-10` command) +"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `delete mon 8-10` +"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* `delete mon 8-10` +"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "`undo` (reverses the `delete mon 8-10` command) +"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "`redo` (reapplies the `delete mon 8-10` command) +"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c\u003cFeatures,Jump back to _FreeTime_\u0027s feature list\u003e\u003e"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[[history]]"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history` (`hi`)"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c\u003cFeatures,Jump back to _FreeTime_\u0027s feature list\u003e\u003e"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::securityP2[]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "[[logout]]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Logging Out : `logout` (`lo`)"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "Command: `logout`"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "To use this command, you would have to be logged in first. Typing `logout` as seen in the figure below"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "return you back to the login page."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ".Logout Command entered into command line"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "image::Logout.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "// end::securityP2[]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c\u003cFeatures,Jump back to _FreeTime_\u0027s feature list\u003e\u003e"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "[[exit]]"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit` (`x`)"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "Closes the _FreeTime_ application."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "This command closes the application without logging you out. It is recommended to logout before doing this, or the changes to your timetable might be lost."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c\u003cFeatures,Jump back to _FreeTime_\u0027s feature list\u003e\u003e"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Application data is saved in the hard disk automatically, every time the data is changed. +"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous _FreeTime_ folder."
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 171,
      "nianfei97": 191,
      "alexiscatnip": 104,
      "-": 175,
      "bennchong": 67
    }
  },
  {
    "path": "docs/team/alexiscatnip.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d Khoo Yuan Hui - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d PROJECT: FreeTime"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "This Project Portfolio outlines my personal contributions to this team project."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "FreeTime is the product of my CS2113T project, done at National University of Singapore. In CS2113T, our team of 4 had to morph an existing application (AddressBook 4) into a different application, all the while ensuring the best coding practices and teamwork."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "FreeTime is a Time-Planner application. It is primarily aimed at Students. The most unique feature about FreeTime is that it has the ability to quickly display the times when a group of friends are able to meet up. +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Users can import existing timetables into FreeTime, and then proceed to do changes to it, such as adding or removing a timeslot. When they are satisfied with their timetable, they can view the times when they and their friends are mutually free, using the `freetime` feature."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "The main interaction is through a command-line interface (CLI), but the graphical user interface (GUI) is also available. It is written in Java, and has about 10 kLoC. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "This section is a brief summary of my personal contributions to this team project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* *Major enhancement*: *Import and Export Command*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** What it does: Allows the user to import and export timetables that are in the .ics format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** Justification (Import): It is a time consuming process for users to manually add their timeslots one-by-one. The import command makes users\u0027 lives so much easier, because adding a full timetable is now reduced to a 1-step process."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** Justification (Export): Having a export feature can allow users to share their personal timetables with their friends."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** Highlights: I learnt to implement a third-party library into an existing product. It also taught me to be meticulous in my coding, as there can be many unforeseen issues with certain implementations of code. For example, I ran into a timezone bug because I focused too much on implementing logic and left out on testing."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** Credits: biweekly third-party library (https://github.com/mangstadt/biweekly)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* *Minor enhancement*: *Save user\u0027s timetable across application instances*."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** What it does: Allows the application to save the timetable into the disk automatically. This means that it can remember our users\u0027 timetables across restarts."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003dalexiscatnip[Link to RepoSense]]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "*** Contributed to releases `v1.1` - `v1.4` (3 releases) on GitHub"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "*** Created documentation for import, export command and save timetable feature."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2113-AY1819S1-W13-1/main/pull/166[#116]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com/nusCS2113-AY1819S1/forum/issues/63[63])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "*** Integrated a third party library (biweekly) to the project (https://github.com/CS2113-AY1819S1-W13-1/main/pull/55[#55])"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Here are my contributions to the User Guide. I tried to write it so that users could easily understand the commands. I have also included step-by-step instructions for the examples, so that users can get started quickly."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "include::../UserGuide.adoc[tag\u003dimport]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "include::../UserGuide.adoc[tag\u003dexport]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "Here are my contributions to the Developer Guide. I tried to write it to be as informative as possible for Developers who are going to take over my code. They showcase my ability to write technical documentation targeting developers."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dimport_export_timetable]"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 71
    }
  },
  {
    "path": "docs/team/bennchong.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d Benjamin Chong Zhi Yi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":mainRepoPRURL: https://github.com/CS2113-AY1819S1-W13-1/main/pull"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":mainRepoIssueURL: https://github.com/CS2113-AY1819S1-W13-1/main/issue"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d PROJECT: FreeTime"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "---"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "FreeTime(TM) is a security-enabled desktop application that is used for finding mutually available slots between its users. This"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "available slot will be displayed for the user to choose from, which will be reflected in his timetable using our _FreeTime\u0027s_"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "This project portfolio would be introducing you to my team that has developed this product in the span of a semester. In addition to giving you a brief general overview of this application"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "feature, I would be going in depth into the details on how my own features are implemented. This is to give you a deeper understanding of what contributions that I have done within this project,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "and hopefully you would perhaps too be interested in this project of mines."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "So sit tight, and let me tell you more about _FreeTime_, and how it will make scheduling meetings easier."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d FreeTime(TM) Introduction"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "In addition to essential security features such as login and registering, we have a clean, minimalistic landing page that is user-friendly."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Users can import preexisting timetables that are taken from Google Calender or any other calender application that saves their data into the commonly used .ics format. This handy feature allows"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "quick integration for users coming from other timetable applications that lack _FreeTime_\u0027s feature."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "On top of having friends to look at their timetable, users are also grouped with groups according to what they have inputted. This is to easily select friends that are in the same group as you, which then sets the stage to find the mutually free slot among"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "this particular group of friends."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "NOTE: You can be part of multiple groups, or none at all"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Using the command `freetime`, you would be presented with a timetable that shows you what are your common free slots are."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Thus you are freed from the pains of finding a common free slot in huge groups."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "In this section, I would be briefly telling you about my contributions to this project, and any interesting points that you could find useful."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "* *Major enhancement*: Added *the ability to authenticate users* within _FreeTime_"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "** What it does: Allows the users to have unique access and control to his own timetable"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "** Justification: To be able to prevent others from editing your own timetable, and to facilitate different privacy levels."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "Privacy levels are given to users to have control over what they feel comfortable sharing between strangers and friends."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: Implementing the above is not trivial as I had to rewrite how the commands are parsed and executed, which are"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "then handled in SecurityManager. This is done on top of having to deal with new commands such as login, and restructuring"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "old command into register. I had to understand and improve on all modules to make them to work together in this new sytem."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: Used a hashing feature together with a salt to store user\u0027s password in json format. This is to improve security by"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "not storing users\u0027 password in plaintext, but encrypted securely."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003dbennchong[*Code contributed*]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* link:https://github.com/CS2113-AY1819S1-W13-1/main/pulls?utf8\u003d%E2%9C%93\u0026q\u003dis%3Apr+is%3Aclosed+author%3Abennchong[*Pull Requests Made*]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "* *Project Overheads*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to releases `v1.1` - `v1.4` (4 releases) on GitHub"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "*** link:https://github.com/CS2113-AY1819S1-W13-1/main/issues/24[Milestone issue tracker]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated Storage Module to include AppUsersJson {mainRepoPRURL}/63[#63]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "*** Changed AddressBookParser to accommodate Security Implementation {mainRepoPRURL}/153[#153]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated Screenshots in User Guide {mainRepoPRURL}/192[#192]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): {mainRepoPRURL}/64[#64], {mainRepoPRURL}/173[#173],"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "*** Fixed bugs in program {mainRepoPRURL}/75[#75], {mainRepoPRURL}/185[#185], {mainRepoPRURL}/186[#186]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d My User Guide Contributions"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "A User guide is given to the targeted audience of the application, and usually is written in a step-by-step way to guide"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": "new users to use the application."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bennchong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bennchong"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsecurity]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsecurityP2]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003d\u003d My Developer Guide Contribution"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bennchong"
        },
        "content": "On the other hand, a developer guide is written for technical stakeholders that are interested in the implementation"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bennchong"
        },
        "content": "of the methods, and might be working on extending the project."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bennchong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bennchong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bennchong"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddesignSecurity]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bennchong"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsecurityImplementation]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "bennchong": 84
    }
  },
  {
    "path": "docs/team/cjinting-nus.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d Cheng Jin Ting - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d PROJECT: FreeTime"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "_FreeTime_ is a desktop application targeted at students who have many projects that require meeting many people at different times."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "_FreeTime_ aims to reduce the hassle of find available timeslots in which everyone is mutually available."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "This project is part of the deliverables for the following modules offered by the School of Computing in the National University of Singapore:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* *CS2113T - Software Engineering and Object-Oriented Programming*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* *CS2101 - Communication for Computing Professionals*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "The user interacts with it using a Command Line Interface (CLI), and it has a Graphical User Interface (GUI) created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "This project portfolio shows my contributions to the project, which includes the learning the Java Programing Language and JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* *Major enhancement*: added the concept of *friends* and *the ability to friend/unfriend a user in the database*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "** What it does: Invoking the `friend` command will add the selected person to your friend list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "`unfriend` will do the remove an existing friend from the friend list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "** Justification: The idea of the application is to work as a social platform where users can look for other users with similar modules and to coordinate timetables with them."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "Before adding a particular user as a friend, the timetables and other personal information about the user will be obscured."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "This is to address privacy concerns of users revealing too much information to unknown people."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "** Highlights: Implementing this concept and commands required that the main UI to be modified and changes how the logic works fundamentally."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "I had to learn how to use JavaFX to manage the different panels to show the friends and users individually."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "The implementation too was challenging as it required changes to the main logic of the code and many tests were changed as a result."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* *Minor enhancement*: added a tag command that allows the user to search for persons by module code."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "This is to enhance the search feature in the case where there are too many users in the database."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003dcjinting-nus\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-05\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[*Code contributed*]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "*** Designed and updated the existing application icon and title."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "*** Added colors to group tags"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "*** Ensured consistency in the UserGuide."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "include::../UserGuide.adoc[tag\u003dtagcommand]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfriendcommand]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "include::../UserGuide.adoc[tag\u003dunfriendcommand]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfriend]"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 67
    }
  },
  {
    "path": "docs/team/nianfei97.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d Teh Nian Fei - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ":mainRepoPRURL: https://github.com/CS2113-AY1819S1-W13-1/main/pull"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ":mainRepoIssueURL: https://github.com/CS2113-AY1819S1-W13-1/main/issue"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ":F09-2RepoIssueURL: https://github.com/CS2113-AY1819S1-F09-2/main/issues"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d PROJECT: FreeTime"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "FreeTime is a desktop application that helps users coordinate their schedules with their friends or groupmates. It allows users to add and remove events from their timetables. It also uses these individual user timetables to generate a combined timetable showing when everyone the user wants to meet is available. +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "FreeTime receives input through a command line interface (CLI) while displaying output through a graphical user interface (GUI). It is written in Java, and has approximately 10 kLoC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "FreeTime was developed in a team of four throughout the course of a semester. It is modified from the Address Book (Level 4) (AB4) project by SE-EDU."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "FreeTime was developed as part of the module requirements for the following modules offered by the School of Computing, National University of Singapore: +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* CS2113 - Software Engineering \u0026 Object-Oriented Programming +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* CS2101 - Effective Communication for Computing Professionals +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "This project portfolio documents my contributions to the FreeTime project."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* *Major enhancement: Added timetables to FreeTime*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "** What it does: Implements timetables for each user and allows the user to add and remove timeslots from their own timetables. Additionally, allows users to determine when they can organise meetings such that everyone they want to meet can be present."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "** Justification: As it is difficult for students with varied and complex timetables to schedule meetings for their many group projects, FreeTime simplifies this process by automatically highlighting mutually free timeslots among different user timetables."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "** Highlights: This enhancement was challenging as it required the development of a completely new portion of the GUI for the displaying of timetables, which required proficiency in JavaFX, the software platform used to build FreeTime\u0027s GUI. Moreover, significant additions were made to the Model component to allow the in-app storage of timetables."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003dnianfei97\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-05\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[*Code contributed*]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "*** Managed releases `v1.1` - `v1.4` on GitHub (4 releases)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "** Community"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "*** PRs reviewed: Pull requests {mainRepoPRURL}/20[#20], {mainRepoPRURL}/63[#63], {mainRepoPRURL}/68[#68], {mainRepoPRURL}/153[#153]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "*** Reported bugs for other teams in the class: {F09-2RepoIssueURL}/159[1], {F09-2RepoIssueURL}/150[2], {F09-2RepoIssueURL}/146[3]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "*** Set up continuous integration (https://travis-ci.org/CS2113-AY1819S1-W13-1/main.svg?branch\u003dmaster[Travis], https://ci.appveyor.com/project/nianfei97/main/branch/master[Appveyor]) and coverage analysis tools (https://coveralls.io/github/CS2113-AY1819S1-W13-1/main?branch\u003dmaster[Coveralls]) for the project"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "** Miscellaneous enhancements to new and existing features:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "*** Added aliases for all commands: Pull request {mainRepoPRURL}/3[#3]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "*** Updated sample data loaded when FreeTime first loads up: Pull requests {mainRepoPRURL}/80[#80], {mainRepoPRURL}/167[#167], {mainRepoPRURL}/169[#169]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "*** Updated existing commands in AB4 to work with FreeTime: Pull requests {mainRepoPRURL}/82[#82], {mainRepoPRURL}/108[#108], {mainRepoPRURL}/109[#109]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "This section details my contributions to FreeTime\u0027s User Guide."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "include::../UserGuide.adoc[tag\u003dtimeslot]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfreecommand]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "This section details my contributions to FreeTime\u0027s Developer Guide."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtimetable]"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.LogoutEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.SuccessfulRegisterEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.AppUsers;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.Security;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.storage.AppUsersStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.storage.JsonAppUsersStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected AppUsers appUsers;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected Security security;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing FreeTime ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        AppUsersStorage appUsersStorage \u003d new JsonAppUsersStorage(config.getAppUsersFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        appUsers \u003d initUsers(appUsersStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, appUsersStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        security \u003d new SecurityManager(false, logic, appUsers);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs, security);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Returns a {@code AppUsers} using the file at {@code storage}\u0027s app users file path,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * or a new {@code AppUsers} with default configuration if errors occur when"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected AppUsers initUsers(AppUsersStorage storage) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Path usersFilePath \u003d storage.getAppUsersFilePath();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logger.info(\"Using users file : \" + usersFilePath);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        AppUsers initializedUsers;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            Optional\u003cAppUsers\u003e usersOptional \u003d storage.readAppUsers();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            initializedUsers \u003d usersOptional.orElse(new AppUsers());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            logger.warning(\"AppUsers file at \" + usersFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            initializedUsers \u003d new AppUsers();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            initializedUsers \u003d new AppUsers();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //Update users file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            storage.saveAppUsers(initializedUsers);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            logger.warning(\"Failed to save user file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return initializedUsers;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        logger.info(\"Starting FreeTime \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping FreeTime ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            //TODO Save Users Here"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void handleSuccessfulRegisterEvent(SuccessfulRegisterEvent event) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            storage.saveAppUsers(appUsers);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            logger.severe(\"Failed to save users \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Saves new users whenever someone logs out (Superset of the new users and prexisting ones)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleLogoutEvent(LogoutEvent logout) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            storage.saveAppUsers(appUsers);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            logger.severe(\"Failed to save users \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 3,
      "nianfei97": 1,
      "-": 201,
      "bennchong": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/AuthReturn.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Containing Commands return type with their string representation, and method to check whether its allowed"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public enum AuthReturn {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    COMMAND_ALLOWED, COMMAND_LOGOUTFIRST, COMMAND_LOGINFIRST, COMMAND_ERROR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/CommandsEnum.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.AddTimeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.DeleteTimeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.FreeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.FriendCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.LogoutCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.UiCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.UnfriendCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Containing Commands return type with their string representation, and method to check whether its allowed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public enum CommandsEnum {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    HELP(HelpCommand.COMMAND_WORD, HelpCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    EXIT(ExitCommand.COMMAND_WORD, ExitCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    REGISTER(RegisterCommand.COMMAND_WORD, RegisterCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    LOGIN(LoginCommand.COMMAND_WORD, LoginCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    UI(UiCommand.COMMAND_WORD),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    LOGOUT(LogoutCommand.COMMAND_WORD, LogoutCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    EDIT(EditCommand.COMMAND_WORD, EditCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    FIND(FindCommand.COMMAND_WORD, FindCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    LISTALL(ListCommand.COMMAND_WORD, ListCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    HISTORY(HistoryCommand.COMMAND_WORD, HistoryCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    UNDO(UndoCommand.COMMAND_WORD, UndoCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    REDO(RedoCommand.COMMAND_WORD, RedoCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    SELECT(SelectCommand.COMMAND_WORD, SelectCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    ADD(AddTimeCommand.COMMAND_WORD, AddTimeCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    DELETE(DeleteTimeCommand.COMMAND_WORD, DeleteTimeCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    FREE(FreeCommand.COMMAND_WORD, FreeCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    CLEAR(ClearCommand.COMMAND_WORD, ClearCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    FRIEND(FriendCommand.COMMAND_WORD, FriendCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    UNFRIEND(UnfriendCommand.COMMAND_WORD, UnfriendCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    GROUP(TagCommand.COMMAND_WORD, TagCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    IMPORT(ImportCommand.COMMAND_WORD, ImportCommand.COMMAND_WORD_ALIAS),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    EXPORT(ExportCommand.COMMAND_WORD, ExportCommand.COMMAND_WORD_ALIAS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final List\u003cString\u003e values;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    CommandsEnum(String ...values) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.values \u003d Arrays.asList(values);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Checks whether command is allowed in the current status"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param command Type of command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param isLoggedIn Status of application"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return Authreturn type to determine pass or error messages"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public AuthReturn isCommandAllowed(CommandsEnum command, boolean isLoggedIn) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        switch(command) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case EXIT:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return AuthReturn.COMMAND_ALLOWED;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case LOGIN:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case REGISTER:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case UI:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            if (isLoggedIn) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                return AuthReturn.COMMAND_LOGOUTFIRST;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                return AuthReturn.COMMAND_ALLOWED;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case LOGOUT:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case EDIT:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case LISTALL:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case HISTORY:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case UNDO:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case REDO:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case SELECT:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case FREE:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case CLEAR:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case FRIEND:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case UNFRIEND:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case GROUP:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case IMPORT:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case EXPORT:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            if (isLoggedIn) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                return AuthReturn.COMMAND_ALLOWED;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                return AuthReturn.COMMAND_LOGINFIRST;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return AuthReturn.COMMAND_ERROR;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public List\u003cString\u003e getValues() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return values;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Finds the correct CommandsEnum type from a string"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param name String of the command whether it be full or alias"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return the CommandsEnum Type"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static CommandsEnum find(String name) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        for (CommandsEnum commandsEnum : CommandsEnum.values()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            if (commandsEnum.getValues().contains(name)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                return commandsEnum;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private String appTitle \u003d \"FreeTime v1.4\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Path appUsersFilePath \u003d Paths.get(\"users.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Path getAppUsersFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return appUsersFilePath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 1,
      "-": 73,
      "bennchong": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    //messages thrown by {@code ParserUtil#parseImportExportFileName}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_PATH_TOO_LONG \u003d \"Destination file path is too long, consider making your \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"FILENAME shorter, or moving your application to a shorter directory, such as C:\\\\files\\\\\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_PATH_INVALID \u003d \"The path of the file was invalid.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_PATH_FORBIDDEN \u003d \"The FILENAME contained these forbidden characters: \\\\ or /\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 5,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/logic/LoginEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons.events.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/** Logins event that contains username and password for Security Manager*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class LoginEvent extends BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public LoginEvent(String username, String password) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String getPassword() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return \"Login Event\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/logic/RegisterSuccessEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons.events.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/** Event that carries username and password for SecurityManager*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class RegisterSuccessEvent extends BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public RegisterSuccessEvent(String username, String password) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String getPassword() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return \"Register Success\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/TimeTableChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/** Indicates the {@code TimeTable} in {@code Model} has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeTableChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public final TimeTable data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeTableChangedEvent(TimeTable data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeTable getNewTimeTable() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return \"Number of timeslots: \" + data.getTimeSlots().size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/security/GetAuthenticationEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons.events.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/***"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Indicates a successful login attempt"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class GetAuthenticationEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return \"Get Application Authentication State\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/security/LogoutEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons.events.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/***"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Event for logout"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class LogoutEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return \"User Logged Out\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/security/SendsAuthenticationStateEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons.events.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/** Indicates the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class SendsAuthenticationStateEvent extends BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private boolean isAuthenticated;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public SendsAuthenticationStateEvent(boolean isAuthenticated) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.isAuthenticated \u003d isAuthenticated;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean isAuthenticated() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return isAuthenticated;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return \"Authentication state replied\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/security/SuccessfulLoginEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons.events.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/***"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Indicates a successful login attempt"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class SuccessfulLoginEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return \"Login Success\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/security/UnsuccessfulLoginEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons.events.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/***"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Indicates a unsuccessful login attempt"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class UnsuccessfulLoginEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return \"Login Failure\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ExitRegisterEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class ExitRegisterEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return \"Register Window Exited\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ShowLoginEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class ShowLoginEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return \"Login Window Shown\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ShowRegisterEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class ShowRegisterEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return \"Register Window Shown\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/SuccessfulRegisterEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class SuccessfulRegisterEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return \"Successfully Registered New User\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/DateTimeConversionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Class containing utility functions to deal with date, time, datetime, timewhatever stuffs"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class DateTimeConversionUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static DateTimeConversionUtil instance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final String DEFAULT_ZONE_ID \u003d \"Asia/Shanghai\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private DateTimeConversionUtil() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static DateTimeConversionUtil getInstance() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            instance \u003d new DateTimeConversionUtil();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Gets the the next {@code LocalDateTime} of the {@code DayOfWeek} requested, with reference to now."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * ie: if {@code DayOfWeek} requested is Monday, then the LocalDateTime returned is the next monday from now."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * if today is monday, then return is today\u0027s date."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public LocalDateTime getNextLocalDateTime(LocalTime time, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(dayOfWeek);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        LocalDate nextDay \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                LocalDate.now(ZoneId.of(DEFAULT_ZONE_ID))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                        .with(TemporalAdjusters.nextOrSame(dayOfWeek));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        LocalDateTime localDateTime \u003d time.atDate(nextDay);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/IcsUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static biweekly.util.DayOfWeek.valueOfAbbr;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.ZoneOffset;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import biweekly.Biweekly;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import biweekly.ICalendar;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import biweekly.component.VEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import biweekly.io.text.ICalReader;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import biweekly.property.DateEnd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import biweekly.property.DateStart;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import biweekly.property.RecurrenceRule;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import biweekly.property.Summary;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import biweekly.util.Frequency;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import biweekly.util.Recurrence;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotOverlapException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Utility functions for the reading and writing of {@code TimeTable} objects from/to disk as .ics file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class IcsUtil {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(IcsUtil.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static IcsUtil instance;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private IcsUtil(){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static IcsUtil getInstance() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            instance \u003d new IcsUtil();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Returns the {@code TimeTable} from the .ics file specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * The data in the .ics file should not have timezone-related settings; unsupported for now."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param filePath                  Location of the .ics file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *                                  Cannot be null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param zoneId                    The timezone of the timetable."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *                                  Cannot be null."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws IOException              if any IO error occurs, or file is not found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws TimeSlotOverlapException if the file to be imported has overlapping {@code TimeSlot}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public TimeTable readTimeTableFromFile(Path filePath, ZoneId zoneId)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throws IOException, TimeSlotOverlapException, IllegalArgumentException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(zoneId);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ICalendar iCalendar;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            iCalendar \u003d readICalendarFromFile(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            logger.info(\"Failed to read: \" + filePath.toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new IOException(e);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return iCalendarToTimeTable(iCalendar, zoneId);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Saves {@code TimeTable} data to the .ics file specified."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * The timestamps in the saved .ics file will be in UTC."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param timeTable     The timetable to save."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *                      Cannot be null."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param filePath      Location to save the file to."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *                      Cannot be null."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param zoneId        timezone of the Timetable."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *                      Cannot be null."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws IOException  Thrown if there is an error writing to the file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void saveTimeTableToFile(TimeTable timeTable, ZoneId zoneId, Path filePath)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(timeTable);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(zoneId);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ICalendar iCalendar \u003d timeTableToICalendar(timeTable, zoneId);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            writeICalendarToFile(iCalendar, filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            logger.info(\"Failed to write to: \" + filePath.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new IOException (e);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Converts {@code ICalendar} to {@code TimeTable}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Non-recurring {@code VEvent} are ignored."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param iCalendar The {@code ICalendar} to convert."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *                  Cannot be null."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param zoneId    The TimeZone of the {@code TimeTable}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *                  Cannot be null."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private TimeTable iCalendarToTimeTable(ICalendar iCalendar, ZoneId zoneId)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throws TimeSlotOverlapException, IllegalArgumentException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(iCalendar);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(zoneId);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        TimeTable timeTable \u003d new TimeTable();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        for (VEvent vEvent : iCalendar.getEvents()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            //convert VEvent to TimeSlot"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            Optional\u003cTimeSlot\u003e optionalTimeSlot \u003d vEventToTimeSlot(vEvent, zoneId);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            if (optionalTimeSlot.isPresent()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                timeTable.addTimeSlot(optionalTimeSlot.get());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (timeTable.isEmpty()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            logger.info(\"No timeslots found in file.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            logger.info(\"At least 1 timeslot has been read from file.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return timeTable;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Converts {@code VEvent} to {@code Optional\u003cTimeSlot\u003e}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Non-recurring VEvents are ignored."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param vEvent        The {@code VEvent} to convert."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *                      Cannot be null."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param zoneId        The TimeZone of the {@code Optional\u003cTimeSlot\u003e}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private Optional\u003cTimeSlot\u003e vEventToTimeSlot(VEvent vEvent, ZoneId zoneId) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(vEvent);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(zoneId);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //each of these chunks extract/filter the vital information:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //Event\u0027s Start:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //get the starting date and time (UTC)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        DateStart dtStart \u003d vEvent.getDateStart();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //convert to simple Date (UTC)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Date startDate \u003d dtStart.getValue();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //use the simple Date to create an Instant. Instant objects are independent of timezone (UTC)."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Instant startInstant \u003d startDate.toInstant();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //derive the LocalDateTime (+8GMT) from the Instant and ZoneId"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        LocalDateTime startLdt \u003d LocalDateTime.ofInstant(startInstant, zoneId);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //Event\u0027s End:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //get the ending date and time (UTC)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        DateEnd dtEnd \u003d vEvent.getDateEnd();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //convert to simple Date (UTC)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Date endDate \u003d dtEnd.getValue();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //use the simple Date to create an {@code Instant}. Instant objects are independent of timezone (UTC)."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Instant endInstant \u003d endDate.toInstant();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //derive the LocalDateTime (+8GMT) from the Instant and ZoneId"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        LocalDateTime endLdt \u003d LocalDateTime.ofInstant(endInstant, zoneId);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //get summary (TimeSlot\u0027s Label)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Summary summary \u003d vEvent.getSummary();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String summaryStr \u003d (summary \u003d\u003d null) ? null : summary.getValue();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //ignore non-recurring events"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        RecurrenceRule recurrenceRule \u003d vEvent.getRecurrenceRule();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (recurrenceRule \u003d\u003d null) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //ignore events that are missing essential information."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if ((dtStart \u003d\u003d null) || (dtEnd \u003d\u003d null)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //after the above information extraction, we instantiate a TimeSlot with these info."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        LocalTime timeSlotStartTime \u003d startLdt.toLocalTime();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        LocalTime timeSlotEndTime \u003d endLdt.toLocalTime();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        DayOfWeek timeSlotDay \u003d startLdt.getDayOfWeek();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //TODO: Add (summary/label) to timetable object."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //Add timeslot to timetable"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        TimeSlot timeSlot \u003d new TimeSlot(timeSlotDay, timeSlotStartTime, timeSlotEndTime);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return Optional.of(timeSlot);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Converts {@code TimeTable} to {@code ICalendar}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param timeTable     The {@code TimeTable} to convert."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *                      Cannot be null."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param zoneId        the timezone of the timetable"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *                      Cannot be null."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private ICalendar timeTableToICalendar(TimeTable timeTable, ZoneId zoneId) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(timeTable);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(zoneId);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Collection\u003cTimeSlot\u003e timeSlots \u003d timeTable.getTimeSlots();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ICalendar iCalendar \u003d new ICalendar();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        for (TimeSlot timeSlot : timeSlots) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            VEvent vEvent \u003d timeSlotToWeeklyVEvent(timeSlot, zoneId, 1);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            iCalendar.addEvent(vEvent);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return iCalendar;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Converts a {@code TimeSlot} to a {@code VEvent} that recurs weekly, for {@code count} times."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * {@code zoneId} is required, because {@code VEvent} are in UTC,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *  but {@code TimeSlot} are in the user\u0027s timezone,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param timeSlot  The {@code TimeSlot} to convert."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *                  Cannot be null."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param count     The number of recurrences."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param zoneId    The timezone of the {@code TimeSlot}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private VEvent timeSlotToWeeklyVEvent(TimeSlot timeSlot, ZoneId zoneId, int count) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //TODO: protect against people who pass count \u003c\u003d 0"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //TODO: make comments/code more human readable."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(timeSlot);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(zoneId);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(count);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //extract data from {@code TimeSlot}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        LocalTime startTime \u003d timeSlot.getStartTime();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        LocalTime endTime \u003d timeSlot.getEndTime();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        DayOfWeek dayOfWeek \u003d timeSlot.getDayOfWeek();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String label \u003d timeSlot.getLabel();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //TODO: remove getAbbreviationFromDayOfWeek() from TimeSlot"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String abbreviation \u003d timeSlot.getAbbreviationFromDayOfWeek();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        VEvent vEvent \u003d new VEvent();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //write data to vEvent: set the recurrence rule"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Recurrence recurrence \u003d"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                new Recurrence.Builder(Frequency.WEEKLY).count(count).byDay(valueOfAbbr(abbreviation)).build();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        RecurrenceRule recurrenceRule \u003d new RecurrenceRule(recurrence);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        vEvent.setRecurrenceRule(recurrenceRule);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //write data to vEvent: set start-date"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //Get the local-datetime of the next time that the TimeSlot starts."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // \u003e If my timeslot is Friday 2pm-4pm, the local-datetime I want is the the next Friday\u0027s date, at 2pm."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        LocalDateTime startLdt \u003d DateTimeConversionUtil.getInstance().getNextLocalDateTime(startTime, dayOfWeek);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //get zone-offset"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ZoneOffset zoneOffset \u003d zoneId.getRules().getOffset(Instant.now());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //startInstant is an Instant ; Instant is independent of timezones."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Instant startInstant \u003d startLdt.toInstant(zoneOffset);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //dateStart (UTC)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Date dateStart \u003d Date.from(startInstant);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        vEvent.setDateStart(dateStart);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //write data to vEvent: set end-date"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //Get the local-datetime of the next time that the TimeSlot ends."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // \u003e If my timeslot is Friday 2pm-4pm, the local-datetime I want is the the next Friday\u0027s date, at 4pm."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        LocalDateTime endLdt \u003d DateTimeConversionUtil.getInstance().getNextLocalDateTime(endTime, dayOfWeek);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //endInstant is an Instant; Instant is independent of timezones."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Instant endInstant \u003d endLdt.toInstant(zoneOffset);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //get dateEnd (UTC)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Date dateEnd \u003d Date.from(endInstant);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        vEvent.setDateEnd(dateEnd);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //write data to {@code VEvent}: set summary (Module Name)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        vEvent.setSummary(label);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return vEvent;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Writes {@code ICalendar} object to {@code Path} specified"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param filePath      The location to write to."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *                      Cannot be null."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param iCalendar     The ICalendar object to write."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *                      Cannot be null."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws IOException  If any error occurs during write."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private void writeICalendarToFile(ICalendar iCalendar, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(iCalendar);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        File file \u003d filePath.toFile();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            //create parent folder if it does not exist."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            //create file if it does not exist."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            //Write using biweekly."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            Biweekly.write(iCalendar).go(file);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (IOException e) { //catch IOException thrown by .createNewFile() or .go()"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Returns the {@code ICalendar} object obtained from reading the .ics file at the {@code Path} specified"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param filePath      the location of the file to read from."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws IOException  if any IO error occurs during read."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private ICalendar readICalendarFromFile(Path filePath) throws IOException {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ICalendar iCalendar \u003d new ICalendar();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        File file \u003d filePath.toFile();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ICalReader reader;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            reader \u003d new ICalReader(file);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new IOException(); //throw IOException to indicate file-not-found."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            //for each event found, add them to the iCalendar"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            ICalendar tempICalendar;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            while ((tempICalendar \u003d reader.readNext()) !\u003d null) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                for (VEvent event : tempICalendar.getEvents()) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                    iCalendar.addEvent(event);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            //IOException thrown by readNext() - not able to read from stream"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return iCalendar;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 346
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.CommandsEnum;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityAuthenticationException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Parses the command to obtain command word and arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param commandText The command entered in the CLI"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return The specific Command Word"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    CommandsEnum parseCommandWord(String commandText) throws ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, SecurityAuthenticationException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /** Returns an unmodifiable view of the friends of the person */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    ObservableList\u003cPerson\u003e getFriendList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /** Returns an unmodifiable view of the non-friends of the person */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    ObservableList\u003cPerson\u003e getOtherList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /** Returns a a list of the to popular the MePanel */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    ObservableList\u003cPerson\u003e getMeList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Instantiates the user with a Person in database"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    void matchUserToPerson(String name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Clears the user instance when logging out"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    void clearUser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return the current authenticated User"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    User getUser();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Replaces the timetable shown with a new timetable"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param timeTable Timetable to replace"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    void updateTimeTable(TimeTable timeTable);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 9,
      "-": 26,
      "bennchong": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.CommandsEnum;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.User;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityAuthenticationException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public CommandsEnum parseCommandWord(String commandText) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        history.add(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throws CommandException, ParseException, SecurityAuthenticationException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logger.info(\"Parsing Arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Command command \u003d addressBookParser.parseCommandArguments();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return command.execute(model, history);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFriendList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return model.getFriendList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public ObservableList\u003cPerson\u003e getOtherList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return model.getOtherList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public ObservableList\u003cPerson\u003e getMeList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return model.getMeList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void matchUserToPerson(String name) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        model.matchUserToPerson(name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void clearUser() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        model.clearUser();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public User getUser() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return model.getUser();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void updateTimeTable(TimeTable timeTable) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        model.updateTimeTable(timeTable);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 13,
      "-": 47,
      "bennchong": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTimeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotOverlapException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Adds a {@code TimeSlot} to the {@code TimeTable} of the currently logged in {@code User}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class AddTimeCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \": Adds a timeslot to your timetable.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \"Parameters: DAYOFWEEK START - END\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Monday 8-10\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_ADD_TIMESLOT_SUCCESS \u003d \"Added timeslot: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_OVERLAP_TIMESLOT \u003d \"The timeslot added overlaps with an existing timeslot!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private final TimeSlot toAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Creates an {@code AddTimeCommand} to add the specified {@code TimeSlot}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public AddTimeCommand(TimeSlot timeSlot) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireNonNull(timeSlot);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.toAdd \u003d timeSlot;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person personToEdit \u003d model.getUser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person editedPerson;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            editedPerson \u003d createEditedPerson(personToEdit, toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (TimeSlotOverlapException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new CommandException(AddTimeCommand.MESSAGE_OVERLAP_TIMESLOT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.updateTimeTable(editedPerson.getTimeTable());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_TIMESLOT_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * and the {@code TimeSlot toAdd} added."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, TimeSlot toAdd) throws TimeSlotOverlapException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireAllNonNull(personToEdit, toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable timeTable \u003d new TimeTable(personToEdit.getTimeTable());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            timeTable.addTimeSlot(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (TimeSlotOverlapException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                personToEdit.getAddress(), personToEdit.getTags(), timeTable, personToEdit.getFriends());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (!(other instanceof AddTimeCommand)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        AddTimeCommand e \u003d (AddTimeCommand) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return toAdd.equals(e.toAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 1,
      "nianfei97": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotOverlapException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityAuthenticationException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Clears the user\u0027s {@code TimeTable}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Your timetable has been cleared!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws SecurityAuthenticationException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person personToEdit \u003d model.getUser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.updateTimeTable(editedPerson.getTimeTable());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Creates and returns a {@code Person} with the an empty {@code TimeTable}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit) throws TimeSlotOverlapException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireNonNull(personToEdit);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable timeTable \u003d new TimeTable();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                personToEdit.getAddress(), personToEdit.getTags(), timeTable, personToEdit.getFriends());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 21,
      "-": 19,
      "bennchong": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityAuthenticationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Command(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            SecurityAuthenticationException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "bennchong": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"thiscommandisdepreciated\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"youcannotcallthiscommand\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 2,
      "-": 53,
      "bennchong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteTimeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotDoesNotExistException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotOverlapException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Deletes a {@code TimeSlot} from the {@code TimeTable} of the currently logged in {@code User}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class DeleteTimeCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \": Deletes a timeslot from your timetable.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \"Parameters: DAYOFWEEK START - END\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Monday 8-10\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_DELETE_TIMESLOT_SUCCESS \u003d \"Deleted timeslot: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_TIMESLOT_DOES_NOT_EXIST \u003d \"The timeslot to be deleted does not exist!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private final TimeSlot toDelete;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Creates an {@code DeleteTimeCommand} to delete the specified timeSlot"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public DeleteTimeCommand(TimeSlot timeSlot) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireNonNull(timeSlot);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.toDelete \u003d timeSlot;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person personToEdit \u003d model.getUser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person editedPerson;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            editedPerson \u003d createEditedPerson(personToEdit, toDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (TimeSlotDoesNotExistException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new CommandException(DeleteTimeCommand.MESSAGE_TIMESLOT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.updateTimeTable(editedPerson.getTimeTable());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TIMESLOT_SUCCESS, toDelete));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * and the {@code TimeSlot toDelete} deleted."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, TimeSlot toDelete) throws TimeSlotOverlapException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireAllNonNull(personToEdit, toDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable timeTable \u003d new TimeTable(personToEdit.getTimeTable());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            timeTable.removeTimeSlot(toDelete);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (TimeSlotDoesNotExistException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                personToEdit.getAddress(), personToEdit.getTags(), timeTable, personToEdit.getFriends());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (!(other instanceof DeleteTimeCommand)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeleteTimeCommand e \u003d (DeleteTimeCommand) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return toDelete.equals(e.toDelete);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 1,
      "nianfei97": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Friend;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"ed\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits your details - \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \"Existing values will be overwritten by the input values. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \"NOTE: Not all fields have to present\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"GROUP]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + PREFIX_TAG + \"CS2101\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public EditCommand(EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person personToEdit \u003d model.getUser();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Name updatedName \u003d personToEdit.getName();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        TimeTable timeTable \u003d personToEdit.getTimeTable();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Set\u003cFriend\u003e friendList \u003d personToEdit.getFriends();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, timeTable, friendList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        private Set\u003cFriend\u003e friendList;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            setFriends(toCopy.friendList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return CollectionUtil.isAnyNonNull(phone, email, address, tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "         * Sets {@code friendList} to this object\u0027s {@code friendList}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "         * A defensive copy of {@code friendList} is used internally."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        public void setFriends(Set\u003cFriend\u003e friendList) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            this.friendList \u003d (friendList !\u003d null) ? new HashSet\u003c\u003e(friendList) : null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 26,
      "nianfei97": 1,
      "-": 198,
      "bennchong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"x\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.util.IcsUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.DeconflictTimeTable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Export a timetable as a .ICS file to a user-specified filePath."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"ex\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \": Exports the currently shown timetable to the file (.\\\\import_export\\\\FILENAME.ics). \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"FILENAME (without .ics extension) \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \" my_export_file_name\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_EXPORT_SUCCESS \u003d \"Exported timetable to %1$s.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_EMPTY \u003d \"Export Failed: Current Timetable is empty! \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_IO_ERROR \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            \"Export Failed: Failed to write the timetable to the path: \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_INVALID_TIMETABLE \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            \"Export Failed: Please select someone\u0027s timetable! \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Creates an ExportCommand to export the specified person\u0027s timetable as .ics file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public ExportCommand(Path filePath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //TODO: remove hardcoding of timezone in import and export command once TimeSlots are in UTC."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ZoneId zoneIdSingapore \u003d ZoneId.of(\"Asia/Shanghai\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        TimeTable timeTable \u003d model.getTimeTable();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (timeTable.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //do not allow export free-timetable"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (timeTable instanceof DeconflictTimeTable) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TIMETABLE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            IcsUtil.getInstance().saveTimeTableToFile(timeTable, zoneIdSingapore, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_IO_ERROR + filePath.toString()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EXPORT_SUCCESS, filePath.toString()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (!(other instanceof ExportCommand)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return filePath.equals(((ExportCommand) other).filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.updateFriendList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.updateOtherList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                        model.getCurrentFriendList().size() + model.getCurrentOtherList().size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 4,
      "nianfei97": 1,
      "-": 41,
      "bennchong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FreeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.User;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.DeconflictTimeTable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Selects a person identified using its displayed index from the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class FreeCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"free\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"fr\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \": Displays all common free timeslots between your timetable and the timetables of all selected people.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \"Parameters: [INDEX]... (must be positive integers)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 2 3\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_FREE_SUCCESS \u003d \"Displaying free timeslots with people: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private final Collection\u003cIndex\u003e targetIndices;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public FreeCommand(Collection \u003cIndex\u003e targetIndices) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireNonNull(targetIndices);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.targetIndices \u003d targetIndices;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        User user \u003d model.getUser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        List\u003cPerson\u003e friendList \u003d model.getCurrentFriendList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeconflictTimeTable deconflict \u003d new DeconflictTimeTable(user.getTimeTable());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (Index index : targetIndices) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d friendList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            Person person \u003d friendList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            deconflict.addTimeTable(person.getTimeTable());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.updateTimeTable(deconflict);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        StringBuilder resultString \u003d new StringBuilder(MESSAGE_FREE_SUCCESS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (Index index : targetIndices) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            resultString.append(friendList.get(index.getZeroBased()).getName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            resultString.append(\", \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        resultString.deleteCharAt(resultString.length() - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        resultString.deleteCharAt(resultString.length() - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return new CommandResult(resultString.toString().trim());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                || (other instanceof FreeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                \u0026\u0026 targetIndices.equals(((FreeCommand) other).targetIndices)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 1,
      "nianfei97": 75,
      "bennchong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FriendCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Friend;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Allows user to befriend a user from the others list, add a user to their friend list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class FriendCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"friend\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"af\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \": Adds the person selected with the index to the friends list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String MESSAGE_ADD_FRIEND_SUCCESS \u003d \"%s added to the friend list!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public FriendCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        List\u003cPerson\u003e otherList \u003d model.getCurrentOtherList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d otherList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person personToEdit \u003d otherList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person editedPerson \u003d personToEdit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person editedUser \u003d model.getUser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        editedPerson.getFriends().add(new Friend(model.getUser().getName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        editedUser.getFriends().add(new Friend(personToEdit.getName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.updatePerson(model.getUser(), editedUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_FRIEND_SUCCESS, editedPerson.getName().toString()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityAuthenticationException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"hi\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws SecurityAuthenticationException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "bennchong": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.util.IcsUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.Friend;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotOverlapException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Imports a timetable from a user-provided .ICS file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"im\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \": Imports your timetable from the file (.\\\\import_export\\\\FILENAME.ics). \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"FILENAME (without the .ics extension) \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \" my_import_file_name\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_IMPORT_SUCCESS \u003d \"Imported timetable at: %1$s.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_FILE_EMPTY \u003d \"Could not obtain any TimeTable data from: %1$s\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"\\nPlease check that the file is not empty, and contains timetable data.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_IO_ERROR \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            \"Failed to read the file at: %1$s.\\nPlease check the file exists.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String MESSAGE_FILE_OVERLAP_TIMESLOT \u003d \"Import failed because there was at\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \" least 1 overlapping timeslot in the file: %1$s. \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"Overlapping timeslots are currently not supported in FreeTime!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Creates an ImportCommand to import the .ics data, parse it, and add a {@code Person} with this timetable"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public ImportCommand(Path filePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Person personToEdit \u003d model.getUser();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(personToEdit);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        TimeTable timeTable;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            //TODO: remove hardcoding of timezone in import and export command once TimeSlots are in UTC."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            ZoneId zoneIdSingapore \u003d ZoneId.of(\"Asia/Shanghai\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            timeTable \u003d IcsUtil.getInstance().readTimeTableFromFile(filePath, zoneIdSingapore);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_IO_ERROR, filePath.toString()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (TimeSlotOverlapException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FILE_OVERLAP_TIMESLOT, filePath.toString()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (timeTable.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_FILE_EMPTY, filePath.toString()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            Person modifiedPerson \u003d createModifiedPerson(personToEdit, timeTable);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            model.updatePerson(personToEdit, modifiedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            model.updateTimeTable(modifiedPerson.getTimeTable());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_IMPORT_SUCCESS, filePath.toString()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Creates and returns a {@code Person}, who has their (@code TimeTable) changed. (all else same.)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static Person createModifiedPerson(Person personToEdit, TimeTable importedTimeTable) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Name updatedName \u003d personToEdit.getName();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Phone updatedPhone \u003d personToEdit.getPhone();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Email updatedEmail \u003d personToEdit.getEmail();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Address updatedAddress \u003d personToEdit.getAddress();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Set\u003cFriend\u003e updatedFriends \u003d personToEdit.getFriends();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                importedTimeTable, updatedFriends);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (!(other instanceof ImportCommand)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return filePath.equals(((ImportCommand) other).filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 3,
      "alexiscatnip": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityAuthenticationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listall\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws SecurityAuthenticationException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.updateFriendList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.updateOtherList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 3,
      "nianfei97": 1,
      "-": 21,
      "bennchong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.logic.LoginEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Login Command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class LoginCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"login\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"li\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Login has been attempted!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Please enter your username and password.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            + PREFIX_USERNAME + \"USERNAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            + PREFIX_PASSWORD + \"PASSWORD\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            + PREFIX_USERNAME + \"John Doe \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            + PREFIX_PASSWORD + \"testpassword \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final String username;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public LoginCommand(String username, String password) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        raise(new LoginEvent(username, password));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return new CommandResult(\"Login Attempted\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LogoutCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityAuthenticationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Logout the user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class LogoutCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"logout\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"lo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully Logged Out\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws SecurityAuthenticationException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (model.getUser() \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throw new SecurityAuthenticationException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        model.commandLogout();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.updateTimeTable(model.getUser().getTimeTable());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 2,
      "-": 28,
      "bennchong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RegisterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.logic.RegisterSuccessEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class RegisterCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"register\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"re\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Registers a person to the address book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            + PREFIX_USERNAME + \"USERNAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            + PREFIX_PASSWORD + \"PASSWORD \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            + PREFIX_USERNAME + \"John Goe \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            + PREFIX_PASSWORD + \"testpassword \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            + PREFIX_TAG + \"CS2113T \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person registered: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in FreeTime\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Creates an RegisterCommand without 2nd parameter for tests"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public RegisterCommand(Person person) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.password \u003d \"testtest\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Creates an RegisterCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public RegisterCommand(Person person, String password) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (model.hasPersonToRegister(toAdd)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        raise(new RegisterSuccessEvent(toAdd.getName().toString(), password));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                || (other instanceof RegisterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u0026\u0026 toAdd.equals(((RegisterCommand) other).toAdd));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "bennchong": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Selects a person identified using its displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String ARGS_ME \u003d \"me\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \": Selects yourself or the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 OR \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + ARGS_ME;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public SelectCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.targetIndex \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (targetIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            model.updateTimeTable(model.getUser().getTimeTable());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, ARGS_ME));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            List\u003cPerson\u003e friendList \u003d model.getCurrentFriendList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d friendList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            model.updateTimeTable(friendList.get(targetIndex.getZeroBased()).getTimeTable());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            String namePerson \u003d model.getCurrentFriendList()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                    .get(targetIndex.getZeroBased()).getName().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, namePerson));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (!(other instanceof SelectCommand)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        SelectCommand otherSelectCommand \u003d (SelectCommand) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (targetIndex \u003d\u003d null \u0026\u0026 otherSelectCommand.targetIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (targetIndex.equals(otherSelectCommand.targetIndex)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 3,
      "nianfei97": 39,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.tag.TagsContainsKeywords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Find and display the persons with the same tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Allows one to find the friends of similar tags"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"group\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"g\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \"the specified tags (case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2101\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final TagsContainsKeywords tagsKeywords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public TagCommand(TagsContainsKeywords tagsKeywords) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.tagsKeywords \u003d tagsKeywords;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.updateFriendList(tagsKeywords);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.updateOtherList(tagsKeywords);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                        model.getCurrentFriendList().size() + model.getCurrentOtherList().size()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                || (other instanceof TagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u0026\u0026 tagsKeywords.equals(((TagCommand) other).tagsKeywords)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 47,
      "bennchong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UiCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.ShowLoginEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityAuthenticationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class UiCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ui\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully Displayed UI\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws SecurityAuthenticationException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        raise(new ShowLoginEvent());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.updateTimeTable(model.getUser().getTimeTable());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 2,
      "-": 28,
      "bennchong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnfriendCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Adds a user from the frined list to the others list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class UnfriendCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unfriend\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"uf\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \": Removes the person with the index from the friends list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String MESSAGE_REMOVE_FRIEND_SUCCESS \u003d \"%s removed from the friend list!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public UnfriendCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        List\u003cPerson\u003e friendList \u003d model.getCurrentFriendList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d friendList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person personToEdit \u003d friendList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person editedPerson \u003d personToEdit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person editedUser \u003d model.getUser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        editedPerson.getFriends().removeIf(p -\u003e p.friendName.equals(model.getUser().getName()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        editedUser.getFriends().removeIf(p -\u003e p.friendName.equals(editedPerson.getName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.updatePerson(model.getUser(), editedUser);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMOVE_FRIEND_SUCCESS, editedPerson.getName().toString()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 52,
      "bennchong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTimeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.AddTimeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Parses input arguments and creates a new {@code AddTimeCommand} object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class AddTimeCommandParser extends ParserClass implements Parser\u003cAddTimeCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTimeCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * and returns an {@code AddTimeCommand} object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public AddTimeCommand parse (String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            TimeSlot timeSlot \u003d ParserUtil.parseTimeSlot(args.trim());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return new AddTimeCommand(timeSlot);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTimeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 24,
      "bennchong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.CommandsEnum;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.AddTimeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.DeleteTimeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.FreeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.commands.FriendCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.LogoutCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.UiCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.commands.UnfriendCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private String commandWord;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private String arguments;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return the CommandsEnum constants which represents a command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public CommandsEnum parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //Returns the correct command enum constant"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        CommandsEnum commandtype \u003d CommandsEnum.find(commandWord);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (commandtype \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return commandtype;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Parses the arguments"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return the command to be executed"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @throws ParseException when arguments are not valid"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Command parseCommandArguments() throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case RegisterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case RegisterCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return new RegisterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case EditCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case SelectCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case ClearCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case FindCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case ListCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case LogoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case LogoutCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return new LogoutCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case HistoryCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case ExitCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case HelpCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case UndoCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case RedoCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        case TagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        case TagCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return new TagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        case FriendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        case FriendCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return new FriendCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        case UnfriendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        case UnfriendCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return new UnfriendCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        case ImportCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        case ExportCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case AddTimeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case AddTimeCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return new AddTimeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case DeleteTimeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case DeleteTimeCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return new DeleteTimeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        case FreeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case FreeCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return new FreeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case LoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case LoginCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return new LoginCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case UiCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return new UiCommand();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 15,
      "nianfei97": 24,
      "alexiscatnip": 10,
      "-": 80,
      "bennchong": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"pw/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 1,
      "-": 12,
      "bennchong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteTimeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.DeleteTimeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Parses input arguments and creates a new {@code DeleteTimeCommand} object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class DeleteTimeCommandParser extends ParserClass implements Parser\u003cDeleteTimeCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTimeCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * and returns an {@code DeleteTimeCommand} object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public DeleteTimeCommand parse (String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            TimeSlot timeSlot \u003d ParserUtil.parseTimeSlot(args.trim());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return new DeleteTimeCommand(timeSlot);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTimeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 24,
      "bennchong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class EditCommandParser extends ParserClass implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        /*if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new EditCommand(editPersonDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 5,
      "-": 66,
      "bennchong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class ExportCommandParser extends ParserClass implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (args.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            Path path \u003d ParserUtil.parseImportExportFileName(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return new ExportCommand(path);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 25,
      "bennchong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class FindCommandParser extends ParserClass implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "bennchong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FreeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.FreeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Parses input arguments and creates a new {@code FreeCommand} object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class FreeCommandParser extends ParserClass implements Parser\u003cFreeCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FreeCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * and returns an {@code FreeCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public FreeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            Collection \u003cIndex\u003e indices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            for (String string : Arrays.asList(args.trim().split(\"\\\\s+\"))) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                indices.add(ParserUtil.parseIndex(string));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return new FreeCommand(indices);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FreeCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 32,
      "bennchong": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FriendCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.commands.FriendCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Parses arguments and creates a new FriendCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class FriendCommandParser extends ParserClass implements Parser\u003cFriendCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FriendCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * and returns an FriendCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public FriendCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return new FriendCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FriendCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 25,
      "bennchong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class ImportCommandParser extends ParserClass implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (args.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            Path path \u003d ParserUtil.parseImportExportFileName(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return new ImportCommand(path);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 25,
      "bennchong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LoginCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Parses the arguments of tag command and returns as a Tag object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class LoginCommandParser extends ParserClass implements Parser\u003cLoginCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TagCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * and returns an TagCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public LoginCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        String username \u003d argMultimap.getValue(PREFIX_USERNAME).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        String password \u003d argMultimap.getValue(PREFIX_PASSWORD).get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return new LoginCommand(username, password);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityAuthenticationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    T parse(String userInput) throws ParseException, SecurityAuthenticationException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "bennchong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Represents a Parser Class with EventsCenter"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public abstract class ParserClass {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ParserClass() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ParserClass(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final HashMap\u003cString, DayOfWeek\u003e DAY_OF_WEEK_MAP \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static final String IMPORT_EXPORT_FOLDER \u003d \"import_export\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DAY_OF_WEEK_MAP.put(\"MON\", DayOfWeek.MONDAY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DAY_OF_WEEK_MAP.put(\"TUE\", DayOfWeek.TUESDAY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DAY_OF_WEEK_MAP.put(\"WED\", DayOfWeek.WEDNESDAY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DAY_OF_WEEK_MAP.put(\"THU\", DayOfWeek.THURSDAY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DAY_OF_WEEK_MAP.put(\"FRI\", DayOfWeek.FRIDAY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DAY_OF_WEEK_MAP.put(\"SAT\", DayOfWeek.SATURDAY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DAY_OF_WEEK_MAP.put(\"SUN\", DayOfWeek.SUNDAY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Parses a {@code String password} into a {@code password}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static String parsePassword(String pw) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        requireNonNull(pw);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        String trimmedName \u003d pw.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (pw.length() \u003c 8) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throw new ParseException(\"Password has to be of at least 8 characters\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return new String(pw);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Parses the {@code String} representation of a {@code TimeSlot} into a {@code TimeSlot} object"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static TimeSlot parseTimeSlot (String timeslot) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        requireNonNull(timeslot);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        String trimmedTimeSlot \u003d timeslot.trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (!TimeSlot.isValidTimeSlot(trimmedTimeSlot)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new ParseException(TimeSlot.MESSAGE_GENERAL_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        String dayString \u003d trimmedTimeSlot.split(\"\\\\s+\", 2)[0];"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DayOfWeek day;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            day \u003d parseDay(dayString);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new ParseException((TimeSlot.MESSAGE_CANNOT_PARSE_DAY));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        String timeRangeString \u003d trimmedTimeSlot.split(\"\\\\s+\", 2)[1];"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        String startString \u003d timeRangeString.split(\"-\", 2)[0].trim();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        String endString \u003d timeRangeString.split(\"-\", 2)[1].trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        LocalTime startTime;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        LocalTime endTime;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            startTime \u003d parseTime(startString);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            endTime \u003d parseTime(endString);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new ParseException((TimeSlot.MESSAGE_CANNOT_PARSE_TIME));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            TimeSlot toReturn \u003d new TimeSlot(day, startTime, endTime);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return toReturn;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new ParseException(TimeSlot.MESSAGE_INVALID_TIME_SLOT);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Parses a string and returns a DayOfWeek"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param dayString String to be parsed"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @return DayOfWeek of String"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws IllegalArgumentException if string cannot be parsed"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static DayOfWeek parseDay(String dayString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (DAY_OF_WEEK_MAP.containsKey(dayString.toUpperCase())) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return DAY_OF_WEEK_MAP.get(dayString.toUpperCase());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                return DayOfWeek.valueOf(dayString.toUpperCase());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Parses {@code timeString} according to various defined formats into a {@code LocalTime} object"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param timeString {@code String} to be parsed"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @return {@code LocalTime} object representing {@code timeString}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws DateTimeParseException if {@code timeString} cannot be parsed"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static LocalTime parseTime(String timeString) throws DateTimeParseException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (timeString.contains(\":\") \u0026\u0026 timeString.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            format \u003d DateTimeFormatter.ofPattern(\"H:mm\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else if (timeString.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            format \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else if (timeString.length() \u003d\u003d 3) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            format \u003d DateTimeFormatter.ofPattern(\"Hmm\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else if (timeString.length() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            format \u003d DateTimeFormatter.ofPattern(\"HH\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else if (timeString.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            format \u003d DateTimeFormatter.ofPattern(\"H\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return LocalTime.parse(timeString, format);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Parses a {@code String fileName} into a {@code Path}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * The returned Path is at [.\\\\import_export\\\\[fileName].ics], see {@code ImportCommand} and {@code ExportCommand}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public static Path parseImportExportFileName (String fileName) throws ParseException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(fileName);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String trimmedFileName \u003d fileName.trim();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String fullFileName \u003d trimmedFileName + \".ics\";"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //Check if any slash is being used. do not allow user to access folders.."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String slash \u003d \".*[/\\\\\\\\].*\"; //very confusing! angery!"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (trimmedFileName.matches(slash)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new ParseException (Messages.MESSAGE_PATH_FORBIDDEN);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // Check destination path length."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // throw exception if the created file\u0027s directory would be greater than 250 char,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // (since windows filesystem has problems with long directories)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String applicationPath \u003d System.getProperty(\"user.dir\"); //the location of the .jar"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String filePath \u003d applicationPath + \"\\\\\" + IMPORT_EXPORT_FOLDER + \"\\\\\" + fullFileName;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (filePath.length() \u003e 250) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new ParseException (Messages.MESSAGE_PATH_TOO_LONG);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //create the Path"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Path path;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        } catch (InvalidPathException e) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_PATH_INVALID);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 90,
      "alexiscatnip": 42,
      "-": 124,
      "bennchong": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RegisterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Friend;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Parses input arguments and creates a new RegisterCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class RegisterCommandParser extends ParserClass implements Parser\u003cRegisterCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RegisterCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * and returns an RegisterCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public RegisterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RegisterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_USERNAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        String password \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).orElse(\"\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).orElse(\"\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).orElse(\"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        TimeTable timeTable \u003d new TimeTable();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Set\u003cFriend\u003e friendList \u003d new HashSet\u003cFriend\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList, timeTable, friendList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return new RegisterCommand(person, password);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 5,
      "-": 43,
      "bennchong": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class SelectCommandParser extends ParserClass implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (args.trim().equals(SelectCommand.ARGS_ME)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return new SelectCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                return new SelectCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 3,
      "-": 28,
      "bennchong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TagCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.tag.TagsContainsKeywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Parses the arguments of tag command and returns as a Tag object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class TagCommandParser extends ParserClass implements Parser\u003cTagCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TagCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * and returns an TagCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public TagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d Arrays.asList(tagKeywords); // Passing it a collection"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new TagCommand(new TagsContainsKeywords(ParserUtil.parseTags(tagSet)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 32,
      "bennchong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnfriendCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.commands.UnfriendCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Parses input and creates a new UnfriendCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class UnfriendCommandParser extends ParserClass implements Parser\u003cUnfriendCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnfriendCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * and returns an UnfriendCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public UnfriendCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return new UnfriendCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnfriendCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 26,
      "bennchong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Returns true if a person with the same name as {@code person} exists in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean hasPersonToRegister(Person person) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return persons.containsToRegister(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 120,
      "bennchong": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /** Returns the TimeTable */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    TimeTable getTimeTable();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Returns true if a person with the same name alone exists in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    boolean hasPersonToRegister(Person person);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Replaces the timetable shown with a new timetable"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param timeTable Timetable to replace"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    void updateTimeTable(TimeTable timeTable);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Update the friend list to show the current"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    void updateFriendList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Updates the others list to show current"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    void updateOtherList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Return the friends list of the current user"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    ObservableList\u003cPerson\u003e getFriendList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Return the current friend list with the predicates still set"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    ObservableList\u003cPerson\u003e getCurrentFriendList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Return the current other list with the predicate still set"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    ObservableList\u003cPerson\u003e getCurrentOtherList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Return the non-friends list of the current user"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    ObservableList\u003cPerson\u003e getOtherList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Returns a list with just the current user"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    ObservableList\u003cPerson\u003e getMeList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Instantiates the user with a Person in database"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    void matchUserToPerson(String name);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Clears the user instance when logging out"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    void clearUser();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return the current authenticated User"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    User getUser();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * For CLI Logout to call to raise event"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    void commandLogout();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 35,
      "nianfei97": 10,
      "-": 78,
      "bennchong": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.commons.events.model.TimeTableChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.LogoutEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.CombinedFriendPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.CombinedOtherPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.FriendListPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.OtherListPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final FilteredList\u003cPerson\u003e friendList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final FilteredList\u003cPerson\u003e otherList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private TimeTable timeTable;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private ObservableList\u003cPerson\u003e list;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, userPrefs, timeTable."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendList \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        otherList \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTable \u003d new TimeTable();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        user \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeTable getTimeTable() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return timeTable;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (user !\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            matchUserToPerson(user.getName().toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /** Raises an event to indicate the timetable has changed */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private void indicateTimeTableChanged() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        raise(new TimeTableChangedEvent(timeTable));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean hasPersonToRegister(Person person) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return versionedAddressBook.hasPersonToRegister(person);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void updateTimeTable(TimeTable timeTable) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireNonNull(timeTable);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.timeTable \u003d timeTable;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        indicateTimeTableChanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public void updateFriendList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendList.setPredicate(combinedFriendPredicate(predicate, friendsPredicateFromPerson(user)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public void updateOtherList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        otherList.setPredicate(combinedOtherPredicate(predicate, othersPredicateFromPerson(user)));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFriendList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendList.setPredicate(friendsPredicateFromPerson(user));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return FXCollections.unmodifiableObservableList(friendList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public ObservableList\u003cPerson\u003e getCurrentFriendList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return FXCollections.unmodifiableObservableList(friendList);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public ObservableList\u003cPerson\u003e getCurrentOtherList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return FXCollections.unmodifiableObservableList(otherList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public ObservableList\u003cPerson\u003e getOtherList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        otherList.setPredicate(othersPredicateFromPerson(user));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return FXCollections.unmodifiableObservableList(otherList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public ObservableList\u003cPerson\u003e getMeList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        filteredPersons.setPredicate(p -\u003e p.getName().equals(user.getName()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                \u0026\u0026 timeTable.equals(other.timeTable);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public FriendListPredicate friendsPredicateFromPerson(Person person) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new FriendListPredicate(person);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public OtherListPredicate othersPredicateFromPerson(Person person) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new OtherListPredicate(person);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Combines the predicates to allow SetPredicate to be called"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * @param friendListPredicate"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public CombinedFriendPredicate combinedFriendPredicate(Predicate\u003cPerson\u003e predicate,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                                                           FriendListPredicate friendListPredicate) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new CombinedFriendPredicate(predicate, friendListPredicate);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public CombinedOtherPredicate combinedOtherPredicate(Predicate\u003cPerson\u003e predicate,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                                                         OtherListPredicate otherListPredicate) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new CombinedOtherPredicate(predicate, otherListPredicate);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void matchUserToPerson(String name) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        list \u003d versionedAddressBook.getPersonList();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //Loops through personlist to get matched name Person Class"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        for (Person person : list) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            if (name.equals(person.getName().toString())) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                this.user \u003d new User(person.getData());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void clearUser() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.user \u003d null;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public User getUser() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return this.user;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void commandLogout() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        raise(new LogoutEvent());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 65,
      "nianfei97": 25,
      "-": 149,
      "bennchong": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/User.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.person.UserParameterHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/***"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Represents the authenticated User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class User extends Person {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public User(UserParameterHelper param) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        super(param.getName(), param.getPhone(), param.getEmail(), param.getAddress(), param.getTags(),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                param.getTimeTable(), param.getFriendList());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param name of the person that you are trying to find as a friend"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return boolean whether name is found as a friend"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //public boolean isFriend(String name){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //public void addFriend(String name){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //public void removeFriend(String name){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        setGuiSettings(1280, 720, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 1,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Returns true if a given string is a valid address."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (test.equals(\"\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 1,
      "-": 56,
      "bennchong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/CombinedFriendPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Combines the predicates to allow SetPredicate to be called"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class CombinedFriendPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final Predicate\u003cPerson\u003e predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final FriendListPredicate friendListPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public CombinedFriendPredicate(Predicate\u003cPerson\u003e predicate, FriendListPredicate friendListPredicate) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.friendListPredicate \u003d friendListPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        if (predicate.test(person) \u0026\u0026 friendListPredicate.test(person)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/CombinedOtherPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Combines the predicates to allow SetPredicate to be called"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class CombinedOtherPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final Predicate\u003cPerson\u003e predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final OtherListPredicate otherListPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public CombinedOtherPredicate(Predicate\u003cPerson\u003e predicate, OtherListPredicate otherListPredicate) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.otherListPredicate \u003d otherListPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        if (predicate.test(person) \u0026\u0026 otherListPredicate.test(person)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/DeconflictTimeTable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotNotOverlapException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Represents a deconflicted {@code TimeTable}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Unlike {@code TimeTable}, any {@code TimeSlot}s added to {@code DeconflictTimeTable} will merge with any"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * {@code TimeSlot}s that it overlaps with."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * As such, the overwritten method {@code addTimeSlot()} does not throw {@code TimeSlotOverlapException}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class DeconflictTimeTable extends TimeTable {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final Color DECONFLICT_TIMESLOT_COLOR \u003d Color.RED;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final Color DECONFLICT_INVERSE_TIMESLOT_COLOR \u003d Color.LIGHTGREEN;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final LocalTime DEFAULT_START \u003d LocalTime.parse(\"10:00\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final LocalTime DEFAULT_END \u003d LocalTime.parse(\"19:00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public DeconflictTimeTable() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public DeconflictTimeTable(TimeTable input) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        addTimeTable(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Adds {@code toAdd} to the {@code DeconflictTimeTable}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toAdd {@code TimeTable} to add"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void addTimeTable(TimeTable toAdd) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (TimeSlot timeSlot : toAdd.getTimeSlots()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            addTimeSlot(timeSlot);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Adds {@code toAdd} to the {@code DeconflictTimeTable}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toAdd {@code TimeSlot} to add"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void addTimeSlot(TimeSlot toAdd) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot merged \u003d new TimeSlot(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (TimeSlot overlap : findOverlapOrAdjacent(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                merged.mergeInto(overlap);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            } catch (TimeSlotNotOverlapException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                // This should not happen since findOverlapOrAdjacent() only returns timeslots that can be merged"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            removeTimeSlot(overlap);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        merged.setColor(DECONFLICT_TIMESLOT_COLOR);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        addTimeSlotWithoutColor(merged);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Determines which {@code TimeSlot}s in this {@code TimeTable} overlaps or is adjacent with {@code toCheck}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toCheck the {@code TimeSlot} to be checked against"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @return {@code Collection} containing overlapping {@code TimeSlot}s"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public Collection\u003cTimeSlot\u003e findOverlapOrAdjacent(TimeSlot toCheck) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection \u003cTimeSlot\u003e toReturn \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (TimeSlot timeSlot : timeSlots) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            if (timeSlot.isOverlap(toCheck) || timeSlot.isAdjacent(toCheck)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                toReturn.add(timeSlot);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Produces an inverse of the current {@code DeconflictTimeTable}, i.e. a {@code DeconflictTimeTable} with"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * {@code TimeSlot}s corresponding to the blanks in this {@code DeconflictTimeTable}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Used for showing green slots in the UI"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @return Inverse of the current {@code DeconflictTimeTable}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public DeconflictTimeTable getInverse() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeconflictTimeTable toReturn \u003d new DeconflictTimeTable();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TreeMap\u003cDayOfWeek, TreeSet \u003cTimeSlot\u003e\u003e splitTimeSlots \u003d splitByDay();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        LocalTime currStart \u003d getEarliest().isBefore(DEFAULT_START) ? getEarliest() : DEFAULT_START;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        LocalTime currEnd \u003d getLatest().isAfter(DEFAULT_END) ? getLatest() : DEFAULT_END;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (DayOfWeek day : splitTimeSlots.keySet()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            if (splitTimeSlots.get(day).isEmpty()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                toReturn.addTimeSlotWithoutColor("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                        new TimeSlot(day, currStart, currEnd, DECONFLICT_INVERSE_TIMESLOT_COLOR));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                TreeSet\u003cTimeSlot\u003e currSet \u003d splitTimeSlots.get(day);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                if (!currStart.equals(currSet.first().getStartTime())) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                    toReturn.addTimeSlotWithoutColor("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                            new TimeSlot(day, currStart, currSet.first().getStartTime(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                                    DECONFLICT_INVERSE_TIMESLOT_COLOR));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                for (TimeSlot curr : currSet) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                    if (currSet.higher(curr) !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                        TimeSlot next \u003d currSet.higher(curr);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                        toReturn.addTimeSlotWithoutColor("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                                new TimeSlot(day, curr.getEndTime(), next.getStartTime(),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                                        DECONFLICT_INVERSE_TIMESLOT_COLOR));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                if (!currEnd.equals(currSet.last().getEndTime())) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                    toReturn.addTimeSlotWithoutColor("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                            new TimeSlot(day, currSet.last().getEndTime(), currEnd,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                                    DECONFLICT_INVERSE_TIMESLOT_COLOR));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Splits up the {@code TimeSlot}s in this {@code DeconflictTimeTable} by day, and sorts the {@code TimeSlot}s"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @return {@code TreeMap} containing the {@code TimeSlot}s split by day"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private TreeMap\u003cDayOfWeek, TreeSet \u003cTimeSlot\u003e\u003e splitByDay() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TreeMap\u003cDayOfWeek, TreeSet\u003cTimeSlot\u003e\u003e toReturn \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (DayOfWeek day : DayOfWeek.values()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            toReturn.put(day, new TreeSet\u003c\u003e());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (TimeSlot timeSlot : timeSlots) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            toReturn.get(timeSlot.getDayOfWeek()).add(timeSlot);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (test.equals(\"\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "bennchong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Friend.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Represents the list of friends that a user can have"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class Friend {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Friend names must be one of the persons in the list.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public final Name friendName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public Friend(Name friendName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        requireNonNull(friendName);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.friendName \u003d friendName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public Name getFriendName() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return friendName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return friendName.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                || (other instanceof Friend // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u0026\u0026 friendName.equals(((Friend) other).friendName)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return friendName.hashCode();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/FriendListPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Creates a predicate from the Person to be used to create the friend list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class FriendListPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private Person currentUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public FriendListPredicate(Person currentUser) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.currentUser \u003d currentUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Set\u003cFriend\u003e friendList \u003d currentUser.getFriends();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        if (currentUser.getName().equals(person.getName())) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        for (Friend friend : friendList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            if (person.getName().equals(friend.getFriendName())) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/OtherListPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Creates a predicate to be used to find the non-friends in persons list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class OtherListPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final Person currentUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public OtherListPredicate(Person currentUser) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.currentUser \u003d currentUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Set\u003cFriend\u003e otherList \u003d currentUser.getFriends();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        if (currentUser.getName().equals(person.getName())) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        for (Friend other : otherList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            if (person.getName().equals(other.getFriendName())) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    //Timetable field (Currently only one)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private final TimeTable timeTable;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    // Friend list of the person"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private Set\u003cFriend\u003e friendList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                  Set\u003cTag\u003e tags, TimeTable timeTable, Set\u003cFriend\u003e friendList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, timeTable, friendList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.friendList \u003d friendList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.timeTable \u003d timeTable;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public TimeTable getTimeTable() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return timeTable;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Returns an immutable Friend set"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public Set\u003cFriend\u003e getFriends() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return friendList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Returns true if both persons of the same name"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean isSamePersonForRegister(Person otherPerson) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u0026\u0026 otherPerson.getFriends().equals(getFriends())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                \u0026\u0026 otherPerson.getTimeTable().equals(getTimeTable());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .append(\" ,Phone: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .append(\" ,Email: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .append(\" ,Address: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .append(\" ,Groups: \");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public UserParameterHelper getData() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return new UserParameterHelper(this.name, this.phone, this.email, this.address, this.tags,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                this.timeTable, this.friendList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 14,
      "nianfei97": 8,
      "alexiscatnip": 1,
      "-": 116,
      "bennchong": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (test.equals(\"\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "bennchong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TimeSlot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotNotOverlapException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Represents a single {@code TimeSlot} to be placed inside a {@code TimeTable}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeSlot implements Comparable\u003cTimeSlot\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_GENERAL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            \"A timeslot should have a day of week (Monday, Tue), a start time, and an end time.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_CANNOT_PARSE_DAY \u003d \"Accepted day format: Monday, Mon\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_CANNOT_PARSE_TIME \u003d \"Accepted time format: 8:00-10:00, 8-10\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME_SLOT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            \"Invalid timeslot, check that your timeslot makes sense.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + \"FreeTime uses the 24-hour clock system, so please use \u002710-14\u0027 instead of \u002710-2\u0027.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            \"\\\\w+(\\\\s*)\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \"([0-9]|[0-1][0-9]|[2][0-3])[:]?[0-5]?[0-9]?\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \"(\\\\s*)[-](\\\\s*)\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            + \"([0-9]|[0-1][0-9]|[2][0-3])[:]?[0-5]?[0-9]?\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final Color DEFAULT_COLOR \u003d Color.BLACK;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private Color color;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private String label;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeSlot(DayOfWeek day, LocalTime start, LocalTime end) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireAllNonNull(day, start, end);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        checkArgument(isValidTimeSlot(start, end), MESSAGE_INVALID_TIME_SLOT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        dayOfWeek \u003d day;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        startTime \u003d start;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        endTime \u003d end;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        color \u003d DEFAULT_COLOR;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeSlot(DayOfWeek day, LocalTime start, LocalTime end, Color col) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this(day, start, end);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        color \u003d col;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeSlot(TimeSlot input) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        dayOfWeek \u003d input.dayOfWeek;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        startTime \u003d input.startTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        endTime \u003d input.endTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        color \u003d input.color;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public DayOfWeek getDayOfWeek() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return dayOfWeek;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public String getLabel() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public Color getColor() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return color;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void setColor(Color color) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.color \u003d color;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static boolean isValidTimeSlot(String test) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static boolean isValidTimeSlot(LocalTime start, LocalTime end) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return !(start.equals(end) || start.isAfter(end));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Merges {@code toMerge} into this {@code TimeSlot}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * This {@code TimeSlot} must overlap or be adjacent with {@code toMerge}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toMerge {@code TimeSlot} to be merged"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws TimeSlotNotOverlapException if {@code toMerge} does not overlap with this {@code TimeSlot}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void mergeInto(TimeSlot toMerge) throws TimeSlotNotOverlapException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot merged;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            merged \u003d merge(toMerge);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } catch (TimeSlotNotOverlapException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.startTime \u003d merged.startTime;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.endTime \u003d merged.endTime;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.dayOfWeek \u003d merged.dayOfWeek;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Returns a {@code TimeSlot} with {@code toMerge} merged with this {@code TimeSlot}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * This {@code TimeSlot} must overlap or be adjacent with {@code toMerge}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toMerge {@code TimeSlot} to be merged"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @return Merged {@code TimeSlot}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws TimeSlotNotOverlapException if {@code toMerge} does not overlap with this {@code TimeSlot}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeSlot merge(TimeSlot toMerge) throws TimeSlotNotOverlapException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (!isOverlap(toMerge) \u0026\u0026 !isAdjacent(toMerge)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new TimeSlotNotOverlapException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        LocalTime toReturnStart \u003d this.startTime.isBefore(toMerge.startTime) ? this.startTime : toMerge.startTime;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        LocalTime toReturnEnd \u003d this.endTime.isAfter(toMerge.endTime) ? this.endTime : toMerge.endTime;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DayOfWeek toReturnDay \u003d this.dayOfWeek;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return new TimeSlot(toReturnDay, toReturnStart, toReturnEnd);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Checks whether this {@code TimeSlot} overlaps with {@code toCompare}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toCompare {@code TimeSlot} to compare against"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @return Whether this {@code TimeSlot} overlaps with {@code toCompare}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean isOverlap(TimeSlot toCompare) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        boolean isNotOverlapTime \u003d (this.endTime.isBefore(toCompare.startTime)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                || toCompare.endTime.isBefore(this.startTime)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                || isAdjacent(toCompare));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return isSameDay(toCompare) \u0026\u0026 !isNotOverlapTime;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Checks whether this {@code TimeSlot} is adjacent to {@code toCompare}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Two {@code TimeSlot}s are adjacent if the start time of one is equal to the end time of the other"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toCompare {@code TimeSlot} to compare against"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @return Whether this {@code TimeSlot} is adjacent to {@code toCompare}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean isAdjacent(TimeSlot toCompare) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return isSameDay(toCompare)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                \u0026\u0026 (this.endTime.equals(toCompare.startTime) || this.startTime.equals(toCompare.endTime));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean isSameDay(TimeSlot toCompare) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return this.dayOfWeek.equals(toCompare.dayOfWeek);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        builder.append(getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.ENGLISH))"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .append(\" \")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .append(startTime)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .append(\" - \")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .append(endTime);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (!(other instanceof TimeSlot)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot otherTimeSlot \u003d (TimeSlot) other;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return otherTimeSlot.getDayOfWeek().equals(getDayOfWeek())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                \u0026\u0026 otherTimeSlot.startTime.equals(startTime)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                \u0026\u0026 otherTimeSlot.endTime.equals(endTime);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Gets the abbreviation of the DayOfWeek for the timeslot."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @return      possible outputs: \"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\", \"SU\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public String getAbbreviationFromDayOfWeek() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String dayString \u003d dayOfWeek.getDisplayName(TextStyle.FULL , Locale.ENGLISH);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return dayString.substring(0, 2);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return Objects.hash(dayOfWeek, startTime, endTime);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public int compareTo(TimeSlot o) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (!this.dayOfWeek.equals(o.dayOfWeek)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return this.dayOfWeek.getValue() - o.dayOfWeek.getValue();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (!this.startTime.equals(o.startTime)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return (int) Duration.between(o.startTime, this.startTime).toMillis();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 200,
      "alexiscatnip": 9,
      "-": 13,
      "bennchong": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TimeTable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotDoesNotExistException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotOverlapException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeTableEmptyException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Represents a {@code TimeTable} that is associated with a {@code Person}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class TimeTable {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    protected Collection \u003cTimeSlot\u003e timeSlots;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // Since Java does not have a built-in multiset, a map is used to simulate a multiset"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private TreeMap\u003cLocalTime, Integer\u003e earlistSet;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private TreeMap\u003cLocalTime, Integer\u003e latestSet;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private HashMap\u003cColor, Integer\u003e colorList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TimeTable() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeSlots \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        earlistSet \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        latestSet \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        colorList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        populateColors();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeTable(Collection \u003cTimeSlot\u003e input) throws TimeSlotOverlapException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (TimeSlot timeSlot : input) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                addTimeSlot(timeSlot);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            } catch (TimeSlotOverlapException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Copy constructor"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param input {@code TimeTable} to be copied"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeTable(TimeTable input) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        updateTimeTable(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Adds a {@code TimeSlot} to the {@code TimeTable} without assigning it a random color"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Only used internally, see {@code addTimeSlot} for outward-facing API"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toAdd {@code TimeSlot} to be added"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws TimeSlotOverlapException if {@code toAdd} overlaps with an existing {@code TimeSlot}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    protected void addTimeSlotWithoutColor(TimeSlot toAdd) throws TimeSlotOverlapException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (hasOverlap(toAdd)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new TimeSlotOverlapException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeSlots.add(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        addColor(toAdd.getColor());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (earlistSet.containsKey(toAdd.getStartTime())) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            int currCount \u003d earlistSet.get(toAdd.getStartTime());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            earlistSet.remove(toAdd.getStartTime());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            earlistSet.put(toAdd.getStartTime(), currCount + 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            earlistSet.put(toAdd.getStartTime(), 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (latestSet.containsKey(toAdd.getEndTime())) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            int currCount \u003d latestSet.get(toAdd.getEndTime());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            latestSet.remove(toAdd.getEndTime());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            latestSet.put(toAdd.getEndTime(), currCount + 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            latestSet.put(toAdd.getEndTime(), 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public Collection \u003cTimeSlot\u003e getTimeSlots() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection \u003cTimeSlot\u003e toReturn \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addAll(timeSlots);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public LocalTime getEarliest() throws TimeTableEmptyException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (earlistSet.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new TimeTableEmptyException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return earlistSet.firstKey();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public LocalTime getLatest() throws TimeTableEmptyException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (latestSet.isEmpty()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new TimeTableEmptyException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return latestSet.lastKey();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Overwrites this {@code TimeTable} with {@code toReplace}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toReplace {@code TimeTable} to be copied"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void updateTimeTable(TimeTable toReplace) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        clear();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (TimeSlot timeSlot : toReplace.getTimeSlots()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            addTimeSlotWithoutColor(timeSlot);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Adds a {@code TimeSlot} to the {@code TimeTable}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toAdd {@code TimeSlot} to be added"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws TimeSlotOverlapException if {@code toAdd} overlaps with an existing {@code TimeSlot}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void addTimeSlot(TimeSlot toAdd) throws TimeSlotOverlapException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toAdd.setColor(getColor());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        addTimeSlotWithoutColor(toAdd);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Removes a {@code TimeSlot} from the {@code TimeTable}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toRemove {@code TimeSlot} to be removed"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws TimeSlotDoesNotExistException if {@code toRemove} does not exist in the {@code TimeTable}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void removeTimeSlot(TimeSlot toRemove) throws TimeSlotDoesNotExistException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (!timeSlots.contains(toRemove)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            throw new TimeSlotDoesNotExistException();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (TimeSlot timeSlot : timeSlots) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            if (timeSlot.equals(toRemove)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                removeColor(timeSlot.getColor());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeSlots.remove(toRemove);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        int currCountEarlist \u003d earlistSet.get(toRemove.getStartTime());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        earlistSet.remove(toRemove.getStartTime());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (currCountEarlist !\u003d 1) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            earlistSet.put(toRemove.getStartTime(), currCountEarlist - 1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        int currCountLatest \u003d latestSet.get(toRemove.getEndTime());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        latestSet.remove(toRemove.getEndTime());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (currCountLatest !\u003d 1) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            latestSet.put(toRemove.getEndTime(), currCountLatest - 1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Checks whether {@code toCheck} overlaps with any {@code TimeSlot}s in this {@code TimeTable}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toCheck {@code TimeSlot} to be checked"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @return Whether an overlapping {@code TimeSlot} exists in this {@code TimeTable}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean hasOverlap(TimeSlot toCheck) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (TimeSlot timeSlot : timeSlots) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            if (timeSlot.isOverlap(toCheck)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return timeSlots.isEmpty();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Clears this [@code TimeTable} object"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeSlots \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        earlistSet \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        latestSet \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        colorList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        populateColors();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Initializes the {@code colorList} with pre-set colors"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private void populateColors() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        colorList.put(Color.YELLOW, 0);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        colorList.put(Color.ORANGE, 0);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        colorList.put(Color.PINK, 0);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        colorList.put(Color.PURPLE, 0);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        colorList.put(Color.BLUE, 0);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        colorList.put(Color.CYAN, 0);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        colorList.put(Color.SILVER, 0);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Gets the {@code Color} with the least occurrence in the {@code TimeTable} at the moment"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @return A {@code Color} object"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private Color getColor() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        int minCount \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Color minCountColor \u003d Color.BLACK;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (Map.Entry\u003cColor, Integer\u003e entry : colorList.entrySet()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            if (entry.getValue() \u003c minCount) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                minCount \u003d entry.getValue();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                minCountColor \u003d entry.getKey();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return minCountColor;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Adds a {@code Color} to the {@code colorList} of the {@code TimeTable} for tracking"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toAdd {@code Color} to be added"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private void addColor(Color toAdd) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (colorList.containsKey(toAdd)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            int lastCount \u003d colorList.get(toAdd);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            colorList.remove(toAdd);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            colorList.put(toAdd, lastCount + 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            colorList.put(toAdd, 1);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Removes a {@code Color} from the {@code colorList} of the {@code TimeTable} for tracking"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param toRemove {@code Color} to be removed"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private void removeColor(Color toRemove) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        int lastCount \u003d colorList.get(toRemove);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        colorList.remove(toRemove);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        colorList.put(toRemove, lastCount - 1);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (!(other instanceof TimeTable)) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable otherTimeTable \u003d (TimeTable) other;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Collection\u003cTimeSlot\u003e a \u003d this.getTimeSlots();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Collection\u003cTimeSlot\u003e b \u003d otherTimeTable.getTimeSlots();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        for (TimeSlot timeSlot : a) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            if (!b.contains(timeSlot)) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 255,
      "alexiscatnip": 8,
      "-": 13,
      "bennchong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Returns true if the list contains an equivalent person\u0027s name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean containsToRegister(Person toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePersonForRegister);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 138,
      "bennchong": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UserParameterHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Helper class for User Class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class UserParameterHelper {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //Timetable field (Currently only one)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private TimeTable timeTable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    // Friend list of the person"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Set\u003cFriend\u003e friendList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public UserParameterHelper(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, TimeTable timeTable,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                               Set\u003cFriend\u003e friendList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.timeTable \u003d timeTable;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.friendList \u003d friendList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public TimeTable getTimeTable() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return timeTable;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Set\u003cFriend\u003e getFriendList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return friendList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/TimeSlotDoesNotExistException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Signals that the TimeSlot to be removed does not exist in the TimeTable."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeSlotDoesNotExistException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeSlotDoesNotExistException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        super(\"The timeslot to be removed does not exist!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/TimeSlotNotOverlapException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Signals that the {@code TimeSlot} to be merged cannot be merged"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeSlotNotOverlapException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeSlotNotOverlapException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        super(\"The timeslot to be merged does not overlap with the current timeslot!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/TimeSlotOverlapException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Signals that the operation will result in overlapping TimeSlots being added."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeSlotOverlapException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeSlotOverlapException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        super(\"The added timeslot overlaps with existing timeslots!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/TimeTableEmptyException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Signals that the {@code TimeTable} is empty and does not have an earliest or latest time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeTableEmptyException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeTableEmptyException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        super(\"The timetable is empty!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z0-9_\\\\-]+$\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagsContainsKeywords.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Test for the keywords and if it\u0027s present in the collections"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class TagsContainsKeywords implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private final Set\u003cTag\u003e tagKeywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public TagsContainsKeywords(Set\u003cTag\u003e tagKeywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.tagKeywords \u003d tagKeywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return !Collections.disjoint(person.getTags(), tagKeywords);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            new Person(new Name(\"John Doe\"), new Phone(\"87438807\"), new Email(\"john_doe@example.com\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                getTagSet(\"CS2113T-F16-1\"), SampleTimeTableUtil.getTimeTableJohnDoe(), new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            new Person(new Name(\"John Roe\"), new Phone(\"99272758\"), new Email(\"rowjohn@example.com\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                getTagSet(\"CS2113T-F16-1\", \"CS2101-A\"), SampleTimeTableUtil.getTimeTableJohnRoe(), new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            new Person(new Name(\"Johnny Doe\"), new Phone(\"93210283\"), new Email(\"johnny@example.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                getTagSet(\"CS2113T-F16-1\"), SampleTimeTableUtil.getTimeTableJohnnyDoe(), new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            new Person(new Name(\"Benson Meier\"), new Phone(\"91031282\"), new Email(\"meierbenson@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                getTagSet(\"CS2113T-F16-1\", \"CS2101-B\"), SampleTimeTableUtil.getTimeTableBensonMeier(), new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            new Person(new Name(\"NF\"), new Phone(\"12345678\"), new Email(\"nianfei97@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new Address(\"NUS\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                getTagSet(\"CS2113T-W13-1\", \"CS2101-A\"), SampleTimeTableUtil.getTimeTableNf(), new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            new Person(new Name(\"Ben\"), new Phone(\"98765432\"), new Email(\"bennchong@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new Address(\"NUS\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                getTagSet(\"CS2113T-W13-1\", \"CS2101-B\"), SampleTimeTableUtil.getTimeTableBen(), new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            new Person(new Name(\"Jasper\"), new Phone(\"23456789\"), new Email(\"cjinting-nus@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new Address(\"NUS\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                getTagSet(\"CS2113T-W13-1\", \"CS2101-C\"), SampleTimeTableUtil.getTimeTableJasper(), new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            new Person(new Name(\"Alexis\"), new Phone(\"87654321\"), new Email(\"alexiscatnip@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new Address(\"NUS\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                getTagSet(\"CS2113T-W13-1\", \"CS2101-D\"), SampleTimeTableUtil.getTimeTableAlexis(), new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            new Person(new Name(\"test\"), new Phone(\"88888888\"), new Email(\"test@test.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                new Address(\"Testy Road\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                getTagSet(\"TestGroup\"), SampleTimeTableUtil.getTimeTableBensonMeier(), new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static Person getSamplePerson() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return new Person(new Name(\"John Doe\"), new Phone(\"87438807\"), new Email(\"john_doe@example.com\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        getTagSet(\"friends\"), SampleTimeTableUtil.getTimeTableJohnDoe(), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 1,
      "nianfei97": 21,
      "-": 46,
      "bennchong": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleTimeTableUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample {@code TimeTable}s"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class SampleTimeTableUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static TimeTable getTimeTableJohnDoe() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable toReturn \u003d new TimeTable();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"10:00\"), LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"12:00\"), LocalTime.parse(\"14:00\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.WEDNESDAY, LocalTime.parse(\"09:00\"), LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.WEDNESDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"17:00\")));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.THURSDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.THURSDAY, LocalTime.parse(\"18:00\"), LocalTime.parse(\"20:00\")));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.FRIDAY, LocalTime.parse(\"10:00\"), LocalTime.parse(\"11:00\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static TimeTable getTimeTableJohnRoe() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable toReturn \u003d new TimeTable();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"10:00\"), LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"16:00\"), LocalTime.parse(\"18:00\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"09:00\"), LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"12:00\"), LocalTime.parse(\"14:00\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"18:00\"), LocalTime.parse(\"20:00\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.WEDNESDAY, LocalTime.parse(\"12:00\"), LocalTime.parse(\"13:00\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.THURSDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.THURSDAY, LocalTime.parse(\"18:00\"), LocalTime.parse(\"20:00\")));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.FRIDAY, LocalTime.parse(\"12:00\"), LocalTime.parse(\"14:00\")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static TimeTable getTimeTableJohnnyDoe() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable toReturn \u003d new TimeTable();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"16:00\"), LocalTime.parse(\"18:00\")));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.WEDNESDAY, LocalTime.parse(\"16:00\"), LocalTime.parse(\"18:00\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.FRIDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static TimeTable getTimeTableBensonMeier() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable toReturn \u003d new TimeTable();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"10:00\"), LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"15:00\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"16:00\"), LocalTime.parse(\"18:00\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.WEDNESDAY, LocalTime.parse(\"09:00\"), LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.WEDNESDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.WEDNESDAY, LocalTime.parse(\"17:00\"), LocalTime.parse(\"18:00\")));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.THURSDAY, LocalTime.parse(\"10:00\"), LocalTime.parse(\"11:00\")));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.THURSDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.THURSDAY, LocalTime.parse(\"18:00\"), LocalTime.parse(\"20:00\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static TimeTable getTimeTableNf() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable toReturn \u003d new TimeTable();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"08:00\"), LocalTime.parse(\"10:00\")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"10:00\"), LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"16:00\"), LocalTime.parse(\"19:00\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"08:00\"), LocalTime.parse(\"09:00\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"09:00\"), LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"12:00\"), LocalTime.parse(\"14:00\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"18:00\"), LocalTime.parse(\"20:00\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.WEDNESDAY, LocalTime.parse(\"13:00\"), LocalTime.parse(\"14:00\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.THURSDAY, LocalTime.parse(\"09:00\"), LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.THURSDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.THURSDAY, LocalTime.parse(\"16:00\"), LocalTime.parse(\"18:00\")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.FRIDAY, LocalTime.parse(\"12:00\"), LocalTime.parse(\"14:00\")));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.FRIDAY, LocalTime.parse(\"16:00\"), LocalTime.parse(\"18:00\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static TimeTable getTimeTableBen() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable toReturn \u003d new TimeTable();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"08:00\"), LocalTime.parse(\"10:00\")));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"08:00\"), LocalTime.parse(\"09:00\")));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"09:00\"), LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.WEDNESDAY, LocalTime.parse(\"13:00\"), LocalTime.parse(\"14:00\")));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.WEDNESDAY, LocalTime.parse(\"16:00\"), LocalTime.parse(\"18:00\")));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.THURSDAY, LocalTime.parse(\"09:00\"), LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.THURSDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.THURSDAY, LocalTime.parse(\"16:00\"), LocalTime.parse(\"17:00\")));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.FRIDAY, LocalTime.parse(\"16:00\"), LocalTime.parse(\"18:00\")));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static TimeTable getTimeTableJasper() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable toReturn \u003d new TimeTable();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"08:00\"), LocalTime.parse(\"10:00\")));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"18:00\"), LocalTime.parse(\"20:00\")));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"10:00\"), LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"16:00\"), LocalTime.parse(\"18:00\")));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.WEDNESDAY, LocalTime.parse(\"08:00\"), LocalTime.parse(\"10:00\")));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.WEDNESDAY, LocalTime.parse(\"13:00\"), LocalTime.parse(\"14:00\")));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.THURSDAY, LocalTime.parse(\"11:00\"), LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.THURSDAY, LocalTime.parse(\"12:00\"), LocalTime.parse(\"14:00\")));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.THURSDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.FRIDAY, LocalTime.parse(\"16:00\"), LocalTime.parse(\"18:00\")));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static TimeTable getTimeTableAlexis() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable toReturn \u003d new TimeTable();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"08:00\"), LocalTime.parse(\"10:00\")));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"12:00\"), LocalTime.parse(\"14:00\")));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.parse(\"18:00\"), LocalTime.parse(\"21:00\")));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.WEDNESDAY, LocalTime.parse(\"09:00\"), LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.WEDNESDAY, LocalTime.parse(\"13:00\"), LocalTime.parse(\"14:00\")));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.THURSDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\")));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.THURSDAY, LocalTime.parse(\"16:00\"), LocalTime.parse(\"18:00\")));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.FRIDAY, LocalTime.parse(\"14:00\"), LocalTime.parse(\"15:00\")));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toReturn.addTimeSlot(new TimeSlot(DayOfWeek.FRIDAY, LocalTime.parse(\"16:00\"), LocalTime.parse(\"18:00\")));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/security/AccountCredential.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * A serializable class that contains username and hashed password"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class AccountCredential implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static final String DEFAULT_USERNAME \u003d \"test\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static final String DEFAULT_PASSWORD \u003d \"test\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private String userName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private String hashedPassword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public AccountCredential() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.userName \u003d DEFAULT_USERNAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.hashedPassword \u003d hash(DEFAULT_PASSWORD);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public AccountCredential(String userName, String password) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.hashedPassword \u003d hash(password);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public String getUserName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return userName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Compares"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param password by hashing it first then comparing with stored hashedPassword"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean passwordIsValid(String password) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        String inputHashed \u003d hash(password);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (inputHashed.equals(hashedPassword)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Converts"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param password into"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return a hashed password"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private String hash(String password) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return Hasher.hashPassword(password, Hasher.mySalt, \"SHA-512\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/security/AppUsers.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Represents FreeTime Registered Users"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class AppUsers {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private ArrayList\u003cAccountCredential\u003e accountCredentials;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public AppUsers() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.accountCredentials \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //Adding accounts when users.json is not found"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        accountCredentials.add(new AccountCredential());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        accountCredentials.add(new AccountCredential(\"NF\", \"test\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        accountCredentials.add(new AccountCredential(\"Ben\", \"test\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        accountCredentials.add(new AccountCredential(\"Jasper\", \"test\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        accountCredentials.add(new AccountCredential(\"Alexis\", \"test\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ArrayList\u003cAccountCredential\u003e getAccountCredentials() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return accountCredentials;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void updateAccountCredentials(ArrayList\u003cAccountCredential\u003e list) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.accountCredentials \u003d list;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (!(other instanceof AppUsers)) { //this handles null as well."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        AppUsers o \u003d (AppUsers) other;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return Objects.equals(accountCredentials, o.accountCredentials);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return Objects.hash(accountCredentials);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/security/Hasher.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.security.MessageDigest;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Implements hashing methods"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * (Ref: https://stackoverflow.com/questions/33085493/how-to-hash-a-password-with-sha-512-in-java)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class Hasher {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String mySalt \u003d \"Akshay\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param passwordToHash input password"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param salt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param algo predefined algo such as SHA-256, or SHA-512 etc"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return hashedPassword to compare"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static String hashPassword(String passwordToHash, String salt, String algo) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        String generatedPassword \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            MessageDigest md \u003d MessageDigest.getInstance(algo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            md.update(passwordToHash.getBytes(StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            md.update(salt.getBytes(StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            byte[] bytes \u003d md.digest();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            for (int i \u003d 0; i \u003c bytes.length; i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                sb.append(Integer.toString((bytes[i] \u0026 0xff) + 0x100, 16).substring(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            generatedPassword \u003d sb.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (NoSuchAlgorithmException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return generatedPassword;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/security/RegisterFlag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Containing return types for register method"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public enum RegisterFlag {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    SUCCESS, USER_ALREADY_EXISTS, INCOMPLETE_FIELD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/security/Security.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/***"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * API of Security Component"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public interface Security {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Login a user with associated password"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param username Username"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param password Password"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    void login(String username, String password);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Logs out"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    void logout();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Registers the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Returns 1 if successful, 2 if user exists, 3 if the fields are incomplete"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    RegisterFlag register(String username, String password);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return is authenticated for tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    boolean getAuthentication();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return the current authenticated User"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    User getUser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, SecurityAuthenticationException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/security/SecurityAuthenticationException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Represents the unauthenticated method call."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class SecurityAuthenticationException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public SecurityAuthenticationException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        super(\"User is not authenticated\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public SecurityAuthenticationException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public SecurityAuthenticationException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/security/SecurityManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.AuthReturn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.CommandsEnum;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.logic.LoginEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.logic.RegisterSuccessEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.GetAuthenticationEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.LogoutEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.SendsAuthenticationStateEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.SuccessfulLoginEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.SuccessfulRegisterEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.User;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/***"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": " *  Implements a Security Module that handles authentication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class SecurityManager extends ComponentManager implements Security {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private boolean isAuthenticated;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private AppUsers appUsers;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private ArrayList\u003cAccountCredential\u003e userlist;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private boolean incorrectPassWord \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public SecurityManager(boolean isTest, Logic logic, AppUsers appUsers) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.isAuthenticated \u003d isTest; //Test for now"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.appUsers \u003d appUsers;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean getAuthentication() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return this.isAuthenticated;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void login(String username, String password) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        userlist \u003d appUsers.getAccountCredentials();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        for (AccountCredential acc : userlist) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            if (username.equals(acc.getUserName())) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                if (acc.passwordIsValid(password)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    this.isAuthenticated \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    logic.matchUserToPerson(username);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    raise(new SuccessfulLoginEvent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    //THROW INCORRECT PASSWORD EXCEPTION"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    incorrectPassWord \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    raise(new NewResultAvailableEvent(\"Incorrect Password\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //When username is not in the list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (!incorrectPassWord \u0026\u0026 !this.isAuthenticated) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            //THROW USER NOT FOUND"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            raise(new NewResultAvailableEvent(\"Username not found\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        incorrectPassWord \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void logout() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.isAuthenticated \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //Clears instance of User in model to prevent anyone accessing previously logged in user"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logic.clearUser();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public RegisterFlag register(String username, String password) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.isAuthenticated \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logic.matchUserToPerson(username);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        userlist \u003d appUsers.getAccountCredentials();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        userlist.add(new AccountCredential(username, password));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        appUsers.updateAccountCredentials(userlist);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return RegisterFlag.SUCCESS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public User getUser() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return logic.getUser();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            SecurityAuthenticationException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        CommandsEnum commandConstant \u003d logic.parseCommandWord(commandText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //Handles AuthReturn enum constant types"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        AuthReturn flag \u003d isCommandParsedAllowed(commandConstant);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (flag \u003d\u003d AuthReturn.COMMAND_ALLOWED) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return logic.execute(commandConstant.getValues().get(0)); //Parameter to store in history"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } else if (flag \u003d\u003d AuthReturn.COMMAND_LOGINFIRST) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throw new SecurityAuthenticationException(\"Please Login First\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } else if (flag \u003d\u003d AuthReturn.COMMAND_LOGOUTFIRST) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throw new SecurityAuthenticationException(\"Please Logout First\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throw new SecurityAuthenticationException(\"This should not happen\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Checks whether the command entered is entered at the right time (Before/After logging in)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @paramCommandsEnum The name of the command as CommandsEnum constant"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @returnAuthReturn One of AuthReturn Enum\u0027s Constants"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private AuthReturn isCommandParsedAllowed(CommandsEnum commandConstant) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //Checks CommandsEnum method isCommandAllowed"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return commandConstant.isCommandAllowed(commandConstant, getAuthentication());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleCommandLogoutEvent(LogoutEvent logout) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logout();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleLoginAttemptEvent(LoginEvent e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        login(e.getUsername(), e.getPassword());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleRegisterSuccessEvent(RegisterSuccessEvent e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        switch (register(e.getUsername(), e.getPassword())) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        case SUCCESS:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            raise(new SuccessfulRegisterEvent());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleGetAuthenticationEvent(GetAuthenticationEvent e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        raise(new SendsAuthenticationStateEvent(isAuthenticated));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AppUsersStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.AppUsers;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Represents a storage for {@link AppUsers}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public interface AppUsersStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Returns the file path of the AppUsers data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    Path getAppUsersFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Returns AppUsers data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    Optional\u003cAppUsers\u003e readAppUsers() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Saves the given {@link AppUsers} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param appUsers cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    void saveAppUsers(AppUsers appUsers) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAppUsersStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.AppUsers;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * A class to access AppUsers stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class JsonAppUsersStorage implements AppUsersStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public JsonAppUsersStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Path getAppUsersFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Optional\u003cAppUsers\u003e readAppUsers() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return readAppUsers(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Similar to {@link #readAppUsers()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param appUsersFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Optional\u003cAppUsers\u003e readAppUsers(Path appUsersFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return JsonUtil.readJsonFile(appUsersFilePath, AppUsers.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void saveAppUsers(AppUsers appUsers) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        JsonUtil.saveJsonFile(appUsers, filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.AppUsers;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, AppUsersStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    Optional\u003cAppUsers\u003e readAppUsers() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    void saveAppUsers(AppUsers appUsers) throws IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "bennchong": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.AppUsers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private AppUsersStorage appUsersStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                          AppUsersStorage appUsersStorage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.appUsersStorage \u003d appUsersStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppUsers methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Path getAppUsersFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return appUsersStorage.getAppUsersFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public Optional\u003cAppUsers\u003e readAppUsers() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return appUsersStorage.readAppUsers();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void saveAppUsers(AppUsers appUsers) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        appUsersStorage.saveAppUsers(appUsers);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 91,
      "bennchong": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedFriend.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Friend;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Constructs a friend"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class XmlAdaptedFriend {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private String friendName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Constructs an XmlAdaptedFriend."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public XmlAdaptedFriend() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Constructs a {@code XmlAdaptedFriend} with the given {@code friendName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public XmlAdaptedFriend(String friendName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.friendName \u003d friendName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Converts a given Friend into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public XmlAdaptedFriend(Friend source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendName \u003d source.friendName.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Converts this jaxb-friendly adapted friend object into the model\u0027s Friend object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public Friend toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new Friend(new Name(friendName));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        if (!(other instanceof XmlAdaptedFriend)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return friendName.equals(((XmlAdaptedFriend) other).friendName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Friend;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private List\u003cXmlAdaptedFriend\u003e friendList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private List\u003cXmlAdaptedTimeSlot\u003e timeSlotList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                            List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendList \u003d source.getFriends().stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                .map(XmlAdaptedFriend::new)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        timeSlotList \u003d source.getTimeTable().getTimeSlots().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                .map(XmlAdaptedTimeSlot::new)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        final List\u003cFriend\u003e friendSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        for (XmlAdaptedFriend friend : friendList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            friendSet.add(friend.toModelType());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        final Set\u003cFriend\u003e friendList \u003d new HashSet\u003c\u003e(friendSet);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        TimeTable timeTable \u003d new TimeTable();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        for (XmlAdaptedTimeSlot ts : timeSlotList) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            timeTable.addTimeSlot(ts.toModelType());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, timeTable, friendList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u0026\u0026 friendList.equals(otherPerson.friendList);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 20,
      "alexiscatnip": 9,
      "-": 134,
      "bennchong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTimeSlot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * JAXB-friendly adapted version of the TimeSlot."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class XmlAdaptedTimeSlot {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private String dayOfWeek;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private String label;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Constructs an XmlAdaptedTimeSlot."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public XmlAdaptedTimeSlot() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Constructs a {@code XmlAdaptedTimeSlot} with the given {@code TimeSlot} for JAXB use.."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public XmlAdaptedTimeSlot(TimeSlot source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        this.label \u003d source.getLabel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        this.dayOfWeek \u003d Integer.toString(source.getDayOfWeek().getValue());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        this.startTime \u003d source.getStartTime().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        this.endTime \u003d source.getEndTime().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Converts this jaxb-friendly adapted TimeSlot object into the model\u0027s TimeSlot object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public TimeSlot toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //TODO: test and ensure that values are legal."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        DayOfWeek dayOfWeek \u003d DayOfWeek.of(Integer.parseInt(this.dayOfWeek));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        LocalTime startTime \u003d LocalTime.parse(this.startTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        LocalTime endTime \u003d LocalTime.parse(this.endTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return new TimeSlot(dayOfWeek, startTime, endTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (!(other instanceof XmlAdaptedTimeSlot)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return dayOfWeek.equals(((XmlAdaptedTimeSlot) other).dayOfWeek)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                \u0026\u0026 startTime.equals(((XmlAdaptedTimeSlot) other).startTime)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                \u0026\u0026 endTime.equals(((XmlAdaptedTimeSlot) other).endTime)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                \u0026\u0026 label.equals(((XmlAdaptedTimeSlot) other).label);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.Security;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityAuthenticationException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final Security security;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public CommandBox(Logic logic, Security security) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.security \u003d security;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            CommandResult commandResult \u003d security.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            if (!commandResult.feedbackToUser.equals(\"Login Attempted\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (CommandException | ParseException | SecurityAuthenticationException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 148,
      "bennchong": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FriendListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Displays the friends in the first panel of the app"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class FriendListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FriendListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public FriendListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setConnections(personList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setConnections(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new FriendListPanel.FriendListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            personListView.getSelectionModel().select(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    class FriendListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 6,
      "nianfei97": 1,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LoginWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.scene.control.PasswordField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.SuccessfulLoginEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.UnsuccessfulLoginEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.ShowRegisterEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.Security;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityAuthenticationException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/***"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Controller for the login"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class LoginWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static final String FXML \u003d \"LoginWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Security security;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private TextField usernameTextField;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private PasswordField passwordTextField;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Creates a new LoginWindow."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public LoginWindow(Stage root) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        root.setTitle(\"Login\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        root.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        root.setMinWidth(250);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Creates a new LoginWindow."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public LoginWindow(Security security) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.security \u003d security;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //Links with eventsCenter I believe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Shows the LoginWindow."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Hides the Login Window"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Runs whenever the login button is clicked"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleLoginClick() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            security.execute(LoginCommand.COMMAND_WORD + \" \" + PREFIX_USERNAME + usernameTextField.getText()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    + \" \" + PREFIX_PASSWORD + passwordTextField.getText());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (CommandException | ParseException | SecurityAuthenticationException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            label.setText(e.getMessage());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Runs whenever the login button is clicked"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleRegisterClick() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //Raise Event to create new window"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        raise(new ShowRegisterEvent());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleSuccessfulLoginEvent(SuccessfulLoginEvent loginSuccess) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleUnsuccessfulLoginEvent(UnsuccessfulLoginEvent loginFailure) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        label.setText(\"Incorrect Username/Password\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleNewResultAvailableEvent(NewResultAvailableEvent e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //Prevents this message from showing on login box, but only on ResultDisplay"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (!e.message.equals(\"Successfully Displayed UI\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            label.setText(e.message);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.LogoutEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.SuccessfulLoginEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.ExitRegisterEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.ShowLoginEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.ShowRegisterEvent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.SuccessfulRegisterEvent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.Security;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Security security;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private TimeTablePanel timetablePanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private MePanel mePanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private OtherListPanel otherListPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private FriendListPanel friendListPanel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private LoginWindow loginWindow;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private RegistrationWindow registrationWindow;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private Text meText;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private Text friendText;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private Text personText;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private StackPane timetablePlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private StackPane mePanelPlaceholder;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private StackPane otherListPanelPlaceholder;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic, Security security) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.security \u003d security;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        loginWindow \u003d new LoginWindow(security);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        registrationWindow \u003d new RegistrationWindow(security);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Enables Security CLI"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void fillSecurityCommandBox() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic, security);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        commandBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        SecurityResultDisplay securityResultDisplay \u003d new SecurityResultDisplay();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        resultDisplayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(securityResultDisplay.getRoot());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Clear displays when user is logging out"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void removeInnerParts() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        commandBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        resultDisplayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        mePanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        timetablePlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        personListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        otherListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        statusbarPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        friendText.setText(\"\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        personText.setText(\"\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        meText.setText(\"\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void fillInnerParts() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        meText.setText(\"Me\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        meText.setFill(Color.LIGHTGOLDENRODYELLOW);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        meText.setStyle(\"-fx-font-size: 20px;\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendText.setText(\"Friends\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendText.setFill(Color.LIGHTGOLDENRODYELLOW);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendText.setStyle(\"-fx-font-size: 20px;\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        personText.setText(\"Others\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        personText.setFill(Color.LIGHTGOLDENRODYELLOW);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        personText.setStyle(\"-fx-font-size: 20px;\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        timetablePanel \u003d new TimeTablePanel();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        timetablePlaceholder.getChildren().add(timetablePanel.getRoot());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        mePanel \u003d new MePanel(logic.getMeList());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        mePanelPlaceholder.getChildren().add(mePanel.getRoot());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendListPanel \u003d new FriendListPanel(logic.getFriendList());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(friendListPanel.getRoot());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        otherListPanel \u003d new OtherListPanel(logic.getOtherList());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        otherListPanelPlaceholder.getChildren().add(otherListPanel.getRoot());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        resultDisplayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic, security);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        commandBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Platform.runLater(() -\u003e logic.updateTimeTable(logic.getUser().getTimeTable()));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Opens the Login Window."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleLogin() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (!loginWindow.isShowing()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            loginWindow.show();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            loginWindow.focus();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Opens the Registration Window."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleRegister() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        loginWindow.hide();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        registrationWindow.show();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Handles successful registration"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleSuccessRegister() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        registrationWindow.hide();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        raise(new SuccessfulLoginEvent()); //Calls method fill in data"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public OtherListPanel getOtherListPanel() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return otherListPanel;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void handleShowRegisterEvent(ShowRegisterEvent event) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        handleRegister();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void handleExitRegisterEvent(ExitRegisterEvent event) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        handleLogin();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void handleShowLoginEvent(ShowLoginEvent event) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        handleLogin();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void handleSuccessfulRegisterEvent(SuccessfulRegisterEvent event) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        handleSuccessRegister();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleLogoutEvent(LogoutEvent logout) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        security.logout();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        removeInnerParts();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        fillSecurityCommandBox();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 37,
      "nianfei97": 3,
      "alexiscatnip": 4,
      "-": 194,
      "bennchong": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MePanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Panel containing just the current User"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class MePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private static final String FXML \u003d \"MePanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private ListView\u003cPerson\u003e meView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public MePanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        setConnections(personList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private void setConnections(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        meView.setItems(personList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        meView.setCellFactory(listView -\u003e new MePanel.MeViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    class MeViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OtherListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class OtherListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private static final String FXML \u003d \"OtherListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(OtherListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private ListView\u003cPerson\u003e otherListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public OtherListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        setConnections(personList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setConnections(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        otherListView.setItems(personList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        otherListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        otherListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            otherListView.scrollTo(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            otherListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                setGraphic(new OtherPersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 8,
      "nianfei97": 3,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OtherPersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " * Populates the OtherPersonPanel with only the name and index"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class OtherPersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private static final String FXML \u003d \"OtherPersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        { \"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\" };"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public OtherPersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        initTags(person);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        OtherPersonCard card \u003d (OtherPersonCard) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * * Returns the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        // between different runs of the program while still making it random enough between tags."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Creates the tag labels for {@code person}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private void initTags(Person person) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        { \"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\" };"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        initTags(person);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * * Returns the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        // between different runs of the program while still making it random enough between tags."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Creates the tag labels for {@code person}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private void initTags(Person person) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 22,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RegistrationWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.scene.control.PasswordField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.ExitRegisterEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.Security;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityAuthenticationException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/***"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Controller for the login"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class RegistrationWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static final String FXML \u003d \"RegistrationWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Security security;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private TextField usernameTextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private PasswordField passwordTextField;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private TextField phoneTextField;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private TextField emailTextField;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private TextField addressTextField;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Creates a new Registration Window."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param root Stage to use as the root of the Registration Window."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public RegistrationWindow(Stage root) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        root.setTitle(\"Register\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        root.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        root.setMinWidth(250);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Creates a new Registration Window."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public RegistrationWindow(Security security) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.security \u003d security;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //Links with eventsCenter I believe"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        label.setText(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Shows the LoginWindow."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Hides the Login Window"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Runs whenever the register button is clicked"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleRegister() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            security.execute(RegisterCommand.COMMAND_WORD + \" \" + PREFIX_USERNAME + usernameTextField.getText()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    + \" \" + PREFIX_PASSWORD + passwordTextField.getText() + \" \" + PREFIX_EMAIL"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    + emailTextField.getText() + \" \" + PREFIX_PHONE + phoneTextField.getText() + \" \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    + PREFIX_ADDRESS + addressTextField.getText());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (CommandException | ParseException | SecurityAuthenticationException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            label.setText(e.getMessage());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Closes the register window and open the login window"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        raise(new ExitRegisterEvent());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SecurityResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class SecurityResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SecurityResultDisplay.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static final String FXML \u003d \"SecurityResultDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private TextArea securityResultDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public SecurityResultDisplay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityResultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimeTablePanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.commons.events.model.TimeTableChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.DeconflictTimeTable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Contains all elements related to timetables"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class TimeTablePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final LocalTime DEFAULT_START \u003d LocalTime.parse(\"10:00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final LocalTime DEFAULT_END \u003d LocalTime.parse(\"19:00\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final String FXML \u003d \"TimeTablePanel.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private TimeTable timeTableLastLoaded;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private LocalTime currStartHour;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private LocalTime currEndHour;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private double currRowDimensions;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private double currColDimensions;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private TimeTablePanelTimeMarkerGrid timeTablePanelTimeMarkerGrid;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private TimeTablePanelDayMarkerGrid timeTablePanelDayMarkerGrid;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private TimeTablePanelMainGrid timeTablePanelMainGrid;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private GridPane timeTablePanelTimeMarkerGridPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private GridPane timeTablePanelDayMarkerGridPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private GridPane timeTablePanelMainGridPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public TimeTablePanel() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        currStartHour \u003d DEFAULT_START;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        currEndHour \u003d DEFAULT_END;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableLastLoaded \u003d new TimeTable();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        updateDimensions();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTablePanelMainGrid.getRoot().widthProperty().addListener(new ChangeListener\u003cNumber\u003e() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            public void changed(ObservableValue\u003c? extends Number\u003e observable, Number oldValue, Number newValue) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                reloadTimeTable();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Fills up all the placeholders of this TimeTablePanel."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private void fillInnerParts() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTablePanelTimeMarkerGrid \u003d new TimeTablePanelTimeMarkerGrid(DEFAULT_START, DEFAULT_END, getCurrNumCol());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTablePanelTimeMarkerGridPlaceholder.getChildren().add(timeTablePanelTimeMarkerGrid.getRoot());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTablePanelDayMarkerGrid \u003d new TimeTablePanelDayMarkerGrid();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTablePanelDayMarkerGridPlaceholder.getChildren().add(timeTablePanelDayMarkerGrid.getRoot());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTablePanelMainGrid \u003d new TimeTablePanelMainGrid(getCurrNumCol());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        timeTablePanelMainGridPlaceholder.getChildren().add(timeTablePanelMainGrid.getRoot());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private void updateDimensions() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        currRowDimensions \u003d timeTablePanelMainGrid.getRoot().getHeight() / getCurrNumRow();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        currColDimensions \u003d timeTablePanelMainGrid.getRoot().getWidth() / getCurrNumCol();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Updates {@code currStartHour} and {@code currEndHour} according to the currently loaded {@code TimeTable}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private void updateStartAndEnd() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (!timeTableLastLoaded.isEmpty() \u0026\u0026 timeTableLastLoaded.getEarliest().isBefore(DEFAULT_START)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            currStartHour \u003d timeTableLastLoaded.getEarliest();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            currStartHour \u003d DEFAULT_START;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (!timeTableLastLoaded.isEmpty() \u0026\u0026 timeTableLastLoaded.getLatest().isAfter(DEFAULT_END)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            currEndHour \u003d timeTableLastLoaded.getLatest();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            currEndHour \u003d DEFAULT_END;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Loads a TimeTable from the TimeTable object it is given."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private void loadTimeTable(TimeTable timeTable) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableLastLoaded \u003d timeTable;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        updateStartAndEnd();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTablePanelMainGrid.loadColumns(getCurrNumCol());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTablePanelTimeMarkerGrid.loadColumns(currStartHour, currEndHour, getCurrNumCol());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        reloadTimeTable();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Loads the {@code TimeTable} stored in this {@code TimeTablePanel}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private void reloadTimeTable() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTablePanelMainGrid.clearGrid();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        updateDimensions();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (TimeSlot timeSlot : timeTableLastLoaded.getTimeSlots()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            timeTablePanelMainGrid.addTimeSlot(timeSlot, currRowDimensions, currColDimensions, currStartHour);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (timeTableLastLoaded instanceof DeconflictTimeTable) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            DeconflictTimeTable inverse \u003d ((DeconflictTimeTable) timeTableLastLoaded).getInverse();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            for (TimeSlot timeSlot : inverse.getTimeSlots()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                timeTablePanelMainGrid.addTimeSlot(timeSlot, currRowDimensions, currColDimensions, currStartHour);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // To be changed if 7-day week is desired"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private int getCurrNumRow() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return 5;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private int getCurrNumCol() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return (int) Duration.between(currStartHour, currEndHour).toHours();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private void handleTimeTableChangedEvent(TimeTableChangedEvent event) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        loadTimeTable(event.getNewTimeTable());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 108,
      "alexiscatnip": 15,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimeTablePanelDayMarkerGrid.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.geometry.HPos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Displays the days of the week on the left of {@code TimeTablePanel}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeTablePanelDayMarkerGrid extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String FXML \u003d \"TimeTablePanelDayMarkerGrid.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private GridPane dayMarkerGrid;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeTablePanelDayMarkerGrid() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        populateDays();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // To prevent triggering events for typing inside the TimeTablePanelTimeMarkerGrid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Populates the timings on the top row from 1000 to 1800"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private void populateDays() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DayOfWeek[] days \u003d DayOfWeek.values();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            Label label \u003d new Label((days[i].getDisplayName(TextStyle.SHORT, Locale.ENGLISH)).toUpperCase());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            dayMarkerGrid.add(label, 0, i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            GridPane.setHalignment(label, HPos.CENTER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nianfei97": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimeTablePanelMainGrid.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.scene.layout.ColumnConstraints;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Placeholder grid for {@code TimeTablePanelTimeSlot}s on the center of {@code TimeTablePanel}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class TimeTablePanelMainGrid extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final String FXML \u003d \"TimeTablePanelMainGrid.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private GridPane mainGrid;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeTablePanelMainGrid(int numCol) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        loadColumns(numCol);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // To prevent triggering events for typing inside the timeTablePanelMainGrid"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void clearGrid() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        mainGrid.getChildren().retainAll(mainGrid.getChildren().get(0));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Loads a grid with the specified number of columns"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param numCol Number of columns to be loaded"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void loadColumns(int numCol) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        mainGrid.getColumnConstraints().clear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (int i \u003d 0; i \u003c numCol; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            ColumnConstraints col \u003d new ColumnConstraints(5.0, 1000.0, 1000.0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            mainGrid.getColumnConstraints().add(col);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Adds a {@code TimeTablePanelTimeSlot} to the {@code TimeTablePanelMainGrid}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param input {@code TimeSlot} to add"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param currRowDim Dimensions of the rows in the current grid"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param currColDim Dimensions of the columns in the current grid"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param currStart Start hour in the grid"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void addTimeSlot(TimeSlot input, double currRowDim, double currColDim, LocalTime currStart) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // Currently only supports 5-day work week"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        if (input.getDayOfWeek() \u003d\u003d DayOfWeek.SATURDAY || input.getDayOfWeek() \u003d\u003d DayOfWeek.SUNDAY) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTablePanelTimeSlot panelTimeSlot \u003d new TimeTablePanelTimeSlot(input, currRowDim, currColDim);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        mainGrid.add(panelTimeSlot.getBox(), getColIndex(input, currStart), getRowIndex(input));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private int getColIndex(TimeSlot timeSlot, LocalTime currStartHour) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return timeSlot.getStartTime().getHour() - currStartHour.getHour();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private int getRowIndex(TimeSlot timeSlot) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return timeSlot.getDayOfWeek().getValue() - 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 49,
      "alexiscatnip": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimeTablePanelTimeMarkerGrid.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.geometry.HPos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.geometry.VPos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.scene.layout.ColumnConstraints;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Displays the time of the day on the top of {@code TimeTablePanel}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeTablePanelTimeMarkerGrid extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String FXML \u003d \"TimeTablePanelTimeMarkerGrid.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private GridPane timingGrid;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeTablePanelTimeMarkerGrid(LocalTime start, LocalTime end, int numCols) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        loadColumns(start, end, numCols);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // To prevent triggering events for typing inside the TimeTablePanelTimeMarkerGrid"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Loads a grid with the specified number of columns"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @param numCol Number of columns to be loaded"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void loadColumns(LocalTime start, LocalTime end, int numCol) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timingGrid.getColumnConstraints().clear();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timingGrid.getChildren().clear();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // Add column to align with day markers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timingGrid.getColumnConstraints().add(new ColumnConstraints(60.0, 60.0, 60.0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (int i \u003d 0; i \u003c numCol * 2; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            ColumnConstraints col \u003d new ColumnConstraints(5.0, 500.0, 500.0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            timingGrid.getColumnConstraints().add(col);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        populateTimings(start.getHour(), end.getHour());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Populates the timings on the top row from {@code startHour} to {@code endHour}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private void populateTimings(int startHour, int endHour) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (int currHour \u003d startHour, col \u003d 0; currHour \u003c endHour; currHour++, col +\u003d 2) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            Label hourLabel \u003d new Label(String.format(\"%02d\", currHour));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            GridPane.setHalignment(hourLabel, HPos.RIGHT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            GridPane.setValignment(hourLabel, VPos.BOTTOM);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            timingGrid.add(hourLabel, col, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            Label minuteLabel \u003d new Label(\"00\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            GridPane.setHalignment(minuteLabel, HPos.LEFT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            GridPane.setValignment(minuteLabel, VPos.BOTTOM);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            timingGrid.add(minuteLabel, col + 1, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 38,
      "alexiscatnip": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimeTablePanelTimeSlot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * A graphical representation of a {@code TimeSlot} to be displayed on the UI"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeTablePanelTimeSlot {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public final TimeSlot timeSlot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private Rectangle box;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public TimeTablePanelTimeSlot(TimeSlot timeSlot, double currRowDimensions, double currColDimensions) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        box \u003d new Rectangle(currColDimensions * timeSlot.getDuration().toMinutes() / 60.0, currRowDimensions);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        box.setTranslateX(timeSlot.getStartTime().getMinute() / 60.0 * currColDimensions);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        box.setFill(timeSlot.getColor());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        box.setOpacity(0.5);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        box.setArcHeight(10);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        box.setArcWidth(10);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (!(other instanceof TimeTablePanelTimeSlot)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        TimeTablePanelTimeSlot card \u003d (TimeTablePanelTimeSlot) other;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return timeSlot.equals(card.timeSlot);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public Rectangle getBox() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return box;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 20,
      "alexiscatnip": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.SuccessfulLoginEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.Security;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/FreeTime_32.png\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Security security;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs, Security security) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.security \u003d security;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        //Set the application icon"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic, security);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            //Gets rid of the login window when testing, can remove this once released"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            if (security.getAuthentication()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                //CLI for Authentication"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                mainWindow.fillSecurityCommandBox();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleSuccessfulLoginEvent(SuccessfulLoginEvent loginSuccess) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 2,
      "-": 114,
      "bennchong": 20
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ".timetable-pane {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    -fx-background-color: #e2e2e2;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "bennchong"
        },
        "content": "#securityResultDisplay .content {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "#tags .brown {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "#tags .pink {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "#tags .black {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "#tags .grey {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 41,
      "alexiscatnip": 4,
      "-": 347,
      "bennchong": 7
    }
  },
  {
    "path": "src/main/resources/view/LoginWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.PasswordField?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003cImage url\u003d\"@/images/login.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cGridPane hgap\u003d\"8.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"200.0\" prefWidth\u003d\"300.0\" vgap\u003d\"10.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cLabel layoutX\u003d\"20.0\" layoutY\u003d\"72.0\" text\u003d\"Password:\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cTextField id\u003d\"username\" promptText\u003d\"Username\" GridPane.columnIndex\u003d\"1\" fx:id\u003d\"usernameTextField\" \u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cPasswordField id\u003d\"password\" promptText\u003d\"Password\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" fx:id\u003d\"passwordTextField\" onAction\u003d\"#handleLoginClick\" \u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/PasswordField\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cLabel text\u003d\"Username:\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cButton mnemonicParsing\u003d\"false\" text\u003d\"Register\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"RIGHT\" GridPane.rowIndex\u003d\"2\" onAction\u003d\"#handleRegisterClick\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cButton mnemonicParsing\u003d\"false\" text\u003d\"Log In\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\" onAction\u003d\"#handleLoginClick\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cLabel fx:id\u003d\"label\" textFill\u003d\"RED\" text\u003d\"\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bennchong": 59
    }
  },
  {
    "path": "src/main/resources/view/LoginWindowSB.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003cGridPane hgap\u003d\"8.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"200.0\" prefWidth\u003d\"300.0\" vgap\u003d\"10.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cLabel layoutX\u003d\"20.0\" layoutY\u003d\"72.0\" text\u003d\"Password:\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cTextField id\u003d\"username\" promptText\u003d\"Username\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/TextField\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cTextField id\u003d\"password\" promptText\u003d\"Password\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/TextField\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cLabel text\u003d\"Username:\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cLabel text\u003d\"Label\" textFill\u003d\"RED\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cButton mnemonicParsing\u003d\"false\" text\u003d\"Register\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"RIGHT\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cButton contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" text\u003d\"Log In\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "bennchong": 44
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "         minWidth\u003d\"1280\" minHeight\u003d\"720\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    \u003cImage url\u003d\"@/images/FreeTime_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                   minHeight\u003d\"150\" prefHeight\u003d\"500\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "              \u003cText id\u003d\"meText\" fx:id\u003d\"meText\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                  \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "              \u003cStackPane fx:id\u003d\"mePanelPlaceholder\" minHeight\u003d\"110\" maxHeight\u003d\"110\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "              \u003cSplitPane id\u003d\"splitteringPane\" fx:id\u003d\"splitteringPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                  \u003cVBox fx:id\u003d\"FriendsList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                    \u003cText id\u003d\"friendText\" fx:id\u003d\"friendText\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "              \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            \u003cSplitPane id\u003d\"splitterPane\" fx:id\u003d\"splitterPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "              \u003cVBox fx:id\u003d\"nonFriendsList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u003cText id\u003d\"personText\" fx:id\u003d\"personText\"/\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                  \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u003cStackPane fx:id\u003d\"otherListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "          \u003cStackPane fx:id\u003d\"timetablePlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 25,
      "nianfei97": 1,
      "alexiscatnip": 1,
      "-": 61,
      "bennchong": 4
    }
  },
  {
    "path": "src/main/resources/view/MainWindowSB.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.MenuButton?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003cMenuBar id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003citems\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cMenuItem id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "               \u003cgraphic\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                  \u003cMenuButton mnemonicParsing\u003d\"false\" text\u003d\"MenuButton\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                      \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Action 1\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                      \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Action 2\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                  \u003c/MenuButton\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "               \u003c/graphic\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003c/MenuItem\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/items\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cMenu mnemonicParsing\u003d\"false\" onAction\u003d\"#handleLogout\" text\u003d\"Logout\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "          \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Action 1\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003cStackPane id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003cStackPane id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cInsets bottom\u003d\"5\" left\u003d\"5\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003cSplitPane id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cVBox id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cStackPane id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cStackPane id\u003d\"timetablePlaceholder\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003cStackPane id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bennchong": 66
    }
  },
  {
    "path": "src/main/resources/view/MePanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    \u003cListView fx:id\u003d\"meView\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 8
    }
  },
  {
    "path": "src/main/resources/view/OtherListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    \u003cListView fx:id\u003d\"otherListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 9
    }
  },
  {
    "path": "src/main/resources/view/OtherPersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 33
    }
  },
  {
    "path": "src/main/resources/view/RegistrationWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.PasswordField?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003cImage url\u003d\"@/images/login.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cGridPane hgap\u003d\"8.0\" maxHeight\u003d\"-Infinity\"  minHeight\u003d\"200\" minWidth\u003d\"800\" prefHeight\u003d\"276.0\" prefWidth\u003d\"800\" vgap\u003d\"10.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cColumnConstraints hgrow\u003d\"ALWAYS\" maxWidth\u003d\"400\" minWidth\u003d\"300\" prefWidth\u003d\"330\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cColumnConstraints hgrow\u003d\"ALWAYS\" maxWidth\u003d\"400\" minWidth\u003d\"300\" prefWidth\u003d\"340\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cLabel text\u003d\"Username\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cLabel layoutX\u003d\"20.0\" layoutY\u003d\"72.0\" text\u003d\"Password\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cLabel text\u003d\"Email\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cLabel text\u003d\"Phone\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cLabel text\u003d\"Address\" GridPane.rowIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cTextField id\u003d\"username\" promptText\u003d\"Username\" GridPane.columnIndex\u003d\"1\" fx:id\u003d\"usernameTextField\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cPasswordField id\u003d\"password\" promptText\u003d\"Password\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" fx:id\u003d\"passwordTextField\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/PasswordField\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cButton mnemonicParsing\u003d\"false\" text\u003d\"Register\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"5\" onAction\u003d\"#handleRegister\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cTextField id\u003d\"email\" promptText\u003d\"abs@nus.edu.sg\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\" fx:id\u003d\"emailTextField\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cTextField id\u003d\"phone\" promptText\u003d\"8888 8888\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\" fx:id\u003d\"phoneTextField\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cTextField id\u003d\"address\" promptText\u003d\"38 Oxley Road\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"4\" fx:id\u003d\"addressTextField\" onAction\u003d\"#handleRegister\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cLabel id\u003d\"label\" fx:id\u003d\"label\" text\u003d\" \" textFill\u003d\"RED\" GridPane.rowIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bennchong": 78
    }
  },
  {
    "path": "src/main/resources/view/RegistrationWindowSB.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003cGridPane hgap\u003d\"8.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"276.0\" prefWidth\u003d\"386.0\" vgap\u003d\"10.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"281.59998474121096\" minWidth\u003d\"10.0\" prefWidth\u003d\"120.39998779296874\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"300.5999755859375\" minWidth\u003d\"10.0\" prefWidth\u003d\"238.00001220703123\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "  \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cLabel text\u003d\"Username\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cLabel layoutX\u003d\"20.0\" layoutY\u003d\"72.0\" text\u003d\"Password\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cLabel text\u003d\"Email\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cLabel text\u003d\"Phone\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cLabel text\u003d\"Address\" GridPane.rowIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cTextField id\u003d\"username\" promptText\u003d\"Username\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/TextField\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cTextField id\u003d\"password\" promptText\u003d\"Password\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/TextField\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cButton mnemonicParsing\u003d\"false\" text\u003d\"Register\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cTextField id\u003d\"email\" promptText\u003d\"abs@nus.edu.sg\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/TextField\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cTextField id\u003d\"phone\" promptText\u003d\"8888 8888\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/TextField\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cTextField id\u003d\"address\" promptText\u003d\"38 Oxley Road\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003c/TextField\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cLabel text\u003d\"Label\" textFill\u003d\"RED\" GridPane.rowIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "      \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "bennchong": 64
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "   \u003cTextArea prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "bennchong": 2
    }
  },
  {
    "path": "src/main/resources/view/SecurityResultDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003cHBox fx:id\u003d\"placeHolder\" minHeight\u003d\"300.0\" minWidth\u003d\"500.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003cVBox HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cLabel prefWidth\u003d\"300.0\" text\u003d\"Security Commands\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cLabel text\u003d\"1. Login\" textFill\u003d\"WHITE\" underline\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Command:\u0026#10;  login u/\u0026lt;Username\u0026gt; pw/\u0026lt;Password\u0026gt;\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/Text\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cLabel text\u003d\"2. Register\" textFill\u003d\"WHITE\" underline\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Command:\u0026#10;  register u/\u0026lt;Username\u0026gt; pw/\u0026lt;Password\u0026gt; e/[Email] p/[HandPhone] a/[Address] \"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/Text\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cLabel text\u003d\"3. UI\" textFill\u003d\"WHITE\" underline\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"command:  \u0026#10;  ui\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/Text\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"*Note*\u0026#10;The fields between \u0026lt;\u0026gt; are compulsory\u0026#10;But [ ] are optional\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        \u003cInsets top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003c/Text\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003cTextArea fx:id\u003d\"securityResultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bennchong": 58
    }
  },
  {
    "path": "src/main/resources/view/TimeTablePanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003cBorderPane minHeight\u003d\"600\" minWidth\u003d\"800\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "  \u003cleft\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003cGridPane fx:id\u003d\"timeTablePanelDayMarkerGridPlaceholder\" maxWidth\u003d\"60.0\" minWidth\u003d\"60.0\" prefWidth\u003d\"60.0\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "  \u003c/left\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "  \u003ctop\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003cGridPane fx:id\u003d\"timeTablePanelTimeMarkerGridPlaceholder\" maxWidth\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "  \u003c/top\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "  \u003ccenter\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003cGridPane fx:id\u003d\"timeTablePanelMainGridPlaceholder\" maxWidth\u003d\"Infinity\" minWidth\u003d\"0\" prefWidth\u003d\"900\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "  \u003c/center\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 20,
      "alexiscatnip": 4
    }
  },
  {
    "path": "src/main/resources/view/TimeTablePanelDayMarkerGrid.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003cGridPane fx:id\u003d\"dayMarkerGrid\" gridLinesVisible\u003d\"true\" maxWidth\u003d\"60.0\" minWidth\u003d\"60.0\" prefHeight\u003d\"400.0\" prefWidth\u003d\"60.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "          \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "          \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "          \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "          \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "          \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 21
    }
  },
  {
    "path": "src/main/resources/view/TimeTablePanelMainGrid.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003cGridPane xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"mainGrid\" alignment\u003d\"BASELINE_LEFT\" gridLinesVisible\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "  \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "  \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 2,
      "alexiscatnip": 12
    }
  },
  {
    "path": "src/main/resources/view/TimeTablePanelTimeMarkerGrid.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\" \u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "  \u003cGridPane fx:id\u003d\"timingGrid\" alignment\u003d\"BOTTOM_LEFT\" gridLinesVisible\u003d\"false\" minHeight\u003d\"50.0\" \u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "      \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 3,
      "alexiscatnip": 10
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PersonListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    //private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 4,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.Security;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.storage.AppUsersStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.storage.JsonAppUsersStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected Security user;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        AppUsersStorage appUsersStorage \u003d new JsonAppUsersStorage(config.getAppUsersFilePath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        appUsers \u003d initUsers(appUsersStorage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, appUsersStorage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.matchUserToPerson(\"test\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        user \u003d new SecurityManager(true, logic, appUsers);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs, user);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 2,
      "-": 119,
      "bennchong": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/ModelManagerTestUserStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.model.TimeTableChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.LogoutEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.User;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.VersionedAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.person.CombinedFriendPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.person.CombinedOtherPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.person.FriendListPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.person.OtherListPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class ModelManagerTestUserStub extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManagerTestUserStub.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final FilteredList\u003cPerson\u003e friendList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final FilteredList\u003cPerson\u003e otherList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final TimeTable timeTable;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private ObservableList\u003cPerson\u003e list;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, userPrefs, timeTable."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ModelManagerTestUserStub(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        friendList \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        otherList \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        timeTable \u003d new TimeTable();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        person \u003d SampleDataUtil.getSamplePerson();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        user \u003d new User(person.getData());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ModelManagerTestUserStub() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public TimeTable getTimeTable() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return timeTable;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //TODO Check whether this actually works when modifying your own data."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (user !\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            matchUserToPerson(user.getName().toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /** Raises an event to indicate the timetable has changed */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private void indicateTimeTableChanged() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        raise(new TimeTableChangedEvent(timeTable));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean hasPersonToRegister(Person person) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return versionedAddressBook.hasPersonToRegister(person);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void updateTimeTable(TimeTable timeTable) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        requireNonNull(timeTable);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.timeTable.updateTimeTable(timeTable);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        indicateTimeTableChanged();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void updateFriendList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        friendList.setPredicate(combinedFriendPredicate(predicate, friendsPredicateFromPerson(user)));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void updateOtherList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        otherList.setPredicate(combinedOtherPredicate(predicate, othersPredicateFromPerson(user)));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ObservableList\u003cPerson\u003e getMeList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        filteredPersons.setPredicate(p -\u003e p.getName().equals(user.getName()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ObservableList\u003cPerson\u003e getOtherList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        otherList.setPredicate(othersPredicateFromPerson(user));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return FXCollections.unmodifiableObservableList(otherList);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ObservableList\u003cPerson\u003e getOtherList(Person person) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        otherList.setPredicate(othersPredicateFromPerson(person));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return FXCollections.unmodifiableObservableList(otherList);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ObservableList\u003cPerson\u003e getCurrentOtherList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return FXCollections.unmodifiableObservableList(otherList);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ObservableList\u003cPerson\u003e getCurrentFriendList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return FXCollections.unmodifiableObservableList(friendList);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFriendList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        friendList.setPredicate(friendsPredicateFromPerson(user));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return FXCollections.unmodifiableObservableList(friendList);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        // TODO: Implement after user comes online"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        // indicateTimeTableChanged(user.getTimeTable());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        // TODO: Implement after user comes online"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        // indicateTimeTableChanged(user.getTimeTable());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (!(obj instanceof ModelManagerTestUserStub)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        ModelManagerTestUserStub other \u003d (ModelManagerTestUserStub) obj;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \u0026\u0026 timeTable.equals(other.timeTable);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public FriendListPredicate friendsPredicateFromPerson(Person person) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return new FriendListPredicate(person);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public OtherListPredicate othersPredicateFromPerson(Person person) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return new OtherListPredicate(person);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Combines the predicates to allow SetPredicate to be called"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @param friendListPredicate"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public CombinedFriendPredicate combinedFriendPredicate(Predicate\u003cPerson\u003e predicate,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                                                           FriendListPredicate friendListPredicate) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return new CombinedFriendPredicate(predicate, friendListPredicate);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public CombinedOtherPredicate combinedOtherPredicate(Predicate\u003cPerson\u003e predicate,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                                                         OtherListPredicate otherListPredicate) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return new CombinedOtherPredicate(predicate, otherListPredicate);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void matchUserToPerson(String name) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        list \u003d versionedAddressBook.getPersonList();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //Loops through personlist to get matched name Person Class"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        for (Person person : list) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            if (name.equals(person.getName().toString())) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                this.user \u003d new User(person.getData());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void clearUser() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.user \u003d null;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public User getUser() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //TODO Can you do this? Must you create a new object to be returned instead?"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return this.user;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void commandLogout() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        raise(new LogoutEvent());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 306
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : FreeTime v1.4\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/FreeTime_32.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/IcsUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class IcsUtilTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"IcsUtilTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.ics\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.ics\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final Path REAL_FILE \u003d TEST_DATA_FOLDER.resolve(\"real.ics\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"temp.ics\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final TimeTable TYPICAL_TIMETABLE \u003d TypicalTimeSlots.getTypicalTimeTable();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final ZoneId ZONE_ID \u003d ZoneId.of(\"Asia/Shanghai\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    //read"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void readTimeTableFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        IcsUtil.getInstance().readTimeTableFromFile(null, ZONE_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void readTimeTableFromFile_missingFile_throwsIoException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        thrown.expect(IOException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        IcsUtil.getInstance().readTimeTableFromFile(MISSING_FILE, ZONE_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void readTimeTableFromFile_emptyFile_successReturnsOptionalIsNotPresent() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        TimeTable dataFromFile \u003d IcsUtil.getInstance().readTimeTableFromFile(EMPTY_FILE, ZONE_ID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assert (dataFromFile.isEmpty());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    //tests able to read."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void readTimeTableFromFile_validFile_successReturnsOptionalIsPresent() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        TimeTable dataFromFile \u003d IcsUtil.getInstance().readTimeTableFromFile(REAL_FILE, ZONE_ID);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assert (!dataFromFile.isEmpty());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertEquals(11, dataFromFile.getTimeSlots().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    //save"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void saveTimeTableToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        IcsUtil.getInstance().saveTimeTableToFile(TYPICAL_TIMETABLE, ZONE_ID, null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void saveTimeTableToFile_nullTimeTable_throwsIoException() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        IcsUtil.getInstance().saveTimeTableToFile(null, ZONE_ID, TEMP_FILE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void saveTimeTableToFile_validParams_success() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //no exception expected; successful"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        IcsUtil.getInstance().saveTimeTableToFile(TYPICAL_TIMETABLE, ZONE_ID, TEMP_FILE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    //saves the typical timetable, and then reads it again. tests that the timetables are the same."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void saveThenRead_validParams_success() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        IcsUtil.getInstance().saveTimeTableToFile(TYPICAL_TIMETABLE, ZONE_ID, TEMP_FILE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        TimeTable expected \u003d IcsUtil.getInstance().readTimeTableFromFile(TEMP_FILE, ZONE_ID);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertEquals(expected, TYPICAL_TIMETABLE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.ModelManagerTestUserStub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityAuthenticationException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Model model \u003d new ModelManagerTestUserStub();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //History Commands records itself in implementation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        String invalidCommand2 \u003d \"history\\nuicfhmowqewca\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertHistoryCorrect(invalidCommand2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        String invalidCommand2 \u003d \"history\\n\" + listCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertHistoryCorrect(invalidCommand2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Model expectedModel \u003d new ModelManagerTestUserStub(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            logic.parseCommandWord(inputCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (CommandException | ParseException | SecurityAuthenticationException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            logic.parseCommandWord(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (ParseException | CommandException | SecurityAuthenticationException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 109,
      "bennchong": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTimeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.commands.AddTimeCommand.MESSAGE_ADD_TIMESLOT_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.ModelManagerTestUserStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class AddTimeCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Model model \u003d new ModelManagerTestUserStub(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Model expectedModel \u003d new ModelManagerTestUserStub(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void constructor_nullTimeSlot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        new AddTimeCommand(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void execute_timeSlotAccepted_addSuccessful() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot toAdd \u003d TypicalTimeSlots.WED_10_TO_12;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection\u003cTimeSlot\u003e expectedTimeSlots \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedTimeSlots.addAll(TypicalTimeSlots.getTypicalTimeSlots());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedTimeSlots.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable expectedTimeTable \u003d new TimeTable(expectedTimeSlots);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ADD_TIMESLOT_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person lastPerson \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTags(\"friends\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTimeTable(new TimeTable(TypicalTimeSlots.getTypicalTimeTable())).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTags(\"friends\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTimeTable(expectedTimeTable).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        AddTimeCommand command \u003d new AddTimeCommand(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.updateTimeTable(expectedTimeTable);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void execute_timeSlotOverlaps_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot toAdd \u003d TypicalTimeSlots.MON_8_TO_10;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        AddTimeCommand command \u003d new AddTimeCommand(toAdd);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expectMessage(AddTimeCommand.MESSAGE_OVERLAP_TIMESLOT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        command.execute(model, commandHistory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        AddTimeCommand addMon8To10Command \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new AddTimeCommand(TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        AddTimeCommand addTue8To10Command \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new AddTimeCommand(TypicalTimeSlots.TUE_10_TO_12);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(addMon8To10Command.equals(addMon8To10Command));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        AddTimeCommand addMon8To10CommandCopy \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new AddTimeCommand(TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(addMon8To10Command.equals(addMon8To10CommandCopy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(addMon8To10Command.equals(1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(addMon8To10Command.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // different timeslot -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(addMon8To10Command.equals(addTue8To10Command));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 108,
      "bennchong": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.ModelManagerTestUserStub;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void execute_nonEmptyTimeTable_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Model model \u003d new ModelManagerTestUserStub(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Model expectedModel \u003d new ModelManagerTestUserStub(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        String expectedMessage \u003d ClearCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person lastPerson \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTags(\"friends\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTimeTable(new TimeTable(TypicalTimeSlots.getTypicalTimeTable())).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTags(\"friends\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTimeTable(new TimeTable()).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ClearCommand command \u003d new ClearCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.updateTimeTable(new TimeTable());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 24,
      "-": 23,
      "bennchong": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityAuthenticationException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String VALID_PASSWORD \u003d \"testtest\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_USERNAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_USERNAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String PASSWORD_DESC \u003d \" \" + PREFIX_PASSWORD + VALID_PASSWORD;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_USERNAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"CS2101*\"; // Invalid characters not allowed"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (CommandException | SecurityAuthenticationException ce) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (SecurityAuthenticationException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            //TODO INCLUDE TEST FOR THIS"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public static void showOtherPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getOtherList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person person \u003d model.getOtherList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.updateOtherList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertEquals(7, model.getOtherList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 16,
      "-": 135,
      "bennchong": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.ModelManagerTestUserStub;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Model model \u003d new ModelManagerTestUserStub(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        ModelManagerTestUserStub expectedModel \u003d new ModelManagerTestUserStub(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Model expectedModel \u003d new ModelManagerTestUserStub(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Model expectedModel \u003d new ModelManagerTestUserStub(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Ignore(\"Application have no longer delete function at this moment\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Model expectedModel \u003d new ModelManagerTestUserStub(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 169,
      "bennchong": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteTimeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.commands.DeleteTimeCommand.MESSAGE_DELETE_TIMESLOT_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.ModelManagerTestUserStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class DeleteTimeCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Model model \u003d new ModelManagerTestUserStub(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Model expectedModel \u003d new ModelManagerTestUserStub(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void constructor_nullTimeSlot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        new DeleteTimeCommand(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void execute_timeSlotAccepted_deleteSuccessful() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot toDelete \u003d TypicalTimeSlots.MON_8_TO_10;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection\u003cTimeSlot\u003e expectedTimeSlots \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedTimeSlots.addAll(TypicalTimeSlots.getTypicalTimeSlots());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedTimeSlots.remove(toDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable expectedTimeTable \u003d new TimeTable(expectedTimeSlots);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELETE_TIMESLOT_SUCCESS, toDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person lastPerson \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTags(\"friends\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTimeTable(new TimeTable(TypicalTimeSlots.getTypicalTimeTable())).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTags(\"friends\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                .withTimeTable(expectedTimeTable).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeleteTimeCommand command \u003d new DeleteTimeCommand(toDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.updateTimeTable(expectedTimeTable);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void execute_timeSlotDoesNotExist_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot toDelete \u003d TypicalTimeSlots.WED_10_TO_12;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeleteTimeCommand command \u003d new DeleteTimeCommand(toDelete);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expectMessage(DeleteTimeCommand.MESSAGE_TIMESLOT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        command.execute(model, commandHistory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeleteTimeCommand deleteMon8To10Command \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new DeleteTimeCommand(TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeleteTimeCommand deleteTue8To10Command \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new DeleteTimeCommand(TypicalTimeSlots.TUE_10_TO_12);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(deleteMon8To10Command.equals(deleteMon8To10Command));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeleteTimeCommand deleteMon8To10CommandCopy \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new DeleteTimeCommand(TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(deleteMon8To10Command.equals(deleteMon8To10CommandCopy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(deleteMon8To10Command.equals(1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(deleteMon8To10Command.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // different timeslot -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(deleteMon8To10Command.equals(deleteTue8To10Command));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 108,
      "bennchong": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.ModelManagerTestUserStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Model model \u003d new ModelManagerTestUserStub(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Model expectedModel \u003d new ModelManagerTestUserStub(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        expectedModel.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        expectedModel.updatePerson(model.getUser(), editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.matchUserToPerson(\"George Best\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person lastPerson \u003d model.getUser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person editedPerson \u003d personInList.withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Model expectedModel \u003d new ModelManagerTestUserStub(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        expectedModel.matchUserToPerson(\"George Best\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(new EditPersonDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person editedPerson \u003d model.getUser();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Model expectedModel \u003d new ModelManagerTestUserStub(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        expectedModel.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * This test is not supposed to pass anymore, passing an \"n/\" field should throw an exception"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person secondPerson \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(secondPerson).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(descriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * This test is not supposed to pass anymore, passing an \"n/\" field should throw an exception"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Person personToEdit \u003d model.getUser();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Model expectedModel \u003d new ModelManagerTestUserStub(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(DESC_BOB)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 34,
      "nianfei97": 4,
      "-": 126,
      "bennchong": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.logic.commands.ExportCommand.MESSAGE_EXPORT_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.logic.commands.ImportCommand.MESSAGE_IMPORT_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.DeconflictTimeTable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * A system test that uses a model stub."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ExportCommandTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"temp.ics\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final TimeTable TYPICAL_TIMETABLE \u003d TypicalTimeSlots.getTypicalTimeTable();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void constructor_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        new ExportCommand(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void execute_emptyTimeTable_failure() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ModelStubImportExportCommand actualModelStub \u003d new ModelStubImportExportCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //model has an empty TimeTable. We try to export it."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Command command \u003d new ExportCommand(TEMP_FILE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        thrown.expectMessage(String.format(ExportCommand.MESSAGE_EMPTY));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        command.execute(actualModelStub, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void execute_deconflictTimeTable_failure() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ModelStubImportExportCommand actualModelStub \u003d new ModelStubImportExportCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //update the timetable in the modelstub with a deconflictTimeTable"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        DeconflictTimeTable deconflict \u003d new DeconflictTimeTable();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        deconflict.addTimeTable(TYPICAL_TIMETABLE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        actualModelStub.updateTimeTable(deconflict);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Command command \u003d new ExportCommand(TEMP_FILE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        thrown.expectMessage(String.format(ExportCommand.MESSAGE_INVALID_TIMETABLE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        command.execute(actualModelStub, commandHistory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * tests if you can export a typical timetable. (without testing the data integrity of the exported timetable)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void execute_validFilePath_exportSuccessful() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ModelStubImportExportCommand actualModelStub \u003d new ModelStubImportExportCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        actualModelStub.updateTimeTable(TYPICAL_TIMETABLE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Command command \u003d new ExportCommand(TEMP_FILE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        CommandResult commandResult \u003d command.execute(actualModelStub, commandHistory);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPORT_SUCCESS, TEMP_FILE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertEquals(expectedMessage, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * tests if you can export a typical timetable."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * then attempts to import back the timetable (to a fresh ModelStub that has no TimeTable)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Tests if the imported timetable data is same as the exported timetable\u0027s data"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void execute_exportAndThenImport_successful() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //attempt export"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ModelStubImportExportCommand exportModelStub \u003d new ModelStubImportExportCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        exportModelStub.updateTimeTable(TYPICAL_TIMETABLE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Command command \u003d new ExportCommand(TEMP_FILE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        CommandResult commandResult \u003d command.execute(exportModelStub, commandHistory);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String expectedMessageExport \u003d String.format(MESSAGE_EXPORT_SUCCESS, TEMP_FILE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertEquals(expectedMessageExport, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //export is successful"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //attempt import"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ModelStubImportExportCommand importModelStub \u003d new ModelStubImportExportCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Command importCommand \u003d new ImportCommand(TEMP_FILE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        commandResult \u003d importCommand.execute(importModelStub, commandHistory);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertEquals(importModelStub.getTimeTable(), exportModelStub.getTimeTable());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String expectedMessageImport \u003d String.format(MESSAGE_IMPORT_SUCCESS, TEMP_FILE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertEquals(expectedMessageImport, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //import is successful"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.ModelManagerTestUserStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Model model \u003d new ModelManagerTestUserStub(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Model expectedModel \u003d new ModelManagerTestUserStub(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.matchUserToPerson(\"test\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        expectedModel.updateFriendList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFriendList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * broke"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.matchUserToPerson(\"test\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 7,
      "-": 79,
      "bennchong": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FreeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class FreeCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        new FreeCommand(null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection\u003cIndex\u003e containsOne \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        containsOne.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection\u003cIndex\u003e containsOneAndTwo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        containsOneAndTwo.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        containsOneAndTwo.add(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        FreeCommand freeOne \u003d new FreeCommand(containsOne);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        FreeCommand freeOneAndTwo \u003d new FreeCommand(containsOneAndTwo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(freeOne.equals(freeOne));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        FreeCommand freeOneCopy \u003d new FreeCommand(containsOne);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(freeOne.equals(freeOneCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(freeOne.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(freeOne.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // different indices -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(freeOne.equals(freeOneAndTwo));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // TODO: Execution tests"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.ModelManagerTestUserStub;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Model model \u003d new ModelManagerTestUserStub();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Model expectedModel \u003d new ModelManagerTestUserStub();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "bennchong": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.logic.commands.ExportCommand.MESSAGE_EXPORT_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.logic.commands.ImportCommand.MESSAGE_IMPORT_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * A system test that uses a model stub."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ImportCommandTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.ics\"); //totally blank file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final Path NO_DATA_FILE \u003d TEST_DATA_FOLDER.resolve(\"no_data.ics\"); //no calendar data"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final Path NO_TT_DATA_FILE \u003d TEST_DATA_FOLDER.resolve(\"no_timetable_data.ics\"); //no timetable data"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.ics\"); //totally missing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final Path OVERLAP_FILE \u003d TEST_DATA_FOLDER.resolve(\"overlap.ics\"); //overlapping timeslot"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"temp.ics\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final Path TYPICAL_FILE \u003d TEST_DATA_FOLDER.resolve(\"typical.ics\"); //same data as TYPICAL_TIMETABLE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final TimeTable TYPICAL_TIMETABLE \u003d TypicalTimeSlots.getTypicalTimeTable();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void constructor_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        new ImportCommand(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    //Trying to import non-existent file; tell user it is missing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void execute_missingFile_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ModelStubImportExportCommand actualModelStub \u003d new ModelStubImportExportCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Command command \u003d new ImportCommand(MISSING_FILE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        thrown.expectMessage(String.format(ImportCommand.MESSAGE_IO_ERROR, MISSING_FILE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        command.execute(actualModelStub, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    //Trying to import file that has overlapping timeslots will fail."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void execute_overlapFile_showsMessageOverlap() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ModelStubImportExportCommand actualModelStub \u003d new ModelStubImportExportCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Command command \u003d new ImportCommand(OVERLAP_FILE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        thrown.expectMessage(String.format(ImportCommand.MESSAGE_FILE_OVERLAP_TIMESLOT, OVERLAP_FILE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        CommandResult commandResult \u003d command.execute(actualModelStub, commandHistory);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    //Trying to import file with no iCalendar data; tell user it is empty."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void execute_noICalendarDataFile_showsMessageEmpty() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ModelStubImportExportCommand actualModelStub \u003d new ModelStubImportExportCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Command command \u003d new ImportCommand(NO_DATA_FILE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        CommandResult commandResult \u003d command.execute(actualModelStub, commandHistory);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String expectedMessage \u003d String.format(ImportCommand.MESSAGE_FILE_EMPTY, NO_DATA_FILE.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertEquals(expectedMessage, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    //Trying to import file that has iCalendar data, but has no Timetable data; tell user it is empty."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void execute_noTimeTableDataFile_showsMessageEmpty() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ModelStubImportExportCommand actualModelStub \u003d new ModelStubImportExportCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Command command \u003d new ImportCommand(NO_TT_DATA_FILE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        CommandResult commandResult \u003d command.execute(actualModelStub, commandHistory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String expectedMessage \u003d String.format(ImportCommand.MESSAGE_FILE_EMPTY, NO_TT_DATA_FILE.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertEquals(expectedMessage, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    //Trying to import completely empty file; tell user it is empty."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void execute_emptyFile_showsMessageEmpty() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ModelStubImportExportCommand actualModelStub \u003d new ModelStubImportExportCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Command command \u003d new ImportCommand(EMPTY_FILE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        CommandResult commandResult \u003d command.execute(actualModelStub, commandHistory);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertEquals(String.format(ImportCommand.MESSAGE_FILE_EMPTY, EMPTY_FILE.toString()),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Tests if an imported timetable is identical to the expected timetable."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void execute_validFilePath_successful() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //TYPICAL_FILE contains the equivalent of TYPICAL_TIMETABLE"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        TimeTable expectedTimeTable \u003d TYPICAL_TIMETABLE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ModelStubImportExportCommand actualModelStub \u003d new ModelStubImportExportCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Command command \u003d new ImportCommand(TYPICAL_FILE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        CommandResult commandResult \u003d command.execute(actualModelStub, commandHistory);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertEquals(expectedTimeTable, actualModelStub.getTimeTable());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_IMPORT_SUCCESS, TYPICAL_FILE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertEquals(expectedMessage, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * tests if you can export a typical timetable and then immediately import this timetable"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     * Immediately then tests that the data is still the same."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void execute_exportAndThenImport_successful() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        ModelStubImportExportCommand actualModelStub \u003d new ModelStubImportExportCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        actualModelStub.updateTimeTable(TYPICAL_TIMETABLE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Command exportCommand \u003d new ExportCommand(TEMP_FILE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        CommandResult commandResult \u003d exportCommand.execute(actualModelStub, commandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //check export was successful"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String expectedMessageExport \u003d String.format(MESSAGE_EXPORT_SUCCESS, TEMP_FILE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertEquals(expectedMessageExport, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        Command importCommand \u003d new ImportCommand(TEMP_FILE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        commandResult \u003d importCommand.execute(actualModelStub, commandHistory);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //check import was successful, and timetable is the same"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertEquals(TYPICAL_TIMETABLE, actualModelStub.getTimeTable());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String expectedMessageImport \u003d String.format(MESSAGE_IMPORT_SUCCESS, TEMP_FILE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertEquals(expectedMessageImport, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 152
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showOtherPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.ModelManagerTestUserStub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        model \u003d new ModelManagerTestUserStub(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        expectedModel \u003d new ModelManagerTestUserStub(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.matchUserToPerson(\"test\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        model.matchUserToPerson(\"test\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        showOtherPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 4,
      "-": 36,
      "bennchong": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public TimeTable getTimeTable() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public boolean hasPersonToRegister(Person person) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void updateTimeTable(TimeTable timeTable) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void updateFriendList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void updateOtherList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFriendList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public ObservableList\u003cPerson\u003e getCurrentFriendList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public ObservableList\u003cPerson\u003e getOtherList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public ObservableList\u003cPerson\u003e getCurrentOtherList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public ObservableList\u003cPerson\u003e getMeList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void matchUserToPerson(String name) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public User getUser() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void clearUser() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void commandLogout() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 16,
      "alexiscatnip": 128,
      "bennchong": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStubImportExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " * A Model stub explicitly for import and export command testing."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class ModelStubImportExportCommand extends ModelStub {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private TimeTable timeTable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public ModelStubImportExportCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        person \u003d TypicalPersons.TEST;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        user \u003d new User(person.getData());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        timeTable \u003d new TimeTable();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        if (person.equals(target)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            person \u003d editedPerson;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            user \u003d new User(person.getData());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            updateTimeTable(person.getTimeTable());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //do nothing...?"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //do nothing"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void updateTimeTable(TimeTable newTimeTable) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        requireNonNull(newTimeTable);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //this.timeTable.updateTimeTable(newTimeTable);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        timeTable \u003d newTimeTable;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public User getUser() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return this.user;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public TimeTable getTimeTable() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        return timeTable;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.ModelManagerTestUserStub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final Model model \u003d new ModelManagerTestUserStub(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final Model expectedModel \u003d new ModelManagerTestUserStub(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.updateTimeTable(model.getUser().getTimeTable());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.updateTimeTable(expectedModel.getUser().getTimeTable());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 6,
      "-": 46,
      "bennchong": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RegisterCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code RegisterCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class RegisterCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        PersonBuilder personBuilder \u003d new PersonBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        personBuilder.withName(\"Test\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Person validPerson \u003d personBuilder.build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertCommandSuccess(new RegisterCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                String.format(RegisterCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertCommandFailure(new RegisterCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                RegisterCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "bennchong": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RegisterCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class RegisterCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        new RegisterCommand(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        CommandResult commandResult \u003d new RegisterCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertEquals(String.format(RegisterCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        RegisterCommand registerCommand \u003d new RegisterCommand(validPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        thrown.expectMessage(RegisterCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        registerCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        RegisterCommand addAliceCommand \u003d new RegisterCommand(alice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        RegisterCommand addBobCommand \u003d new RegisterCommand(bob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        RegisterCommand addAliceCommandCopy \u003d new RegisterCommand(alice);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        public boolean hasPersonToRegister(Person person) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return this.person.isSamePersonForRegister(person);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        public boolean hasPersonToRegister(Person person) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePersonForRegister);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            // called by {@code RegisterCommand#execute()}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 116,
      "bennchong": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.ModelManagerTestUserStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static Model expectedModel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static CommandHistory commandHistory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static void setupUser() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        model \u003d new ModelManagerTestUserStub(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        expectedModel \u003d new ModelManagerTestUserStub(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Command friendCommand \u003d new FriendCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        friendCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        friendCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        friendCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        friendCommand.execute(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        friendCommand.execute(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        friendCommand.execute(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        eventsCollectorRule.eventsCollector.reset();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Broken test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFriendList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.updateTimeTable(TypicalTimeSlots.getTypicalTimeTable());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFriendList().size() + 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Broken test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.updateTimeTable(TypicalTimeSlots.getTypicalTimeTable());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void execute_me_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        String nameSelected \u003d \"me\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, nameSelected);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Broken test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getFriendList().size());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        String nameSelected \u003d model.getFriendList().get(index.getZeroBased()).getName().toString();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, nameSelected);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 12,
      "nianfei97": 42,
      "-": 106,
      "bennchong": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TagCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.TEST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.ModelManagerTestUserStub;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.tag.TagsContainsKeywords;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class TagCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Model model \u003d new ModelManagerTestUserStub(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Model expectedModel \u003d new ModelManagerTestUserStub(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public void equals() throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        TagsContainsKeywords firstPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                new TagsContainsKeywords(ParserUtil.parseTags(Collections.singletonList(\"first\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        TagsContainsKeywords secondPredicate \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                new TagsContainsKeywords(ParserUtil.parseTags(Collections.singletonList(\"second\")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        TagCommand tagFirstCommand \u003d new TagCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        TagCommand tagSecondCommand \u003d new TagCommand(secondPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertTrue(tagFirstCommand.equals(tagFirstCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        TagCommand tagFirstCommandCopy \u003d new TagCommand(firstPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertTrue(tagFirstCommand.equals(tagFirstCommandCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertFalse(tagFirstCommand.equals(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertFalse(tagFirstCommand.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertFalse(tagFirstCommand.equals(tagSecondCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 7);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        TagsContainsKeywords predicate \u003d preparePredicate(\"friends owesMoney\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        TagCommand command \u003d new TagCommand(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        // TODO: Test is unable to recognise \"User\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        // assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(Arrays.asList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE, TEST), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     * Parses {@code userInput} into a {@code TagsContainsKeywords}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private TagsContainsKeywords preparePredicate(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        Collection\u003cString\u003e tagKeywords \u003d Arrays.asList(userInput.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new TagsContainsKeywords(ParserUtil.parseTags(tagKeywords));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 76,
      "nianfei97": 3,
      "bennchong": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.ModelManagerTestUserStub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final Model model \u003d new ModelManagerTestUserStub(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final Model expectedModel \u003d new ModelManagerTestUserStub(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.matchUserToPerson(\"Alice Pauline\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        model.updateTimeTable(model.getUser().getTimeTable());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expectedModel.updateTimeTable(expectedModel.getUser().getTimeTable());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 6,
      "-": 42,
      "bennchong": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddTimeCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.AddTimeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class AddTimeCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private ParserClassTest test \u003d new ParserClassTest();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private AddTimeCommandParser parser \u003d new AddTimeCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parse_validArgs_returnsAddTimeCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertParseSuccess(parser, \" monday 08:00-10:00 \","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new AddTimeCommand(TypicalTimeSlots.MON_8_TO_10));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parse_invalidTimeSlot_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertParseFailure(parser, \"monday\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTimeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 28,
      "bennchong": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookRegisterParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class AddressBookRegisterParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommand_register() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(PersonUtil.getRegisterCommand(person));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        RegisterCommand command \u003d (RegisterCommand) parser.parseCommandArguments();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertEquals(new RegisterCommand(person), command);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommandAlias_register() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(PersonUtil.getRegisterCommandAlias(person));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        RegisterCommand command \u003d (RegisterCommand) parser.parseCommandArguments();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertEquals(new RegisterCommand(person), command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AdressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class AdressBookParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private Command command;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof ClearCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof ClearCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommandAlias_clear() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof ClearCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS + \" 3\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof ClearCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof ExitCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof ExitCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommandAlias_exit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(ExitCommand.COMMAND_WORD_ALIAS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof ExitCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(ExitCommand.COMMAND_WORD_ALIAS + \" 3\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommandArguments();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommandAlias_find() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                FindCommand.COMMAND_WORD_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommandArguments();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof HelpCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof HelpCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommandAlias_help() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(HelpCommand.COMMAND_WORD_ALIAS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof HelpCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(HelpCommand.COMMAND_WORD_ALIAS + \" 3\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof HelpCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof HistoryCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof HistoryCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommandAlias_history() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(HistoryCommand.COMMAND_WORD_ALIAS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof HistoryCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(HistoryCommand.COMMAND_WORD_ALIAS + \" 3\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof HistoryCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof ListCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof ListCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommandAlias_list() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(ListCommand.COMMAND_WORD_ALIAS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof ListCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(ListCommand.COMMAND_WORD_ALIAS + \" 3\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof ListCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommandArguments();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommandAlias_select() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                SelectCommand.COMMAND_WORD_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommandArguments();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(RedoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof RedoCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(\"redo 1\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof RedoCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommandAlias_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(RedoCommand.COMMAND_WORD_ALIAS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof RedoCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(\"redo 1\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof RedoCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof UndoCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(\"undo 3\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof UndoCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommandAlias_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(UndoCommand.COMMAND_WORD_ALIAS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof UndoCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(\"undo 3\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        command \u003d parser.parseCommandArguments();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(command instanceof UndoCommand);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 235
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityAuthenticationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (SecurityAuthenticationException sae) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throw new AssertionError(\"Security Authentication Exception is thrown wrongly.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        } catch (SecurityAuthenticationException sae) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "bennchong": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteTimeCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.DeleteTimeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class DeleteTimeCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private ParserClassTest test \u003d new ParserClassTest();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private DeleteTimeCommandParser parser \u003d new DeleteTimeCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertParseSuccess(parser, \" monday 08:00-10:00 \","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                new DeleteTimeCommand(TypicalTimeSlots.MON_8_TO_10));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parse_invalidTimeSlot_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertParseFailure(parser, \"monday\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTimeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 28,
      "bennchong": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private ParserClassTest test \u003d new ParserClassTest();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertParseFailure(parser, \"e\", EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertParseFailure(parser, INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertParseFailure(parser, INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertParseFailure(parser, INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertParseFailure(parser, INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertParseFailure(parser, PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertParseFailure(parser, TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertParseFailure(parser, TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertParseFailure(parser, TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        String userInput \u003d PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(descriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        String userInput \u003d PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(descriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        String userInput \u003d NAME_DESC_AMY;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        userInput \u003d PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        expectedCommand \u003d new EditCommand(descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        userInput \u003d EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        expectedCommand \u003d new EditCommand(descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        userInput \u003d ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        expectedCommand \u003d new EditCommand(descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        userInput \u003d TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        expectedCommand \u003d new EditCommand(descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        String userInput \u003d PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        String userInput \u003d INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        userInput \u003d EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        expectedCommand \u003d new EditCommand(descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        String userInput \u003d TAG_EMPTY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 35,
      "-": 139,
      "bennchong": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PATH_FORBIDDEN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PATH_TOO_LONG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class ExportCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    //this string is 251 char long; enough to cause the ParseException."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final String INVALID_USER_INPUT_PATH_TOO_LONG \u003d \"longlonglonglonglonglonglonglonglonglong\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"longlonglonglonglonglonglonglonglonglonglonglonglon\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void parse_validArgs_returnsExportCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String applicationPath \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String userInput \u003d \"filename\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String fullFileName \u003d \"filename.ics\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String filePath \u003d applicationPath + \"\\\\\" + ParserUtil.IMPORT_EXPORT_FOLDER + \"\\\\\" + fullFileName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertParseSuccess(parser, userInput, new ExportCommand(Paths.get(filePath)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void parse_validArgsForwardSlash_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String applicationPath \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String userInput \u003d \"parent_folder/filename\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String parentFolder \u003d \"parent_folder\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String fullFileName \u003d \"filename.ics\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String filePath \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                applicationPath + \"\\\\\" + ParserUtil.IMPORT_EXPORT_FOLDER + \"\\\\\" + parentFolder + \"\\\\\" + fullFileName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_PATH_FORBIDDEN));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void parse_validArgsBackwardSlash_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String applicationPath \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String userInput \u003d \"parent_folder\\\\filename\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String parentFolder \u003d \"parent_folder\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String fullFileName \u003d \"filename.ics\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String filePath \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                applicationPath + \"\\\\\" + ParserUtil.IMPORT_EXPORT_FOLDER + \"\\\\\" + parentFolder + \"\\\\\" + fullFileName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertParseFailure(parser, userInput,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                String.format(MESSAGE_PATH_FORBIDDEN));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void parse_invalidArgsBlank_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String userInput \u003d \"   \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertParseFailure(parser, userInput,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void parse_invalidArgsPathTooLong_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String userInput \u003d INVALID_USER_INPUT_PATH_TOO_LONG;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_PATH_TOO_LONG);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private ParserClassTest test \u003d new ParserClassTest();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "bennchong": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FreeCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.logic.commands.FreeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class FreeCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private ParserClassTest test \u003d new ParserClassTest();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private FreeCommandParser parser \u003d new FreeCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection\u003cIndex\u003e containsOne \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        containsOne.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection\u003cIndex\u003e containsOneAndTwo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        containsOneAndTwo.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        containsOneAndTwo.add(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertParseSuccess(parser, \"1\", new FreeCommand(containsOne));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertParseSuccess(parser, \"1 2\", new FreeCommand(containsOneAndTwo));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FreeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 42,
      "bennchong": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PATH_FORBIDDEN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PATH_TOO_LONG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    //this string is 251 char long; enough to cause the ParseException."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private static final String INVALID_USER_INPUT_PATH_TOO_LONG \u003d \"longlonglonglonglonglonglonglonglonglong\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "            + \"longlonglonglonglonglonglonglonglonglonglonglonglon\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void parse_validArgs_returnsImportCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String applicationPath \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String userInput \u003d \"filename\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String fullFileName \u003d \"filename.ics\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String filePath \u003d applicationPath + \"\\\\\" + ParserUtil.IMPORT_EXPORT_FOLDER + \"\\\\\" + fullFileName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertParseSuccess(parser, userInput, new ImportCommand(Paths.get(filePath)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void parse_validArgsForwardSlash_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String applicationPath \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String userInput \u003d \"parent_folder/filename\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String parentFolder \u003d \"parent_folder\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String fullFileName \u003d \"filename.ics\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String filePath \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                applicationPath + \"\\\\\" + ParserUtil.IMPORT_EXPORT_FOLDER + \"\\\\\" + parentFolder + \"\\\\\" + fullFileName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_PATH_FORBIDDEN));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void parse_validArgsBackwardSlash_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String applicationPath \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String userInput \u003d \"parent_folder\\\\filename\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String parentFolder \u003d \"parent_folder\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String fullFileName \u003d \"filename.ics\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String filePath \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                applicationPath + \"\\\\\" + ParserUtil.IMPORT_EXPORT_FOLDER + \"\\\\\" + parentFolder + \"\\\\\" + fullFileName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_PATH_FORBIDDEN));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void parse_invalidArgsBlank_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String userInput \u003d \"   \";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertParseFailure(parser, userInput,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    public void parse_invalidArgsPathTooLong_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        String userInput \u003d INVALID_USER_INPUT_PATH_TOO_LONG;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_PATH_TOO_LONG);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserClassTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.GetAuthenticationEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.SendsAuthenticationStateEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Represents a Parser Class with EventsCenter"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class ParserClassTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ParserClassTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public ParserClassTest(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //Returns true when testing for commands parsing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleGetAuthenticationEvent(GetAuthenticationEvent e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        raise(new SendsAuthenticationStateEvent(true));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \"  \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String INVALID_TIMESLOT \u003d \"something\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String INVALID_DAY \u003d \"someday\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String INVALID_TIME \u003d \"24:00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_DAY_FULL \u003d \"monday\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_DAY_SHORT \u003d \"mon\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_TIME_0800HRS_FULL \u003d \"08:00\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_TIME_0800HRS_SHORT_1 \u003d \"8:00\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_TIME_0800HRS_SHORT_2 \u003d \"0800\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_TIME_0800HRS_SHORT_3 \u003d \"800\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_TIME_0800HRS_SHORT_4 \u003d \"8\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_TIME_1000HRS_FULL \u003d \"10:00\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_TIME_1000HRS_SHORT \u003d \"10\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_TIME_0830HRS_FULL \u003d \"08:30\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_TIME_0830HRS_SHORT_1 \u003d \"8:30\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_TIME_0830HRS_SHORT_2 \u003d \"830\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_TIME_1030HRS_FULL \u003d \"10:30\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String VALID_TIME_1030HRS_SHORT \u003d \"1030\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private static final String DASH \u003d \"-\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ParserUtil.parseTimeSlot(null);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ParserUtil.parseTimeSlot(INVALID_TIMESLOT);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_invalidDay_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ParserUtil.parseTimeSlot(INVALID_DAY + WHITESPACE + VALID_TIME_0800HRS_FULL + DASH + VALID_TIME_1000HRS_FULL);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_invalidStartTime_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ParserUtil.parseTimeSlot(VALID_DAY_FULL + WHITESPACE + INVALID_TIME + DASH + VALID_TIME_1000HRS_FULL);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_invalidEndTime_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ParserUtil.parseTimeSlot(VALID_DAY_FULL + WHITESPACE + VALID_TIME_0800HRS_FULL + DASH + INVALID_TIME);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_invalidRange_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_1000HRS_FULL + DASH + VALID_TIME_0800HRS_FULL);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_invalidRangeSameTime_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_1000HRS_FULL + DASH + VALID_TIME_1000HRS_FULL);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_validValuesZeroMinute_returnsTimeSlot() throws Exception {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot expected \u003d TypicalTimeSlots.MON_8_TO_10;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual \u003d ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0800HRS_FULL + DASH + VALID_TIME_1000HRS_FULL);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_validValuesNonZeroMinute_returnsTimeSlot() throws Exception {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot expected \u003d TypicalTimeSlots.MON_830_TO_1030;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual \u003d ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0830HRS_FULL + DASH + VALID_TIME_1030HRS_FULL);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_validValuesShortDay_returnsTimeSlot() throws Exception {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot expected \u003d TypicalTimeSlots.MON_8_TO_10;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual \u003d ParserUtil.parseTimeSlot(VALID_DAY_SHORT"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0800HRS_FULL + DASH + VALID_TIME_1000HRS_FULL);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_validValuesShortTimeZeroMinute_returnsTimeSlot() throws Exception {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot expected \u003d TypicalTimeSlots.MON_8_TO_10;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual1 \u003d ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0800HRS_SHORT_1 + DASH + VALID_TIME_1000HRS_FULL);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual1);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual2 \u003d ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0800HRS_SHORT_2 + DASH + VALID_TIME_1000HRS_FULL);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual2);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual3 \u003d ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0800HRS_SHORT_3 + DASH + VALID_TIME_1000HRS_FULL);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual3);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual4 \u003d ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0800HRS_SHORT_4 + DASH + VALID_TIME_1000HRS_FULL);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual4);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual5 \u003d ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0800HRS_FULL + DASH + VALID_TIME_1000HRS_SHORT);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual5);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_validValuesShortTimeNoNZeroMinute_returnsTimeSlot() throws Exception {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot expected \u003d TypicalTimeSlots.MON_830_TO_1030;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual1 \u003d ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0830HRS_SHORT_1 + DASH + VALID_TIME_1030HRS_FULL);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual1);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual2 \u003d ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0830HRS_SHORT_2 + DASH + VALID_TIME_1030HRS_FULL);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual2);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual3 \u003d ParserUtil.parseTimeSlot(VALID_DAY_FULL"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0830HRS_FULL + DASH + VALID_TIME_1030HRS_SHORT);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual3);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parseTimeSlot_validValuesWithWhitespace_returnsTimeSlot() throws Exception {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot expected \u003d TypicalTimeSlots.MON_8_TO_10;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot actual \u003d ParserUtil.parseTimeSlot(WHITESPACE + VALID_DAY_FULL"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_0800HRS_FULL + WHITESPACE + DASH"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "                + WHITESPACE + VALID_TIME_1000HRS_FULL + WHITESPACE);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 139,
      "-": 190
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RegisterCommandParserHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.GetAuthenticationEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.SendsAuthenticationStateEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Represents a Parser Class with EventsCenter"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class RegisterCommandParserHelper {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public RegisterCommandParserHelper() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public RegisterCommandParserHelper(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //Returns true when testing for commands parsing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleGetAuthenticationEvent(GetAuthenticationEvent e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        raise(new SendsAuthenticationStateEvent(false));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RegisterCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class RegisterCommandParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private RegisterCommandParser parser \u003d new RegisterCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static void init() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        RegisterCommandParserHelper help \u003d new RegisterCommandParserHelper();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PASSWORD_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new RegisterCommand(expectedPerson));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PASSWORD_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new RegisterCommand(expectedPerson));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PASSWORD_DESC + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new RegisterCommand(expectedPerson));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PASSWORD_DESC + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new RegisterCommand(expectedPerson));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PASSWORD_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new RegisterCommand(expectedPerson));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PASSWORD_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                new RegisterCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PASSWORD_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        + ADDRESS_DESC_AMY, new RegisterCommand(expectedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RegisterCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PASSWORD_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PASSWORD_DESC + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PASSWORD_DESC + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        // invalid password"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + \" pw/fail\" + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                + ADDRESS_DESC_BOB + VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                \"Password has to be of at least 8 characters\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PASSWORD_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        + INVALID_ADDRESS_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PASSWORD_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RegisterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 103,
      "bennchong": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private ParserClassTest test \u003d new ParserClassTest();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parse_validArgsMe_returnsSelectCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertParseSuccess(parser, \"me\", new SelectCommand());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void parse_validArgsIndex_returnsSelectCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" 1 \", new SelectCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \" a \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 6,
      "-": 28,
      "bennchong": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TagCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "public class TagCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private ParserClassTest test \u003d new ParserClassTest();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private TagCommandParser parser \u003d new TagCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 18,
      "bennchong": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/DeconflictTimeTableTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class DeconflictTimeTableTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public final DeconflictTimeTable timeTableTypical \u003d new DeconflictTimeTable(TypicalTimeSlots.getTypicalTimeTable());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection\u003cTimeSlot\u003e expected \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expected.add(TypicalTimeSlots.MON_8_TO_12);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expected.add(TypicalTimeSlots.TUE_10_TO_12);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableTypical.getTimeSlots(), expected);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeconflictTimeTable toTest \u003d new DeconflictTimeTable();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toTest.addTimeSlot(TypicalTimeSlots.MON_8_TO_12);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toTest.addTimeSlot(TypicalTimeSlots.TUE_10_TO_12);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableTypical, toTest);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void findOverlapTimeSlots_hasOverlap_returnsOverlapTimeSlots() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection\u003cTimeSlot\u003e expected \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expected.add(TypicalTimeSlots.MON_8_TO_12);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableTypical.findOverlapOrAdjacent(TypicalTimeSlots.MON_9_TO_11), expected);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void findOverlapTimeSlots_noOverlap_returnsEmpty() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableTypical.findOverlapOrAdjacent(TypicalTimeSlots.WED_10_TO_12), Collections.emptySet());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void addTimeSlot() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeconflictTimeTable expected \u003d new DeconflictTimeTable();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expected.addTimeSlot(TypicalTimeSlots.MON_8_TO_12);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expected.addTimeSlot(TypicalTimeSlots.TUE_10_TO_12);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableTypical.addTimeSlot(TypicalTimeSlots.MON_9_TO_11);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(expected, timeTableTypical);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void addTimeTable() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeconflictTimeTable toAdd \u003d new DeconflictTimeTable();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toAdd.addTimeSlot(TypicalTimeSlots.WED_10_TO_12);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toAdd.addTimeSlot(TypicalTimeSlots.TUE_12_TO_14);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        toAdd.addTimeSlot(TypicalTimeSlots.MON_9_TO_11);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        DeconflictTimeTable expected \u003d new DeconflictTimeTable(TypicalTimeSlots.getTypicalTimeTable());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expected.addTimeSlot(TypicalTimeSlots.TUE_12_TO_14);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expected.addTimeSlot(TypicalTimeSlots.WED_10_TO_12);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableTypical.addTimeTable(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableTypical, expected);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        String invalidEmail \u003d \"1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "bennchong": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        String invalidPhone \u003d \"21\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "bennchong": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/TimeSlotTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotNotOverlapException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeSlotTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            -\u003e new TimeSlot(null, LocalTime.MIDNIGHT, LocalTime.NOON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            -\u003e new TimeSlot(DayOfWeek.MONDAY, null, LocalTime.NOON));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            -\u003e new TimeSlot(DayOfWeek.MONDAY, LocalTime.MIDNIGHT, null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void constructor_invalidTimeSlot_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            -\u003e new TimeSlot(DayOfWeek.MONDAY, LocalTime.NOON, LocalTime.NOON));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot toTest \u003d new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"08:00\"), LocalTime.parse(\"10:00\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(toTest, TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void isValidTimeSlot() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // invalid TimeSlots"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(TimeSlot.isValidTimeSlot(LocalTime.NOON, LocalTime.NOON));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(TimeSlot.isValidTimeSlot(LocalTime.NOON, LocalTime.MIDNIGHT));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // valid TimeSlots"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(TimeSlot.isValidTimeSlot(LocalTime.MIDNIGHT, LocalTime.NOON));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(TimeSlot.isValidTimeSlot(LocalTime.MIDNIGHT, LocalTime.MAX));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void isOverlap() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeSlot timeSlot \u003d new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"01:00\"), LocalTime.NOON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // Overlapping, subset with same start time"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(timeSlot.isOverlap(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"01:00\"), LocalTime.MAX)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // Overlapping, subset with same end time"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(timeSlot.isOverlap(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"06:00\"), LocalTime.NOON)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // Overlapping, not subset, is after"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(timeSlot.isOverlap(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"06:00\"), LocalTime.MAX)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // Overlapping, not subset, is before"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(timeSlot.isOverlap(new TimeSlot(DayOfWeek.MONDAY, LocalTime.MIDNIGHT, LocalTime.parse(\"02:00\"))));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // Not overlapping, different day"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(timeSlot.isOverlap(new TimeSlot(DayOfWeek.TUESDAY, LocalTime.MIDNIGHT, LocalTime.MAX)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // Not overlapping, end time of first \u003d start time of second"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(timeSlot.isOverlap(new TimeSlot(DayOfWeek.MONDAY, LocalTime.NOON, LocalTime.MAX)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        // Not overlapping, general case"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(timeSlot.isOverlap(new TimeSlot(DayOfWeek.MONDAY, LocalTime.parse(\"13:00\"), LocalTime.MAX)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void merge_invalidInput_throwsException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(TimeSlotNotOverlapException.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TypicalTimeSlots.MON_8_TO_10.merge(TypicalTimeSlots.TUE_10_TO_12);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void merge_validInput_returnsMerged() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(TypicalTimeSlots.MON_8_TO_10.merge(TypicalTimeSlots.MON_10_TO_12), TypicalTimeSlots.MON_8_TO_12);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(TypicalTimeSlots.MON_8_TO_10.merge(TypicalTimeSlots.MON_9_TO_11), TypicalTimeSlots.MON_8_TO_11);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void toCompare_diffDay_returnLessThan() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        boolean isLessThan \u003d TypicalTimeSlots.MON_8_TO_10.compareTo(TypicalTimeSlots.TUE_10_TO_12) \u003c 0 ? true : false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(true, isLessThan);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void toCompare_sameDayDiffStart_returnLessThan() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        boolean isLessThan \u003d TypicalTimeSlots.TUE_10_TO_12.compareTo(TypicalTimeSlots.TUE_12_TO_14) \u003c 0 ? true : false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(true, isLessThan);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void toCompare_sameDaySameStartDiffEnd_returnEquals() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(0, TypicalTimeSlots.MON_8_TO_10.compareTo(TypicalTimeSlots.MON_8_TO_12));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void toCompare_equals_returnEquals() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(0, TypicalTimeSlots.MON_8_TO_10.compareTo(TypicalTimeSlots.MON_8_TO_10));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/TimeTableTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotDoesNotExistException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeSlotOverlapException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.exceptions.TimeTableEmptyException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.testutil.TypicalTimeSlots;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TimeTableTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private final TimeTable timeTableBlank \u003d new TimeTable();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private final TimeTable timeTableFromParams \u003d new TimeTable(TypicalTimeSlots.getTypicalTimeSlots());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private final TimeTable timeTableTypical \u003d TypicalTimeSlots.getTypicalTimeTable();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(Collections.emptySet(), timeTableBlank.getTimeSlots());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void constructorWithParams() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(TypicalTimeSlots.getTypicalTimeSlots(), timeTableFromParams.getTimeSlots());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void hasOverlap_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertTrue(timeTableTypical.hasOverlap(TypicalTimeSlots.MON_9_TO_11));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void noOverlap_returnsFalse() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(timeTableTypical.hasOverlap(TypicalTimeSlots.WED_10_TO_12));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertFalse(timeTableTypical.hasOverlap(TypicalTimeSlots.TUE_12_TO_14));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void addTimeSlot_timeSlotNotInTimeTable_addsTimeSlot() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        Collection \u003cTimeSlot\u003e expected \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        expected.add(TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableBlank.addTimeSlot(TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getTimeSlots(), expected);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void addTimeSlot_duplicateTimeSlot_throwsTimeSlotOverlapException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(TimeSlotOverlapException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableTypical.addTimeSlot(TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void removeTimeSlot_timeSlotInTimeTable_removesTimeSlot() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableTypical.removeTimeSlot(TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableTypical.removeTimeSlot(TypicalTimeSlots.MON_10_TO_12);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableTypical.removeTimeSlot(TypicalTimeSlots.TUE_10_TO_12);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getTimeSlots(), Collections.EMPTY_SET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void removeTimeSlot_timeSlotNotInTimeTable_throwsTimeSlotDoesNotExistException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(TimeSlotDoesNotExistException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableBlank.removeTimeSlot(TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void getEarliest_emptyTimeTable_throwsTimeTableEmptyException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(TimeTableEmptyException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableBlank.getEarliest();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void getLatest_emptyTimeTable_throwsTimeTableEmptyException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        thrown.expect(TimeTableEmptyException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableBlank.getLatest();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public void getEarliestLatest_nonEmptyTimeTable_returnsEarliestLatest() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableBlank.addTimeSlot(TypicalTimeSlots.MON_10_TO_12);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getEarliest(), LocalTime.parse(\"10:00\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getLatest(), LocalTime.parse(\"12:00\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableBlank.addTimeSlot(TypicalTimeSlots.TUE_10_TO_12);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getEarliest(), LocalTime.parse(\"10:00\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getLatest(), LocalTime.parse(\"12:00\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableBlank.addTimeSlot(TypicalTimeSlots.MON_8_TO_10);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getEarliest(), LocalTime.parse(\"08:00\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getLatest(), LocalTime.parse(\"12:00\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableBlank.addTimeSlot(TypicalTimeSlots.TUE_12_TO_14);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getEarliest(), LocalTime.parse(\"08:00\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getLatest(), LocalTime.parse(\"14:00\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableBlank.addTimeSlot(TypicalTimeSlots.WED_10_TO_12);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getEarliest(), LocalTime.parse(\"08:00\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getLatest(), LocalTime.parse(\"14:00\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableBlank.removeTimeSlot(TypicalTimeSlots.TUE_10_TO_12);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getEarliest(), LocalTime.parse(\"08:00\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getLatest(), LocalTime.parse(\"14:00\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableBlank.removeTimeSlot(TypicalTimeSlots.TUE_12_TO_14);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getEarliest(), LocalTime.parse(\"08:00\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getLatest(), LocalTime.parse(\"12:00\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableBlank.removeTimeSlot(TypicalTimeSlots.WED_10_TO_12);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getEarliest(), LocalTime.parse(\"08:00\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getLatest(), LocalTime.parse(\"12:00\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTableBlank.removeTimeSlot(TypicalTimeSlots.MON_10_TO_12);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getEarliest(), LocalTime.parse(\"08:00\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        assertEquals(timeTableBlank.getLatest(), LocalTime.parse(\"10:00\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/security/AccountCredentialTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class AccountCredentialTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static AccountCredential accountCredentialNoParam;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static AccountCredential accountCredentialParam;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static void testFixtureSetup() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        accountCredentialNoParam \u003d new AccountCredential();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        accountCredentialParam \u003d new AccountCredential(\"test1\", \"test1\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void getUserName_correctReturnedValue() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(accountCredentialNoParam.getUserName().equals(\"test\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(accountCredentialParam.getUserName().equals(\"test1\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void getUserName_incorrectReturnedValue() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertFalse(accountCredentialNoParam.getUserName().equals(\"test1\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertFalse(accountCredentialParam.getUserName().equals(\"test\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void passwordIsValid_correctPassword_correctBooleanReturned() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(accountCredentialNoParam.passwordIsValid(\"test\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(accountCredentialParam.passwordIsValid(\"test1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void passwordIsValid_incorrectPassword_correctBooleanReturned() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertFalse(accountCredentialNoParam.passwordIsValid(\"test1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertFalse(accountCredentialParam.passwordIsValid(\"test\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/security/AppUsersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class AppUsersTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static AppUsers appUsers;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static ArrayList\u003cAccountCredential\u003e list;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static ArrayList\u003cAccountCredential\u003e fakelist;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static void testFixtureSetup() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        fakelist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        appUsers \u003d new AppUsers();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void resetFixture() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        list.clear();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        list.add(new AccountCredential(\"test\", \"test\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void getAccountCredentials_correctListUpdatedAndReturned() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        appUsers.updateAccountCredentials(list);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(appUsers.getAccountCredentials().equals(list));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void getAccountCredentials_correctListUpdatedTwiceAndReturned() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        list.add(new AccountCredential(\"test1\", \"test\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        appUsers.updateAccountCredentials(list);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(appUsers.getAccountCredentials().equals(list));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void getAccountCredentials_incorrectListReturned() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        appUsers.updateAccountCredentials(list);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertFalse(appUsers.getAccountCredentials().equals(fakelist));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/security/AppUsersTestStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": " * Test Class to instantiate AppUsers with one account of username \"test\" and password \"test\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class AppUsersTestStub extends AppUsers {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private ArrayList\u003cAccountCredential\u003e userlist;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public AppUsersTestStub() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        userlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        userlist.add(new AccountCredential());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        updateAccountCredentials(userlist);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/security/SecurityManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bennchong"
        },
        "content": "package seedu.address.security;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.TEST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.ModelManagerTestUserStub;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.SuccessfulLoginEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.events.security.UnsuccessfulLoginEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.User;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "public class SecurityManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static SecurityManager securityManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static UserPrefs userPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static AppUsers appUsers;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static boolean succcessfulLoginEventCalled;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    private static boolean unsuccessfulLoginEventCalled;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public SecurityManagerTest() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    protected void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        EventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    //Set up subscribe to test whether raise events are successfully raised and subscribed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleSuccessfulLoginEvent(SuccessfulLoginEvent loginSuccess) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.succcessfulLoginEventCalled \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void handleUnsuccessfulLoginEvent(UnsuccessfulLoginEvent loginFailure) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        this.unsuccessfulLoginEventCalled \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static void testFixtureSetup() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        succcessfulLoginEventCalled \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        unsuccessfulLoginEventCalled \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        appUsers \u003d new AppUsersTestStub();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(TEST).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        model \u003d new ModelManagerTestUserStub(addressBook, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager \u003d new SecurityManager(false, logic, appUsers);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void resetFixture() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        succcessfulLoginEventCalled \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        unsuccessfulLoginEventCalled \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.logout();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void login_correctCredentials_isAuthenticatedToTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.login(\"test\", \"test\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(securityManager.getAuthentication());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void login_incorrectCredentials_isAuthenticatedRemainsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.login(\"test\", \"test1\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertFalse(securityManager.getAuthentication());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void login_correctCredentials_raisedSuccessfulLoginEvent() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.login(\"test\", \"test\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(this.succcessfulLoginEventCalled);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertFalse(this.unsuccessfulLoginEventCalled);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void login_incorrectCredentials_raisedUnsuccessfulLoginEvent() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.login(\"test\", \"test1\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertFalse(this.succcessfulLoginEventCalled);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void logout_isAuthenticatedToFalse() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.login(\"test\", \"test\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.logout();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertFalse(securityManager.getAuthentication());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void register_validCompleteFields_returnSuccess() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        boolean testFlag \u003d false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        if (securityManager.register(\"test1\", \"test\") \u003d\u003d RegisterFlag.SUCCESS) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            testFlag \u003d true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertTrue(testFlag);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void getUser_correctUserReturned() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.login(\"test\", \"test\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        User currentUser \u003d securityManager.getUser();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        String userName \u003d currentUser.getName().toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertEquals(\"test\", userName);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public void getUser_afterLoggedOut_nullReturnedInsteadOfUser() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.login(\"test\", \"test\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        securityManager.logout();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        User currentUser \u003d securityManager.getUser();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        assertNull(currentUser);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bennchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bennchong": 135
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        AppUsersStorage appUsersStorage \u003d new JsonAppUsersStorage(getTempFilePath(\"userz\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, appUsersStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Removed until timetable storage implemented"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                                             new JsonAppUsersStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 6,
      "-": 100,
      "bennchong": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private static final List\u003cXmlAdaptedFriend\u003e FRIEND_LIST \u003d BENSON.getFriends().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            .map(XmlAdaptedFriend::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Removed until timetable storage implemented"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 3,
      "nianfei97": 6,
      "-": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new XmlAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"NotXmlFormatAddressBook.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Removed until timetable storage implemented"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            new XmlAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 5,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Removed until timetable storage implemented"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 6,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "import seedu.address.model.person.Friend;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "    private Set\u003cFriend\u003e friendList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    private TimeTable timeTable;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTable \u003d new TimeTable();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        friendList \u003d new HashSet\u003c\u003e(personToCopy.getFriends());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        timeTable \u003d personToCopy.getTimeTable();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Sets the {@code TimeTable} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public PersonBuilder withTimeTable(TimeTable timeTable) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        this.timeTable \u003d timeTable;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new Person(name, phone, email, address, tags, timeTable, friendList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 5,
      "nianfei97": 11,
      "-": 92,
      "bennchong": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static String getRegisterCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return RegisterCommand.COMMAND_WORD + \" \" + PREFIX_USERNAME + person.getName().toString() + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                + PREFIX_PASSWORD + \"testtest\" + \" \" + PREFIX_EMAIL + person.getEmail().toString() + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                + PREFIX_PHONE + person.getPhone().toString() + \" \" + PREFIX_ADDRESS + person.getAddress();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Returns an add command alias string for adding the {@code person}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static String getRegisterCommandAlias(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        return RegisterCommand.COMMAND_WORD_ALIAS + \" \" + PREFIX_USERNAME + person.getName().toString() + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                + PREFIX_PASSWORD + \"testtest\" + \" \" + PREFIX_EMAIL + person.getEmail().toString() + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                + PREFIX_PHONE + person.getPhone().toString() + \" \" + PREFIX_ADDRESS + person.getAddress();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        sb.append(PREFIX_USERNAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_USERNAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 3,
      "-": 58,
      "bennchong": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).withTags(\"friends\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bennchong"
        },
        "content": "    public static final Person TEST \u003d new PersonBuilder().withName(\"test\").withPhone(\"88888888\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            .withEmail(\"test@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTimeTable(TypicalTimeSlots.getTypicalTimeTable()).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // Without timetables, for add and find command system test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final Person ALICE_NOTT \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final Person BENSON_NOTT \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final Person CARL_NOTT \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final Person DANIEL_NOTT \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final Person HOON_NOTT \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final Person IDA_NOTT \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE, TEST));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 1,
      "nianfei97": 38,
      "-": 66,
      "bennchong": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTimeSlots.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeSlot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "import seedu.address.model.person.TimeTable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " * A utility class containing a list of {@code TimeSlot} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nianfei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "public class TypicalTimeSlots {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // In typical timetable"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final TimeSlot MON_8_TO_10 \u003d new TimeSlot(DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"08:00\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"10:00\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final TimeSlot MON_10_TO_12 \u003d new TimeSlot(DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"10:00\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"12:00\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final TimeSlot TUE_10_TO_12 \u003d new TimeSlot(DayOfWeek.TUESDAY,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"10:00\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"12:00\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // Not in typical timetable, will overlap"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final TimeSlot MON_9_TO_11 \u003d new TimeSlot(DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"09:00\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"11:00\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // Not in typical timetable, will not overlap"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final TimeSlot TUE_12_TO_14 \u003d new TimeSlot(DayOfWeek.TUESDAY,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"12:00\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"14:00\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // Not in typical timetable, will not overlap"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final TimeSlot WED_10_TO_12 \u003d new TimeSlot(DayOfWeek.WEDNESDAY,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"10:00\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"12:00\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // Not in typical timetable, for merge testing"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final TimeSlot MON_8_TO_12 \u003d new TimeSlot(DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"08:00\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"12:00\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // Not in typical timetable, for merge testing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final TimeSlot MON_8_TO_11 \u003d new TimeSlot(DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"08:00\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"11:00\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // Not in typical timetable, for non-zero minute testing"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static final TimeSlot MON_830_TO_1030 \u003d new TimeSlot(DayOfWeek.MONDAY,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"08:30\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            LocalTime.parse(\"10:30\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static TimeTable getTypicalTimeTable() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        TimeTable t \u003d new TimeTable();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        for (TimeSlot timeSlot : getTypicalTimeSlots()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "            t.addTimeSlot(timeSlot);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nianfei97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    public static Collection\u003cTimeSlot\u003e getTypicalTimeSlots() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "        return new HashSet\u003c\u003e(Arrays.asList(MON_8_TO_10, MON_10_TO_12, TUE_10_TO_12));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nianfei97": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "*/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(ALICE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // associated web page of a person"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexiscatnip": 4,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.commons.ModelManagerTestUserStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.AppUsers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.AppUsersTestStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.Security;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Model model \u003d new ModelManagerTestUserStub();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        AppUsers appUsers \u003d new AppUsersTestStub();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        Security security \u003d new SecurityManager(true, logic, appUsers);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic, security);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        String thirdCommand \u003d \"listall\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 1,
      "-": 153,
      "bennchong": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.AppUsers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bennchong"
        },
        "content": "import seedu.address.security.SecurityManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bennchong"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new Config(), new UserPrefs(), new LogicManager(new ModelManager()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bennchong"
        },
        "content": "                    new SecurityManager(true, new LogicManager(new ModelManager()), new AppUsers()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(mainWindow.getRoot().getScene());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "bennchong": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     * Broken test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nianfei97"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithPersons(personCount);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getPersonList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithPersons(int personCount) throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cpersons\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/persons\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path manyPersonsFile \u003d TEST_DATA_FOLDER.resolve(\"manyPersons.xml\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyPersonsFile);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyPersonsFile, builder.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        manyPersonsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyPersonsFile;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        FriendListPanel friendListPanel \u003d new FriendListPanel(backingList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        uiPartRule.setUiPart(friendListPanel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(friendListPanel.getRoot(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 3,
      "nianfei97": 4,
      "-": 120
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "//import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "//import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "//import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "//import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "//import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "//import seedu.address.MainApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "//import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bennchong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bennchong"
        },
        "content": "        //To login in with test account"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        // getCommandBox().run(\"login test test\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "    */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "cjinting-nus"
        },
        "content": "        //assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alexiscatnip"
        },
        "content": "        //assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjinting-nus": 2,
      "alexiscatnip": 18,
      "-": 278,
      "bennchong": 2
    }
  }
]
