[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "\u003d NSync"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S1-W12-2/main[image:https://travis-ci.org/CS2113-AY1819S1-W12-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "https://coveralls.io/github/CS2113-AY1819S1-W12-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2113-AY1819S1-W12-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* NSync is a utility application targeted at NUS students, to simplify some of their daily routines such as arranging a common timeslot with friends, and downloading their notes from IVLE."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* As a Java application, it has a Graphical User Interface (GUI) but most of the user interactions happen through a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* This application is built on the sample application https://github.com/nusCS2113-AY1819S1/addressbook-level4[Address Book (Level 4)]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "leegengyu": 7
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    compile files(\u0027chromeDriversGradle/\u0027)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    implementation group: \u0027de.dynamicfiles.projects.gradle.plugins\u0027, name: \u0027javafx-gradle-plugin\u0027, version: \u00278.5.1\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    implementation group: \u0027org.seleniumhq.selenium\u0027, name: \u0027selenium-java\u0027, version: \u00272.41.0\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    implementation group: \u0027commons-io\u0027, name: \u0027commons-io\u0027, version: \u00272.6\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    implementation group: \u0027de.dynamicfiles.projects.gradle.plugins\u0027, name: \u0027javafx-gradle-plugin\u0027, version: \u00278.5.1\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    archiveName \u003d \u0027NSync.jar\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        \u0027site-name\u0027: \u0027NSync\u0027,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2113-AY1819S1-W12-2/main\u0027,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 7,
      "-": 241,
      "leegengyu": 2
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "NUSync was developed by the https://github.com/CS2113-AY1819S1-W12-2[W12-2] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Lee Geng Yu"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::https://github.com/CS2113-AY1819S1-W12-2/main/blob/master/docs/images/leegengyu.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} [https://github.com/leegengyu[github]] [\u003c\u003cleegengyu#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Low Wei Jie, Oscar"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::https://github.com/CS2113-AY1819S1-W12-2/main/blob/master/docs/images/auskure.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/auskure[github]] [\u003c\u003causkure#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hu Yiqing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::https://github.com/CS2113-AY1819S1-W12-2/main/blob/master/docs/images/bearperson1.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/BearPerson1[github]] [\u003c\u003cBearPerson1#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Lim Zhi Hui Alden"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image::https://github.com/CS2113-AY1819S1-W12-2/main/blob/master/docs/images/e0201942.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/e0201942[github]] [\u003c\u003ce0201942#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "leegengyu": 1
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2113-AY1819S1-W12-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* *Email us* : You can also reach us at `damith [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "leegengyu": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d NSync - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "By: `Team W12-2`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "auskure"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"] +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "auskure"
        },
        "content": " +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "auskure"
        },
        "content": "Similarly, we can store a `EnrolledModules` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `EnrolledModules` object per unique `EnrolledModules`, instead of each `Person` needing their own `EnrolledModules` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "auskure"
        },
        "content": " +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "auskure"
        },
        "content": "image:ModelClassEvenBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::mergetimetable[]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Merge Timetable"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "The merge feature allows for users to select multiple contacts and outputs a merged timetable with all"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "their common free slots. When the user inputs the indexes of the contacts he wants to merge, the `Persons` are stored"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "in an array , `personsToMerge`. The array is then iterated through, merging the all objects inside and"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "outputting a final `Person` to be added to the address book."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the merge mechanism behaves at each step."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user selects the indexes of the contacts he wants to merge. `MergeCommandParser` takes the input and puts"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "it in a list, it then calls MergeCommand with the list as an argument."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "image::MergeCommand1.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The Merge Command uses the list of indexes and the `filteredPersonsList` to create and fill the array"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "`personsToMerge`."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "image::MergeCommand2.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The `mergeTimetable` function is called on each element in `personsToMerge` and the element after it. The merge"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "Timetable function iterates through all the time slots in both timetables and compares them."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "image::MergeCommand3.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. Based on whether both original time slots were free or busy, it outputs a merged free or busy time slot and"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "adds it to the merged timetable"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "image::MergeCommand4.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The last element in the `personsToMerge` array is returned after all the iterations. This new person is added"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "to the address book."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "image::MergeCommand5.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the `merge` function works."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How merge executes"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Create a new person with the merged timetable to add to the address book."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easier to implement for testing the logic of the merge command."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Very clunky UI wise to have to find the added person."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "Have to manually delete the person after every merge to"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "to prevent having many merged people in the contacts list."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2 (To be implemented):** Have a specific Class that has timetable and name that is updated with the"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "merged timetable and names of people being merged whenever merge command is called and have a specific part of the UI"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": " for displaying this Class."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Better user experience by letting user easily see the merged timetable. Does not need manual deletion of"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "contacts. Better follows Separation of Concerns Principle."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires more time to implement."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "// end::mergetimetable[]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "auskure"
        },
        "content": "// tag::sortingofpersons[]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d Sorting of contacts in addressbook feature"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "auskure"
        },
        "content": "The sorting mechanism is implemented with `UniquePersonListHelper`, which is facilitated by `UniquePersonList`, which keeps a list of unique persons in `AddressBook`."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "auskure"
        },
        "content": "`UniquePersonListHelper` sorts the contacts in `UniquePersonList` in an alphabetical order, according to the person\u0027s name."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "auskure"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "auskure"
        },
        "content": "* `UniquePersonList#add()` -- Adds a new person to `UniquePersonList`, and hence the contact list"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "auskure"
        },
        "content": "* `UniquePersonList#remove()` -- Removes a new person to `UniquePersonList`, and hence the contact list"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "auskure"
        },
        "content": "* `UniquePersonList#setPerson()` -- Sets a new person, in place of an existing person, to `UniquePersonList`, and hence the contact list"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "auskure"
        },
        "content": "* `UniquePersonList#setPersons()` -- Sets a list of persons, in place of the current list of persons, to `UniquePersonList`, and hence the contact list"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "auskure"
        },
        "content": "* `UniquePersonList#contains()` -- Checks if a person is already a part of `UniquePersonList`, and hence the contact list"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "auskure"
        },
        "content": "These operations are exposed in the `Model` interface, through `ModelManager`, then through `AddressBook`."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "auskure"
        },
        "content": "In `Model`, they are exposed as `Model#addPerson()`, `Model#deletePerson()`, `Model#updatePerson()`,"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "auskure"
        },
        "content": "`Model#resetData()`, and `Model#hasPerson()` respectively."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "auskure"
        },
        "content": "Within `ModelManager`, the above listed operations are directly exposed as"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "auskure"
        },
        "content": "`ModelManager#addPerson()`, `ModelManager#deletePerson()`, `ModelManager#updatePerson()`,"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "auskure"
        },
        "content": "`ModelManager#resetData()`, and `ModelManager#hasPerson()` respectively."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "auskure"
        },
        "content": "Within `AddressBook`, the above listed operations are directly exposed as"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "auskure"
        },
        "content": "`AddressBook#addPerson()`, `AddressBook#removePerson()`, `AddressBook#updatePerson()`,"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "auskure"
        },
        "content": "`AddressBook#setPersons()`, and `AddressBook#hasPerson()` respectively."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "auskure"
        },
        "content": "Given below is an example usage scenario and how the sorting mechanism behaves at each step."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "auskure"
        },
        "content": "Step 1. The user launches the application for the first time. The `UniquePersonListHelper` will be initialized with the saved"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "auskure"
        },
        "content": "persons of the application. For this example, let us assume that the `UniquePersonList` is empty, and hence, there are"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "auskure"
        },
        "content": "no saved persons."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "auskure"
        },
        "content": "`UniquePersonList` will also be initialized, and will read inputs from `UniquePersonListHelper`.  Since"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "auskure"
        },
        "content": "`UniquePersonListHelper` is empty, `UniquePersonList` will also be empty."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListStartingStateListAndTreeDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "auskure"
        },
        "content": "Step 2. The user executes `add n/David ...` command, which calls `Model#addPerson()`, to add a new person."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "auskure"
        },
        "content": "The new person will be added to `UniquePersonListHelper`, and `UniquePersonList` will take reference from `UniquePersonListHelper`."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand1TreeStateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "auskure"
        },
        "content": "`UniquePersonListHelper` will always have the correctly sorted persons.  Therefore, it is possible to iterate through"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "auskure"
        },
        "content": "`UniquePersonListHelper` in order to get the sorted order of persons.  This sorted order will be copied into `UniquePersonList`."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand1ListStateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "auskure"
        },
        "content": "Step 3. The user executes `add n/Aaron ...`, , which also calls `Model#addPerson()`, to add a new person. Like step 2, the new person will be added to"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "auskure"
        },
        "content": "`UniquePersonListHelper`, and `UniquePersonList` will take reference from `UniquePersonListHelper`."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "auskure"
        },
        "content": "Because `UniquePersonListHelper` stores persons in a treemap, with person name as the key, and person as the value in"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "auskure"
        },
        "content": " the key-value pair of the treemap, it is able to automatically sort persons according to their names."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand2TreeStateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "auskure"
        },
        "content": "When `UniquePersonListHelper` is being iterated through, it will be done so in an in-order depth-first-search, allowing"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "auskure"
        },
        "content": "the output to be the sorted order of persons.  This allows `UniquePersonList` to copy over the sorted order of persons,"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "auskure"
        },
        "content": "from `UniquePersonListHelper`."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand2ListStateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "auskure"
        },
        "content": "Step 4. The user executes `add n/Esther ...`, which also calls `Model#addPerson()`, to add a new person. Like step 3, the new person will be added to"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "auskure"
        },
        "content": "`UniquePersonListHelper`, and `UniquePersonList` will take reference from `UniquePersonListHelper`."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "auskure"
        },
        "content": "Because `UniquePersonListHelper` stores persons in a treemap, Esther will be put behind both Aaron and David."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand3TreeStateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "auskure"
        },
        "content": "Like step 3, when `UniquePersonListHelper` is being iterated through, it will be done so in an in-order depth-first-"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "auskure"
        },
        "content": "search, allowing the output to be the sorted order of persons.  This allows `UniquePersonList` to copy over the sorted"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "auskure"
        },
        "content": "order of persons, from `UniquePersonListHelper`."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand3ListStateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "auskure"
        },
        "content": "Step 5. The user now decides that adding the person was a mistake.  The user wishes to change Esther\u0027s name to Bella."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "auskure"
        },
        "content": "The user decides to edit the person Esther, by executing the `edit 3 n/Bella...` command.  This calls `Model#updatePerson()` The `edit 3 n/Bella...`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "auskure"
        },
        "content": "command will check if Esther is a valid person, and will replace the name Esther, with the name Bella.  All other"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "auskure"
        },
        "content": "properties of that person instance will remain the same."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "auskure"
        },
        "content": "Because alphabetically, B comes before D, person Bella, which was previously Esther, will now come before David.  The"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "auskure"
        },
        "content": "red-black tree underlying data structure of treemap, is able to handle this."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand4TreeStateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "auskure"
        },
        "content": "Like step 4, when `UniquePersonListHelper` is being iterated through, it will be done so in an in-order depth-first-"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "auskure"
        },
        "content": "search, allowing the output to be the sorted order of persons.  This allows `UniquePersonList` to copy over the sorted"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "auskure"
        },
        "content": "order of persons, from `UniquePersonListHelper`."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand4ListStateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "auskure"
        },
        "content": "Step 6. The user now decides that the person, Bella was a mistake.  Person Bella should not be in the `AddressBook`."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "auskure"
        },
        "content": "The user wishes to delete the person Bella, by executing the `delete 2` command.  This calls `Model#deletePerson()`."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "auskure"
        },
        "content": "  The `delete 2` command will check if"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "auskure"
        },
        "content": "Bella is a valid person, and if so, will delete the person Bella."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "auskure"
        },
        "content": "The red-black tree which is the underlying data structure of treemap, is able to handle this operation.  It simply"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "auskure"
        },
        "content": "replaces the node it is about to delete, with the in-order successor.  More operations will be done to ensure a balanced"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "auskure"
        },
        "content": "tree, within the underlying red-black tree."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand5TreeStateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "auskure"
        },
        "content": "Like step 5, when `UniquePersonListHelper` is being iterated through, it will be done so in an in-order depth-first-"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "auskure"
        },
        "content": "search, allowing the output to be the sorted order of persons.  This allows `UniquePersonList` to copy over the sorted"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "auskure"
        },
        "content": "order of persons, from `UniquePersonListHelper`."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand5ListStateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "auskure"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "auskure"
        },
        "content": "If the Bella does not exist in `UniquePersonListHelper`,`UniquePersonListHelper` will return an error, and the"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "auskure"
        },
        "content": " `delete` command will not be executed."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "auskure"
        },
        "content": "The following sequence diagram shows how the `UniquePersonList` stays sorted when an `add` command is executed:"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListSequenceDiagramCommandAdd.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "auskure"
        },
        "content": "The following sequence diagram shows how the `UniquePersonList` stays sorted when an `delete` command is executed:"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "auskure"
        },
        "content": "It is very similar to that of the `add` command."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListSequenceDiagramCommandDelete.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "auskure"
        },
        "content": "Step 7. The user then decides to execute the command `list`. Commands that do not modify the address book, such as"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "auskure"
        },
        "content": "`list`, will usually not call `Model#addPerson()`, `Model#deletePerson()`, `Model#updatePerson()`, `Model#resetData()`,"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "auskure"
        },
        "content": "or `Model#hasPerson()`.  Thus the state of `UniquePersonListHelper` will remain unchanged."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand6TreeStateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "auskure"
        },
        "content": "Therefore, `UniquePersonList` will also remain unchanged."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand6ListStateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "auskure"
        },
        "content": "Step 8. The user executes `clear`, which calls `Model#resetData()`.  This replaces all data in the address book with an"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "auskure"
        },
        "content": "empty address book.  Hence, `UniquePersonListHelper` will be cleared of all persons."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand7TreeStateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "auskure"
        },
        "content": "Therefore, `UniquePersonList` will also be cleared of all persons."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand7ListStateDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "auskure"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the list is sorted"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "auskure"
        },
        "content": "* **Alternative 1 (current choice):** Implement a helper class, UniquePersonListHelper, which uses a treemap to sort the names."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "auskure"
        },
        "content": "Clears the UniquePersonList every time a change is made, and iterates through the UniquePersonListHelper, to build a new"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "auskure"
        },
        "content": " UniquePersonList."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Pros: Easy to implement.  Allows for minimal and compartmentalised changes throughout the code base.  Fast overall"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "auskure"
        },
        "content": "time complexity of O(N)."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "auskure"
        },
        "content": "* **Alternative 2:** implement a comparator in the current UniquePersonList."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Pros: Will use less memory, because there is no need for a helping class or data structure."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Cons: It has a time complexity of O(N log N), which is slower than our chosen implementation."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Defensive programming practices for helper class"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "auskure"
        },
        "content": "* **Alternative 1 (current choice):** Implement all checks for errors in the helper class, `UniquePersonListHelper` and none in"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "auskure"
        },
        "content": "`UniquePersonList`.  This is because the helper class is in charge of the actual execution of the program.  If the checks for"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "auskure"
        },
        "content": "errors are implemented in `UniquePersonList` only, it is possible for a new developer to accidentally bypass the checks."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Pros: Prevents unnecessary checks and hence, potentially confusing code."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Cons: If any changes are made to the helper class in the future, e.g. removing the helper class, the developer has"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "auskure"
        },
        "content": "to remember to implement his/her own checks."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "auskure"
        },
        "content": "* **Alternative 2:** Implement all checks for errors in both `UniquePersonList` and `UniquePersonListHelper`."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Pros: This would add an additional layer of defence to possible careless mistakes by developers in the future.  E.g."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "auskure"
        },
        "content": "If they were to make their own version of the helper class but forget to implement their own checks for errors, `UniquePersonList`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "auskure"
        },
        "content": "would still have backup checks."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Cons: This makes code harder to understand, by introducing redundant checks, which would be misleading.  Redundant checks"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "auskure"
        },
        "content": "might also incorrectly encourage careless programing habits."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "auskure"
        },
        "content": "// end::sortingofpersons[]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "auskure"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* * *` |user |add a ‘busy’ time slot to my time table | keep my life organized"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* * *` |user |delete a ‘busy’ time slot from my time table | free up that particular time slot"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* * *` |user |find availability of provided time slot | decide on my next course of action with that information"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* * *` |user |download the notes of a specific module in one command | avoid downloading unnecessary notes"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* * *` |lazy IVLE user |download all my notes in one command | avoid the cumbersome experience of visiting IVLE"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* * *` |user |view the notes already downloaded | keep track of the notes that I already have"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* * *` |user |delete all downloaded notes | free up some space on my local drive"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* * *` |user |view my enrolled modules | store my notes according to the modules I am enrolled in"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* *` |user |find next ‘available’ time slot (from current time) |be aware of when my next available time period will be"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* *` |user |find next ‘busy’ time slot (from current time) |be aware of what is coming up for me next"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* *` |user |delete the notes of a specified module |keep my local drive organized"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`*` |user with many persons in the address book |locate a person easily |not waste time when trying to locate a contact"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`*` |user who needs to arrange a time with a group of other users frequently |import other users’ ‘busy time slots |have a centralised record of our schedules for convenience to arrange a common time"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`*` |user who needs to arrange a time with a group of other users frequently |find next ‘available’ time slot (from current time) |easily know when we can next meet up"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "*Product Name*: NUSMods"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Author: ?"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* Students are currently able to type in their module code, and the relevant timeslots pertaining to all the different types of lessons (e.g. lectures, tutorials, lab sessions, etc) will be displayed."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* Students do not have to go to IVLE/CORS to retrieve the timing of the various classes for a module."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* Students have to manually select their relevant lecture/tutorial/lab sessions by clicking via several steps."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* Students\u0027 timetable on NUSMods is not as easily transferrable across different devices."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "auskure": 204,
      "-": 1007,
      "leegengyu": 6
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "\u003d NSync - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-W12-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "By: `CS2113-AY1819S1-W12-2`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "NSync is a program for NUS students who *strive to keep their lives organised, despite their busy schedules*."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* **`delete`**`main 3` : deletes contact in the main contact list whose index number is 3"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d General Commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "auskure"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "auskure"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d Address Book Commands"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "auskure"
        },
        "content": "Format: `add n/NAME p/PHONE e/EMAIL a/ADDRESS [t/TAG]...[em/ENROLLED MODULE]...`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal em/CS2113T`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "auskure"
        },
        "content": "Contacts in this addressbook are automatically sorted in alphabetical order"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Trying to add a new contact (with different user fields) with the same name as an existing contact does not currently work."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "auskure"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]... [em/ENROLLED MODULE]...`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Format: `find MAIN/MERGED KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* `find main John` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Returns `john` and `John Doe` from the main contact list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* `find merged Betsy Tim John` +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John` from the merged contact list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book. +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Format: `delete MAIN/MERGED INDEX`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* Deletes the person at the specified `INDEX`, either in the main or merged person list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* The index refers to the index number shown either in the main or merged person list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* `list main` +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "`delete main 2` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Deletes the 2nd person in the main list of the address book."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* `find merged Betsy` +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "`delete merged 1` +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Deletes the merged contact with index 1 in the results of the `find` command."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* Selects the person and \u003cto be confirmed\u003e the person at the specified `INDEX`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* `find main Betsy` +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d Timetable Commands"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003d\u003d\u003d\u003d Changing Time Slots: `change`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "E0201942"
        },
        "content": "You can change your own, or a contact\u0027s timetable to reflect whether there is an activity at a specified time slot,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "E0201942"
        },
        "content": "or whether it is free or busy."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Format: `change INDEX/SELF DAY TIME ACTIVITY/FREE/BUSY`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "E0201942"
        },
        "content": "****"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* Changes the timetable of the person specified by index or your own timetable (if self is selected)."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* DAY refers to which day of the timetable is going to be edited."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* TIME refers to which time within the day will be edited."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* ACTIVITY/FREE/BUSY refers to what will be reflected at the seleted time slot"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* DAY must be mon, tue, wed, thu or fri (Non-case sensitive)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* TIME must be 8am, 9am, 10am, 11am, 12pm, 1pm, 2pm, 3pm, 4pm, 5pm, 6pm, 7pm"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "E0201942"
        },
        "content": "****"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Example: `change 1 mon 8am GER1000` +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Changes the time slot on Monday at 8am of the contact with index 1 in the main contact list to GER1000"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Before:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::ChangeCommand1.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "E0201942"
        },
        "content": "After:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::ChangeCommand2.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003d\u003d\u003d\u003d Sharing timetables `share`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "E0201942"
        },
        "content": "You can select a person whose timetable you would like to share. This outputs the text that you would input into the"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "E0201942"
        },
        "content": "change command to get that timetable and copies it to your clipboard automatically. You can either choose to share a"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public or private version of the timetable."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Public:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::ShareCommand1.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Private:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::ShareCommand2.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Format: `share INDEX PRIVACY`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "E0201942"
        },
        "content": "****"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Shares the timetable of the person at the selected INDEX."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* PRIVACY can be either public or private."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* To import a timetable shared with you, use `change INDEX [TEXT COPIED TO CLIPBOARD]`. Timetable will be imported to"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "E0201942"
        },
        "content": " the person at the selected INDEX."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "E0201942"
        },
        "content": "****"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "E0201942"
        },
        "content": "`share private 1`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Outputs the private version of your first contact\u0027s timetable in the form of text. Copies this text to your keyboard."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::ShareCommand1.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Gives an output of:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::ShareCommandOutput.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Entering"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "E0201942"
        },
        "content": "`change 1 [TEXT COPIED TO CLIPBOARD]`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Changes the timetable of your first contact to the timetable that was shared. This results in:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::ShareCommand2.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Merging timetables: `merge`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "E0201942"
        },
        "content": "You can select multiple contacts whose timetables you would like to merge and give it a group name. This displays a"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "E0201942"
        },
        "content": "collated timetable with the number of people busy for each time slot. It also displays the names of the people in the"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "E0201942"
        },
        "content": "group."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `merge m/INDEX m/INDEX...`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "****"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "* Merges the people at selected INDEXes."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "* More than 2 people can be merged at once"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Your own timetable wil always be included in the merge"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "****"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "E0201942"
        },
        "content": "`merge m/2 m/3 m/4 n/CS2101 Project` +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Merges your own timetable with the 2nd, 3rd and 4th people in the address book."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::MergeCommandSelf.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "E0201942"
        },
        "content": "+"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::MergeCommandUser1.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "E0201942"
        },
        "content": "+"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::MergeCommandUser2.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "E0201942"
        },
        "content": "+"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::MergeCommandUser3.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "merges into"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::MergeCommandGroup.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "E0201942"
        },
        "content": "The merged timetable will be added to the list of groups"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::MergeCommandList.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003d\u003d\u003d\u003d Filters contacts based on free time slots and modules taken: `filter`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "E0201942"
        },
        "content": "You can select a time slot or module you would like to filter your contacts by. Time slot filtering filters out"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "E0201942"
        },
        "content": "people who are busy at the selected time slot. Module filtering filters out people who do not take the module."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Format: `filter MODULE CODE/DAY TIME...`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "E0201942"
        },
        "content": "****"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Entering a module code removes contacts without the module from the list."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Entering a day and time removes contacts without that time slot free."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Day must be mon, tue, wed, thu or fri."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Time must be 8am, 9am, 10am, 11am, 12am, 1pm, 2pm, 3pm, 4pm, 5pm, 6pm or 7pm."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Contacts can be filtered by more than one module/day and time."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "E0201942"
        },
        "content": "****"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Example 1: `filter GER1000` +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Shows only contacts who have GER1000 in the timetable."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Example 2: `filter mon 10am` +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Shows only contacts who are free on Monday at 10am."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Example 3: `filter GER1000 mon 10am` +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Shows only contacts who have GER1000 in their timetable and are free on Monday at 10am."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "\u003d\u003d\u003d\u003d Filters for next free time slots for one or more contact: `free`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Format: `free f/INDEX`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "****"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* Displays next available time slot (from current time)."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* Running this command outside of the time window of 8am to 7pm will yield the next available time slot in the next day."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* Running this command outside of the day window of Monday to Friday will yield the next available time slot in the next weekday."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* Coming To You Soon: free for self time-table!"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "****"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Example 1: `free f/1 f/7 f/9` +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Shows the next available time slot (from current time) for contacts whose indices are 1, 7 and 9 respectively."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Example 2: `free f/1` +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Shows the next available time slot (from current time) for contact whose index is 1, and has a free time slot currently."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "image::FreeCommand1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Example 3: `free f/1` +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Shows the next available time slot (from current time) for contact whose index is 1, and does not have a free time slot currently."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "image::FreeCommand2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "\u003d\u003d\u003d\u003d Export user string: `export`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Format: `export PUBLIC/PRIVATE INDEX`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "****"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* Exports all of a user\u0027s details in each respective field (including time-table) into a string."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "****"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Example: `export public 1` +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Displays a string that contains the exported contact\u0027s details. This string is also copied to the user\u0027s clipboard."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "image::export.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "\u003d\u003d\u003d\u003d Import user string: `import`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Format: `import \u003cstring\u003e`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "****"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* The user\u0027s full details are imported into the application of the user who imported it."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "****"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Example 1: Successful Import"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "image::import.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Example 2: Failed Import - Incorrect String (corrupted string / incorrect string length)"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "image::ImportIncorrectString.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Example 3: Failed Import - Duplicate Contact"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "image::ImportDuplicatePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d Notes Commands"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "****"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "The download function has temporarily been disabled in accordance with NUS Information Technology Acceptable use policy for IT resources Ver4.2, Clause 4.6"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Users are still able to login and view available files to be downloaded."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "****"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d\u003d Downloading all notes from a selected module from IVLE : `downloadAllNotes`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Downloads the your notes from IVLE, and stores them in the folder \"notes\""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Format: `downloadAllNotes `downloadAllNotes [user/IVLE USERNAME] [pass/IVLE PASSWORD] [mod/ENROLLED MODULE]`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "You do not have to Enter the full module code or worry about the capitalization."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "You would need to have Google Chrome installed in the default location in order to execute this command."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "You would be unable to see your inputted command after inputting it, this is a security feature to prevent your login credentials from being compromised."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "****"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadExample.PNG[width\u003d\"900\"]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "auskure"
        },
        "content": "* Automatically accesses the your IVLE account using Google Chrome, and downloads all notes and resources"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "auskure"
        },
        "content": "of the specified module."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* If an incomplete module code is entered, it will select the module with the closest alphabetical similarity."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Example: If you are enrolled in `CS2113` and `CS2101`, entering `mod/CS21` will select `CS2101`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "auskure"
        },
        "content": "* You may notice a new window of Google Chrome opening up.  Please refrain from interferring with the automated process."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::chromeOpen.PNG[width\u003d\"250\"]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* NSync might be unresponsive during the download, it is so to prevent you from accidentally introducing file corruption."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "auskure"
        },
        "content": "* If the process is successful, the result window of NSync will display the exact path to your newly downloaded notes."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "****"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Example 1: `downloadAllNotes user/e1234567 pass/password1 mod/CS2101` +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "auskure"
        },
        "content": "Downloads all notes and resources for CS2101"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Example 2: `downloadAllNotes user/e1234567 pass/password1 mod/CS2113` +"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "auskure"
        },
        "content": "Downloads all notes and resources for CS2113"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Download Successful"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadAllSuccessful.PNG[width\u003d\"900\"]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Module not found"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadModNotFound.PNG[width\u003d\"900\"]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Password or username Incorrect"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadPasswordOrUsernameWrong.PNG[width\u003d\"900\"]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d\u003d Display all notes from a selected module from IVLE : `downloadSelectNotes` without prefix `\"file/\"`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Displays all the available notes of a selected"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Format: `downloadSelectNotes [user/IVLE USERNAME] [pass/IVLE PASSWORD] [mod/ENROLLED MODULE]`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Currently the files are not sorted in any order. In a future version we will make its sorted by file type"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadSelectFileExample.PNG[width\u003d\"900\"]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* All available notes from the selected module would be sourced and displayed"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* If a file is not shown, it could be either a private folder or a submission folder, consult your lecturer for more information"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "the number on the left of the file represents the file ID, it is static."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Example: 0:LP41_More_UML_Inheritence.pptx"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "File Fetch Successful"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadSelectFileSuccess1.PNG[width\u003d\"900\"]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadSelectFileSuccess2.PNG[width\u003d\"900\"]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Module not found"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadModNotFound.PNG[width\u003d\"900\"]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Password or username Incorrect"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadPasswordOrUsernameWrong.PNG[width\u003d\"900\"]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d\u003d Downloading selective notes from a selected module from IVLE : `downloadSelectNotes` with prefix `\"file/\"`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Download a selective number of notes from IVLE, and stores them in the folder \"notes\"."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Format: `downloadSelectNotes [user/IVLE USERNAME] [pass/IVLE PASSWORD] [mod/ENROLLED MODULE] [file/0,1,2...n]`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Use `downloadSelectFile` without the `file\\` prefix to obtain the file IDs"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadSelectExample.PNG[width\u003d\"900\"]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* The files would be downloaded one by one from IVLE to your \"notes\" folder."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* if you entered a mix of invalid and valid file IDs, NSync will only only download the correct files, up till it encounters a invalid ID."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    Example: file/0,1,2,90000000,3"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    if 0,1,2,3 are valid file IDs, only file 0,1,2 will be downloaded."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Download Successful"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadSelectSuccess.PNG[width\u003d\"900\"]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "File not found"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadSelectFileNotFound.PNG[width\u003d\"900\"]"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d\u003d Show all downloaded notes: `showNotes`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Displays all the downloaded notes in the UI"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Format: `showNotes`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "The files are displayed in the order that it is in your directory"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* It recursively searches your `notes` folder and displays all the files available"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::showNotes1.PNG[width\u003d\"900\"]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::showNotes2.PNG[width\u003d\"900\"]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::showNotes3.PNG[width\u003d\"900\"]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all downloaded notes : `clearNotes`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "auskure"
        },
        "content": "Clears all downloaded notes."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Format: `clearNotes`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "\u003d\u003d\u003d Upcoming Features"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Coming to you soon!"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "auskure"
        },
        "content": "* *Clear Notes* : `clearNotes`"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "auskure"
        },
        "content": "* *Download All Notes* : `downloadAllNotes user/e1234567 pass/password1 mod/CS2113`"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* *Download Selected Notes (seleted notes)* : `downloadSelectNotes user/e1234567 pass/password1 mod/CS2113 file/1,2,3...n`"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* *Download Selected Notes (show all notes)* : `downloadSelectNotes user/e1234567 pass/password1 mod/CS2113`"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* *Show notes* : `showNotes`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "auskure"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]... [em/ENROLLED MODULE]...` +"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *Export* : `export PUBLIC/PRIVATE INDEX`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *Free* : `free INDEX`"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *Import* : `import STRING`"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *Merge Timetables* : `merge [index 1] [index 2] \u003cadd more indices if required\u003e`"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "e.g. `merge 1 2 5`"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      }
    ],
    "authorContributionMap": {
      "E0201942": 99,
      "BearPerson1": 125,
      "auskure": 50,
      "-": 225,
      "leegengyu": 131
    }
  },
  {
    "path": "docs/team/BearPerson1.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Hu Yiqing - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d PROJECT: NUSync"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "NUSync is an utility application that consists of a timetable manager, as well as an all in one IVLE notes downloader."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* *Major enhancement*: IVLE Notes downloader"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "** What it does: Allows the user to select and download all/selected notes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "** Justification: Allows the user to download his or her notes with a single line of command. Additionally, allow the users to download a single file with at most 2 lines of command. This method significantly triumphs the existing method; which involves manually transversing the IVLE web page, in terms of efficiency."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "** Highlights: This is a completely new feature that has been added into the existing AddressBook level 4 code base. It does not improve on any existing feature at the moment."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "** Credits: Selenium Web driver."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* *Minor enhancement*: Allow the user to select a few files instead of all the files to download."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " https://github.com[#14]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 12,
      "-": 54
    }
  },
  {
    "path": "docs/team/auskure.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d Loh Wei Jie, Oscar - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d PROJECT: NSync"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "If you are an NUS student who desires control of your academic life, look no further."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "NSync is a desktop contact list organizer which empowers NUS students.  On top of all basic functions you"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "would expect in an ordinary contact list, we have tailored special tools which allow for timetable coordination"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "between contacts, as well as an automated IVLE file downloader.  This would improve productivity among"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "students, saving time on mundane tasks, thus allowing them to instead focus on understanding and appreciating"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": " important academic concepts."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "NUSync is a desktop-based utility application used by NUS students. The user interacts with it using a CLI,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": " and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.  We have also incorporated"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": " existing libraries such as Selenium Chrome Drivers for the automated IVLE file downloader."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "* *Major enhancement*: Notes Deletion"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "** What it does: In a single command, we allow you to delete all the notes you have downloaded using NSync.  This"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "would helps you quickly and conveniently free up your storage space."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Justification: Because my teammate has already implemented an automated notes downloader, allowing you to download"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "large folders conveniently, it is also useful to have an equally convenient method to delete your notes.  This"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "removes the need for you to manually go to your storage to delete your own notes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Credits: We made use of existing library ///, modified and improved upon extracting zip files online"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "tutorials."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "* *Minor enhancement*: File Unzipping"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "** What it does: This helps to unzip files and stores them in an appropriate folder. We make things more intuitive for"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": "you, by automatically unzipping your files and storing them in the notes folder, according to their respective"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "directories."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Justification:This is because using IVLE\u0027s libraries, files are downloaded in a zip format.  Automatically unzipping"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": " and storing your notes would add towards the best possible user experience."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Credits: We made use of existing library ///, modified and improved upon extracting zip files online"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "tutorials."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "* *Minor enhancement*: Alphabetised contact list in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "** What it does: When you add a new contact to your contact list, the contact is added in an alphabetic order"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "automatically."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Justification: This removes the need for you to search for your contacts according to the time at which they"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "are added.  Contacts are alphabetised as they should be."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Credits: We made use of existing library ///."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "*** Successfully assigned and managed `issues` for all team members, and matched them to corresponding deadlines."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "*** Effectively planned and facilitated discussions on project direction and work delegation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": "*** Added a new attribute to the Person Class, called Enrolled Moduels.  This allows you to learn with just one glance,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": "what modules your contact is taking."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "*** Performed updates and organized the User Guide into a more reader friendly format, in pull request #///"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "auskure"
        },
        "content": "*** Pull requests reviewed with elaborate comments in pull request #79."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "auskure"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddownloadAllNotes]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "auskure"
        },
        "content": "include::../UserGuide.adoc[tag\u003dclearNotes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsortingofpersons]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "auskure": 46,
      "-": 43
    }
  },
  {
    "path": "docs/team/e0201942.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Lim Zhi Hui Alden - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "NUS Sync was designed to help university students by automating notes downloads and aiding in meeting scheduling by automating the search for common free time slots between contacts."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: Schedule synchronizer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: It allows for users to create a merged timetable that displays all common free time slots with a contact/multiple contacts in the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This will allow users to easily find a time slot to arrange for meet ups for social or work related reasons because finding a common time slot can be an annoying experience when it involves too many people."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "** Highlights: To be decided."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: Contacts can be filtered based on their free time slots or modules taken."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Adjusted the UI to display timetables for each contact."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " https://github.com[#14]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Fixed a bug in timetable implementation that caused data to not be able to be read properly upon rebooting the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmerge]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmerge]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "leegengyu": 1
    }
  },
  {
    "path": "docs/team/leegengyu.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Lee Geng Yu - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "\u003d\u003d PROJECT: NSync"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "NSync was created to help students resolve the issue of scheduling meetings between their peers, team mates and friends."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "If you are a student, all you have to do is to key in your time-table (and get your friends to do so as well!) once, and we will find you your common meeting time-slot in a simple and fuss-free manner!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *Major enhancement*: added the feature to *export and import user details*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "** What it does: allows the users to `export` and `import` all information fields of one or more contacts, which includes the name, contact number, email, address and the time-table itself."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "** Justification: This feature boosts the productivity of the user significantly, by cutting down the amount of time that he/she has to take to input his/her contacts\u0027 details. The user and his/her contacts will only have to key in their contact details and time-tables respectively in a one-time fashion, before exporting their details and sending it to each other for importing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "** Highlights: This enhancement builds upon all of the existing user fields, requiring an in-depth analysis into the workings of the `Logic` and `Model` component. The implementation required coalescing all of a user\u0027s details during exporting, as well as decoding it into the respective fields subsequently during importing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *Minor enhancement*: added a `free` command that allows the user to find the next immediate available time-slot for himself, or his contacts from the current time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] \u003cTo be confirmed if we are still using collated code files\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "*** To be added."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "*** Added features coming in v2.0 in the User Guide (Pull Request #\u003cTo be added\u003e)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): To be added."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "*** Contributed to forum discussions: To be added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class: To be added."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "leegengyu": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.storage.NotesDownloadStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.storage.NotesDownloadStorageHelper;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * Test commit to see if Travis detects commits after re-configuring."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": "        NotesDownloadStorage notesDownloadStorage \u003d new NotesDownloadStorageHelper(userPrefs.getNotesFolderPath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "auskure"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, notesDownloadStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            ((AddressBook) initialData).setSelf();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            ((AddressBook) initialData).setSelf();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 3,
      "auskure": 5,
      "-": 207,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"There is no such person with the index that you have entered. Please try again.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_PERSONS_AND_GROUPS_LISTED_OVERVIEW \u003d \"%1$d persons/groups listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"MODULE CODE NOT FOUND\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_UNABLE_REACH_IVLE \u003d \"UNABLE TO LOGIN TO IVLE AT THIS TIME\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_FILE_CORRUPTED \u003d \"Downloaded file was corrupted\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_DOWNLOAD_SUCCESS \u003d \"\\r\\nDownloaded file at \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_CHROME_DRIVER_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        \"chromeDrivers are not found, please check if you have installed the application correctly\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_NOTES_FOLDER_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        \"note folder is not found, please check if you have installed the application correctly\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_EXTRACTION_JAR_FAIL \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        \"Extracting chromeDrivers or setting up Notes fold has failed\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_DOWNLOAD_SELECT_SUCCESS \u003d \"Here are your the files available for: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_USERNAME_PASSWORD_ERROR \u003d \"You have entered the Wrong username or Password.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_DYNAMIC_WAITING_INTERRUPTED \u003d \"Waiting for the files have been interrupted\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_DOWNLOAD_SELECT_NO_FILES_SELECTED \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        \"Please select a file after the \\\"file/\\\" tag. Ie: file/(0,1,2...n))\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_FILE_DOES_NOT_EXIST_ERROR \u003d \"A file you selected does not exist,\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"download Incomplete\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_DOWNLOAD_DISABLED \u003d \"The download function has temporarily been disabled \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"in accordance with\\r\\nNUS Information Technology Acceptable use policy for IT resources Ver4.2,\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \" Clause 4.6\\r\\nUsers are still able to login and view available files to be downloaded.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 1,
      "BearPerson1": 13,
      "-": 11,
      "leegengyu": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public int getTwoBased() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return zeroBasedIndex + 2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 4,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/NotesDownloadEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "/** Indicates new notes have been downloaded*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class NotesDownloadEvent extends NotesEvent {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private final String moduleName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public NotesDownloadEvent(String event, String moduleName) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "        super(event);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public String getModuleName() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/NotesEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "/** Indicates the notes downloaded has changed*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class NotesEvent extends BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "    protected final String event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public NotesEvent(String event) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public String getEvent() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return \"notes manipulated: \" + event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Writes, reads, relocates and deletes files"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final String PARAM_CURRENT_DIRECTORY \u003d \"user.dir\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Helps to find the current directory"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static String currentDirectory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return System.getProperty(PARAM_CURRENT_DIRECTORY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static boolean isDirectoryExists(Path directory) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return Files.exists(directory) \u0026\u0026 Files.isDirectory(directory);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Creates a directory if it does not exist."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * @throws IOException if the directory cannot be created."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static void createDirectoryIfMissing(Path directory) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (!isDirectoryExists(directory)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": "            createDirectory(directory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Creates a directory if it does not exist."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static void createDirectory(Path directory) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (Files.exists(directory)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.createDirectory(directory);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Moves all files in a given folder, to a designated folder"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static void relocateFiles(Path folder, String designatedFolder) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File currentDirectory \u003d new File(folder.toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String targetFolder \u003d currentDirectory.toString() + \"/\" + designatedFolder + \"/\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String currentName;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File[] filesList \u003d currentDirectory.listFiles();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (File file : filesList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (file.isDirectory() || file.isHidden()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "auskure"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "auskure"
        },
        "content": "            currentName \u003d file.getName();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "auskure"
        },
        "content": "            file.renameTo(new File(targetFolder + currentName));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Deletes all files in a given folder"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static void deleteAllFiles(Path folder) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File currentDirectory \u003d new File(folder.toString());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String currentName;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File[] filesList \u003d currentDirectory.listFiles();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (File file : filesList) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "auskure"
        },
        "content": "            currentName \u003d file.getName();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "auskure"
        },
        "content": "            //No bookkeeping files stored by the Operating System should be deleted"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (file.isHidden()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "auskure"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "auskure"
        },
        "content": "            String[] directoryContents \u003d file.list();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (file.isDirectory() \u0026\u0026 directoryContents !\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "auskure"
        },
        "content": "                recursiveDelete(file);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "auskure"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "auskure"
        },
        "content": "            System.out.println(currentName);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "auskure"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Helps to delete notes in an occupied folder"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static void recursiveDelete(File file) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (file.isDirectory()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "auskure"
        },
        "content": "            File[] directoryContents \u003d file.listFiles();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (directoryContents !\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "auskure"
        },
        "content": "                for (File content : directoryContents) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "auskure"
        },
        "content": "                    recursiveDelete(content);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "auskure"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "auskure"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 93,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/UnzipUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.zip.ZipEntry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.zip.ZipInputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Helper functions for handling downloaded zip files"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class UnzipUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final int PARAM_BUFFER_SIZE \u003d 1024;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final int PARAM_MININUM_SIZE \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final int PARAM_OFFSET \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final String ZIP_POSTFIX \u003d \".zip\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns if {@code unzipFilePath, targetFilePath and targetFileKeyword} is able to be found"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * e.g. user/main/toUnzip, user/main/target, zipped"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * The zipped file will then be deleted"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * @throws IOException if zipped file cannot be found, or if the buffered stream used to write the file is"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * corrupted"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static void unzipFile(Path absoluteDownloadFilePath, String moduleCode) throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final String currentDirectoryPath \u003d absoluteDownloadFilePath.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final String fullTargetFilePath \u003d currentDirectoryPath + \"/\" + moduleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File currentDirectory \u003d new File(currentDirectoryPath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final File targetFile \u003d getFile(currentDirectory, ZIP_POSTFIX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final String inputZipFile \u003d currentDirectoryPath + \"/\" + targetFile.getName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final String outputZipFolder \u003d fullTargetFilePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "        unZip(inputZipFile, outputZipFolder);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "        targetFile.delete();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns the target file if it exists within the current directory."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static File getFile(File curDir, String keyWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File targetFile \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String currentName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File[] filesList \u003d curDir.listFiles();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (File file : filesList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (file.isFile()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "                currentName \u003d file.getName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "                if (currentName.contains(keyWord)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "                    targetFile \u003d file;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return targetFile;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Unzips the target file if it exists within the current directory."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * @throws IOException in the unlikely case that the buffered stream is corrupted."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static void unZip(String zipFile, String outputFolder) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "auskure"
        },
        "content": "        byte[] buffer \u003d new byte[PARAM_BUFFER_SIZE];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "auskure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": "            //create output directory is not exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": "            File folder \u003d new File(outputFolder);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (!folder.exists()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "auskure"
        },
        "content": "                folder.mkdir();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": "            // Acquiring the content of the zip file through an input stream"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "auskure"
        },
        "content": "            FileInputStream fileInputStream \u003d new FileInputStream(zipFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "auskure"
        },
        "content": "            ZipInputStream zipinputstream \u003d new ZipInputStream(fileInputStream);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "auskure"
        },
        "content": "            // Acquiring the list entries of the zip file"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "auskure"
        },
        "content": "            ZipEntry zipEntry \u003d zipinputstream.getNextEntry();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": "            // Unzipping the folder"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "auskure"
        },
        "content": "            while (zipEntry !\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "auskure"
        },
        "content": "                String fileName \u003d zipEntry.getName();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "auskure"
        },
        "content": "                File newFile \u003d new File(outputFolder + File.separator + fileName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": "                //create all non exists folders"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "                //else you will hit FileNotFoundException for compressed folder"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": "                new File(newFile.getParent()).mkdirs();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "                FileOutputStream fileOutputStream \u003d new FileOutputStream(newFile);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "auskure"
        },
        "content": "                int len;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "auskure"
        },
        "content": "                while ((len \u003d zipinputstream.read(buffer)) \u003e PARAM_MININUM_SIZE) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "auskure"
        },
        "content": "                    fileOutputStream.write(buffer, PARAM_OFFSET, len);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "auskure"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": "                fileOutputStream.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "auskure"
        },
        "content": "                zipEntry \u003d zipinputstream.getNextEntry();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "auskure"
        },
        "content": "            zipinputstream.closeEntry();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": "            zipinputstream.close();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "auskure"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.logic.commands.DownloadAllNotesCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.logic.commands.DownloadSelectNotesCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private LinkedList\u003cString\u003e userInputHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // Only add history if the previous command was not a download command,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // this is because download commands involve sensitive information"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (!userInput.contains(DownloadAllNotesCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            \u0026\u0026 !userInput.contains(DownloadSelectNotesCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of {@code userInputHistory}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new LinkedList\u003c\u003e(userInputHistory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 5,
      "-": 59,
      "leegengyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENROLLED_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "            + \"[\" + PREFIX_ENROLLED_MODULE + \"ENROLLED MODULE]...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": "            + PREFIX_TAG + \"owesMoney \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "            + PREFIX_ENROLLED_MODULE + \"CS2101 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "            + PREFIX_ENROLLED_MODULE + \"CS2113T\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 5,
      "-": 67,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ChangeTimeSlotCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsSelfPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class ChangeTimeSlotCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"change\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the selected time slot \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"Parameters: INDEX \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"DAY(mon, tue, wed, thu, fri) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        + \"TIME(8am, 9am, 10am, 11am, 12pm, 1pm, 2pm, 3pm, 4pm, 5pm, 6pm, 7pm) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        + \"Activity \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \" + \"mon \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        + \"8am \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        + \"CS2107\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Time slot changed: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_EDIT_SELF_SUCCESS \u003d \"Time slot changed: Self\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_NOTHING_CHANGED \u003d \"No time slot was changed\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final String reference;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final String[] actions;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public ChangeTimeSlotCommand(String index, String[] actions) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        requireNonNull(actions);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.reference \u003d index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.actions \u003d actions;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person personToChange;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            int index \u003d Integer.parseInt(reference);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            lastShownList \u003d ((ObservableList\u003cPerson\u003e) lastShownList).filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (index - 1 \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            personToChange \u003d lastShownList.get(index - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            lastShownList \u003d ((ObservableList\u003cPerson\u003e) lastShownList).filtered(new IsSelfPredicate());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            personToChange \u003d lastShownList.get(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e timeSlots \u003d personToChange.getTimeSlots();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String day \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String time \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 1; i \u003c actions.length; i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String activity;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (i % 3 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                day \u003d actions[i];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (i % 3 \u003d\u003d 2) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                time \u003d actions[i];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (i % 3 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                activity \u003d actions[i];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                timeSlots.get(day).set(changeTimeToIndex(time), new TimeSlots(activity));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person newPerson \u003d new Person(personToChange.getName(), personToChange.getPhone(), personToChange.getEmail(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": "            personToChange.getAddress(), personToChange.getTags(), personToChange.getEnrolledModules(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            timeSlots);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (!personToChange.isSamePerson(newPerson) \u0026\u0026 model.hasPerson(newPerson)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new CommandException(MESSAGE_NOTHING_CHANGED);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        model.updatePerson(personToChange, newPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (!reference.equalsIgnoreCase(\"self\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, newPerson));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_SELF_SUCCESS));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private int changeTimeToIndex(String time) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (time.equalsIgnoreCase(\"8am\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 0;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"9am\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"10am\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 2;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"11am\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 3;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"12pm\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 4;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"1pm\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 5;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"2pm\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 6;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"3pm\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 7;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"4pm\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 8;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"5pm\")) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 9;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"6pm\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 10;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"7pm\")) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 11;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return 11;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 149,
      "auskure": 1,
      "-": 1,
      "leegengyu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearNotesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Deletes all downloaded notes from the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class ClearNotesCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearNotes\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String MESSAGE_DELETE_ALL_NOTES_SUCCESS \u003d \"All notes have been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "        model.indicateNotesChanged(COMMAND_WORD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return new CommandResult(MESSAGE_DELETE_ALL_NOTES_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 25,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsMergedPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        + \"Parameters: LIST (Main, Merged) INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \"merged \" + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_DELETE_MERGED_SUCCESS \u003d \"Deleted Group: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final String targetList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public DeleteCommand(String targetList, Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.targetList \u003d targetList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (targetList.equalsIgnoreCase(\"main\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            lastShownList \u003d ((ObservableList\u003cPerson\u003e) lastShownList).filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (targetList.equalsIgnoreCase(\"merged\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            lastShownList \u003d ((ObservableList\u003cPerson\u003e) lastShownList).filtered(new IsMergedPredicate());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (targetList.equalsIgnoreCase(\"main\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_MERGED_SUCCESS, personToDelete.getName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 17,
      "-": 50,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DownloadAbstract.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "//@@author BearPerson1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.By;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.Point;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.WebDriver;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.WebElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.chrome.ChromeDriver;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.chrome.ChromeOptions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.support.ui.Select;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.commons.util.FileUtil.currentDirectory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * DownloadAbstract is an abstract class that does the basic setting up of Selenium chrome drivers. Implementation of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * DownloadAllNotesCommand and DownloadSelectNotesCommand extends on this class"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * DownloadAbstract extends on the command class"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "public abstract class DownloadAbstract extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String MAC_CHROME_DRIVER_DIRECTORY \u003d \"macChromeDriver\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String MAC_CHROME_DRIVER_NAME \u003d \"chromedriver\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String WINDOWS_CHROME_DRIVER_DIRECTORY \u003d \"windowsChromeDriver\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String WINDOWS_CHROME_DRIVER_NAME \u003d \"chromedriver.exe\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String DOWNLOAD_FILE_PATH \u003d \"/notes\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String IVLE_TITLE \u003d \"IVLE\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String WINDOWS_OS_NAME \u003d \"Windows\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String MAC_OS_NAME \u003d \"Mac\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String IVLE_ADDRESS \u003d \"https://ivle.nus.edu.sg\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String DOWNLOAD_FILE_ONGOING_EXTENSION \u003d \"crdownload\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String IVLE_USERNAME_FIELD_ID \u003d \"ctl00_ctl00_ContentPlaceHolder1_userid\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String IVLE_PASSWORD_FIELD_ID \u003d \"ctl00_ctl00_ContentPlaceHolder1_password\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String IVLE_LOGIN_BUTTON_ID \u003d \"ctl00_ctl00_ContentPlaceHolder1_btnSignIn\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String IVLE_DOWNLOAD_PAGE_ADDRESS \u003d \"https://ivle.nus.edu.sg/v1/File/download_all.aspx\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String IVLE_MODULE_LIST_FIELD_ID \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        \"ctl00_ctl00_ctl00_ContentPlaceHolder1_ContentPlaceHolder1_ContentPlaceHolder1_ddlModule\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected String username;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected String password;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected String moduleCode;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected String currentDirectoryPath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected String downloadPath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected boolean isDownloadDisabled \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public DownloadAbstract(String username, String password, String moduleCode) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        this.moduleCode \u003d moduleCode.toLowerCase();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        this.currentDirectoryPath \u003d currentDirectory();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        this.downloadPath \u003d currentDirectoryPath + DOWNLOAD_FILE_PATH;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * extractFilesFromJar makes the notes folder to store the notes for the user if it doesnt exists."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * as well as extract the relevant chromedriver files from inside the jar to outside the jar to be able to be used."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * this method should only run when running from a fresh jar file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected void extractFilesFromJar() throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File notesFolder \u003d new File(currentDirectoryPath + DOWNLOAD_FILE_PATH);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!notesFolder.exists()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            notesFolder.mkdir();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        ClassLoader classLoader \u003d getClass().getClassLoader();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        URL resource \u003d classLoader.getResource(WINDOWS_CHROME_DRIVER_DIRECTORY + \"/\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            + WINDOWS_CHROME_DRIVER_NAME);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File chromeDriverDir \u003d new File(WINDOWS_CHROME_DRIVER_DIRECTORY);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!chromeDriverDir.exists()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            chromeDriverDir.mkdirs();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File windowsChromeDriver \u003d new File(WINDOWS_CHROME_DRIVER_DIRECTORY"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            + File.separator + WINDOWS_CHROME_DRIVER_NAME);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!windowsChromeDriver.exists()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            windowsChromeDriver.createNewFile();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            org.apache.commons.io.FileUtils.copyURLToFile(resource, windowsChromeDriver);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        resource \u003d classLoader.getResource(MAC_CHROME_DRIVER_DIRECTORY + \"/\" + MAC_CHROME_DRIVER_NAME);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        chromeDriverDir \u003d new File(MAC_CHROME_DRIVER_DIRECTORY);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!chromeDriverDir.exists()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            chromeDriverDir.mkdirs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File macChromeDriver \u003d new File(MAC_CHROME_DRIVER_DIRECTORY + File.separator"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            + MAC_CHROME_DRIVER_NAME);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!macChromeDriver.exists()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            macChromeDriver.createNewFile();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            org.apache.commons.io.FileUtils.copyURLToFile(resource, macChromeDriver);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * initializeChromeDriverPaths dynamically sets the download path of the files and location of chromeDriver"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * so that its relative to where this project is stored and what OS the user is using."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * downloadPath will change from the root directory location of the application to the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * location of the tempDownloadStorage"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected void initializeChromeDriverPaths() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (System.getProperty(\"os.name\").contains(WINDOWS_OS_NAME)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            System.setProperty(\"webdriver.chrome.driver\", currentDirectoryPath + \"/\" + WINDOWS_CHROME_DRIVER_DIRECTORY + \"/\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + WINDOWS_CHROME_DRIVER_NAME);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } else if (System.getProperty(\"os.name\").contains(MAC_OS_NAME)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            System.setProperty(\"webdriver.chrome.driver\", currentDirectoryPath + \"/\" + MAC_CHROME_DRIVER_DIRECTORY + \"/\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + MAC_CHROME_DRIVER_NAME);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * initializeWebDriver sets the download path of the chromeDriver"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * Additionally, chromeDriver has disabled headless downloading as a new security feature, thus the alternative"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * to having the chrome windows blocking the UI is to shift it to a unviewable location at the bottom of the screen."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected WebDriver initializeWebDriver() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        HashMap\u003cString, Object\u003e chromePrefs \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        chromePrefs.put(\"profile.default_content_settings.popups\", 0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        chromePrefs.put(\"download.default_directory\", downloadPath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        chromePrefs.put(\"browser.setDownloadBehavior\", \"allow\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        ChromeOptions options \u003d new ChromeOptions();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        options.setExperimentalOption(\"prefs\", chromePrefs);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        WebDriver driver \u003d new ChromeDriver(options);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        driver.manage().window().setPosition(new Point(-2000, 0));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        return driver;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * isModuleExisting checks if the module explicitly provided by the user is Available to the user."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @param driver is the current existing WebDriver session"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @return true if found, false if not."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected boolean isModuleExisting(WebDriver driver) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        driver.get(IVLE_DOWNLOAD_PAGE_ADDRESS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        Select dropDown \u003d new Select(driver.findElement(By.id(IVLE_MODULE_LIST_FIELD_ID)));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        List\u003cWebElement\u003e itemsModules \u003d dropDown.getOptions();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        int itemCount \u003d itemsModules.size();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         *i starts at 1 because 0 is reserved for \"select module\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         *an iterator is used because the dropDown element is selected by index,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         *thus search is more logical to be sequential."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        for (int i \u003d 1; i \u003c itemCount; i++) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            if (isModuleMatching(itemsModules.get(i).getText().toLowerCase())) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                moduleCode \u003d itemsModules.get(i).getText();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                dropDown.selectByIndex(i);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * isModuleMatching is a helper function of isModuleExisting, it iterates through the moduleCode as provided by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * the user, and checks it character by character against all the mods that IVLE displays."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @param input is the string checked against the mod field that the user provided"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @return true if it exists on IVLE, else not."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected boolean isModuleMatching(String input) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            for (int i \u003d 0; i \u003c moduleCode.length(); i++) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                if (input.charAt(i) !\u003d moduleCode.charAt(i)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (StringIndexOutOfBoundsException sioobe) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * isLoggedIn checks if user has successfully logged in with the provided credentials."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected boolean isLoggedIn(WebDriver driver) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        return !(driver.getTitle().contains(IVLE_TITLE));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * loginIvle attempts to login to IVLE with the provided credentials."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @param driver is the current WebDriver session"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected void loginIvle(WebDriver driver) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        driver.get(IVLE_ADDRESS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        driver.findElement(By.id(IVLE_USERNAME_FIELD_ID)).sendKeys(username);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        driver.findElement(By.id(IVLE_PASSWORD_FIELD_ID)).sendKeys(password);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        driver.findElement(By.id(IVLE_LOGIN_BUTTON_ID)).click();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected abstract void downloadFiles(WebDriver driver);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * dynamicWaiting implements \"busy waiting\" to prevent premature termination of chromeDriver in event that"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * the file download size requires more time than the default timeout of chromeDriver"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected void dynamicWaiting() throws InterruptedException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String[] keyExtentions \u003d {DOWNLOAD_FILE_ONGOING_EXTENSION};"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            Thread.sleep(100);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } while (!org.apache.commons.io.FileUtils.listFiles"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            (new File(downloadPath), keyExtentions, false).isEmpty());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * initializeDownloadFolder deletes instances of \"downloading\" file types, to prevent dynamicWaiting running"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * indefinitely"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected void initializeDownloadFolder() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File folder \u003d new File(downloadPath);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File[] filesList \u003d folder.listFiles();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        for (int i \u003d 0; i \u003c filesList.length; i++) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            File currentFile \u003d filesList[i];"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            if (currentFile.getName().endsWith(DOWNLOAD_FILE_ONGOING_EXTENSION)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                filesList[i].delete();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 253
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DownloadAllNotesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "//@@author BearPerson1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.By;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.WebDriver;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.WebElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "public class DownloadAllNotesCommand extends DownloadAbstract {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"downloadAllNotes\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"downloadAllNotes user/(username) pass/(password) mod/(moduleCode)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static final String CHECKBOX_XPATH_VALUE \u003d \"//input[@type\u003d\u0027checkbox\u0027]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static final String IVLE_DOWNLOAD_PAGE_BUTTON_ID \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        \"ctl00_ctl00_ctl00_ContentPlaceHolder1_ContentPlaceHolder1_ContentPlaceHolder1_btnDownloadSel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public DownloadAllNotesCommand(String username, String password, String moduleCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        super(username, password, moduleCode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            extractFilesFromJar();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_EXTRACTION_JAR_FAIL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            initializeChromeDriverPaths();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_CHROME_DRIVER_NOT_FOUND);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        WebDriver driver \u003d initializeWebDriver();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            loginIvle(driver);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (NoSuchElementException nse) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            driver.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_UNABLE_REACH_IVLE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!isLoggedIn(driver)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            driver.close();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_USERNAME_PASSWORD_ERROR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (isModuleExisting(driver)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "             * Updated to disable download operations."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "             */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            if (isDownloadDisabled) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                driver.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_DOWNLOAD_DISABLED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            initializeDownloadFolder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            downloadFiles(driver);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                dynamicWaiting();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            } catch (InterruptedException ie) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_DYNAMIC_WAITING_INTERRUPTED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            driver.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            model.indicateNotesDownloaded(COMMAND_WORD, moduleCode);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            return new CommandResult(moduleCode + Messages.MESSAGE_DOWNLOAD_SUCCESS"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + downloadPath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        driver.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        throw new CommandException(Messages.MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * downloadFiles selects all the available files to be downloaded and then selects the \"download files\" button"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @param driver is the current existing WebDriver session"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected void downloadFiles(WebDriver driver) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        List\u003cWebElement\u003e checkBoxList \u003d driver.findElements(By.xpath(CHECKBOX_XPATH_VALUE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        for (WebElement checkBox : checkBoxList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            if (!checkBox.isSelected()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                checkBox.click();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        driver.findElement(By.id(IVLE_DOWNLOAD_PAGE_BUTTON_ID)).click();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 96,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DownloadSelectNotesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "//@@author BearPerson1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.By;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.WebDriver;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.WebElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.commons.util.FileUtil.createDirectoryIfMissing;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "public class DownloadSelectNotesCommand extends DownloadAbstract {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"downloadSelectNotes\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To display all available notes:\\r\\n\" + COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        + \" user/(username) pass/(password) mod/(moduleCode)\\r\\nTo select the notes(by index):\\r\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        + COMMAND_WORD + \" user/(username) pass/(password) mod/(moduleCode) file/0,1,2...n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String NEWLINE_SEPERATOR \u003d \"\\r\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String WORKBIN_CSS_SELECTOR_ID \u003d \"a[href^\u003d\\\"/workbin\\\"]\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String TREEVIEW_CLASS_ID \u003d \"TreeView\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String FILE_DOWNLOAD_LINK_ATTRIBUTE_ID \u003d \"href\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private ArrayList\u003cInteger\u003e fileSelect;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private String availableDownloadFiles;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * secondary constructor to handle execution if user enters values with the PREFIX_SELECT_FILE prefix."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public DownloadSelectNotesCommand(String username, String password, String moduleCode, String fileSelectInput) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        super(username, password, moduleCode);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        fileSelect \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        for (String id : fileSelectInput.split(\",\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            fileSelect.add(Integer.parseInt(id));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public DownloadSelectNotesCommand(String username, String password, String moduleCode) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        super(username, password, moduleCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            extractFilesFromJar();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_EXTRACTION_JAR_FAIL);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            initializeChromeDriverPaths();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_CHROME_DRIVER_NOT_FOUND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        WebDriver driver \u003d initializeWebDriver();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        Path notesFolder \u003d Paths.get(\"notes\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            createDirectoryIfMissing(notesFolder);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(\"Failed to create new folders\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            loginIvle(driver);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (NoSuchElementException nse) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            driver.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_UNABLE_REACH_IVLE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!isLoggedIn(driver)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            driver.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_USERNAME_PASSWORD_ERROR);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (isModuleExisting(driver)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            if (fileSelect \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                availableDownloadFiles \u003d getFileNames(driver);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                driver.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_DOWNLOAD_SELECT_SUCCESS + moduleCode + \"\\r\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                    + availableDownloadFiles);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "             * Updated to disable download operations."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "             */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            if (isDownloadDisabled) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                driver.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_DOWNLOAD_DISABLED);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            initializeDownloadFolder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                downloadFiles(driver);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            } catch (IndexOutOfBoundsException iobe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                driver.close();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_FILE_DOES_NOT_EXIST_ERROR);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                dynamicWaiting();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            } catch (InterruptedException ie) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_DYNAMIC_WAITING_INTERRUPTED);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            driver.close();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            model.indicateNotesDownloaded(COMMAND_WORD, moduleCode);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            return new CommandResult(moduleCode + Messages.MESSAGE_DOWNLOAD_SUCCESS"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + downloadPath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        driver.close();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        throw new CommandException(Messages.MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * If user did not enter specified file name after the PREFIX_SELECT_FILES, program will search all available"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * files of the selected module and parse it into a string."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @param driver is the current existing WebDriver session"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @return A string parsed with all the available files from that module."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private String getFileNames(WebDriver driver) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        WebElement treeview \u003d driver.findElement(By.className(TREEVIEW_CLASS_ID));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        List\u003cWebElement\u003e fileResult \u003d treeview.findElements(By.cssSelector(WORKBIN_CSS_SELECTOR_ID));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String result \u003d new String();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        for (int i \u003d 0; i \u003c fileResult.size(); i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            result +\u003d (i + \": \" + fileResult.get(i).getText() + NEWLINE_SEPERATOR);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            //below statements are for debug. todo: remove when publishing"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            //System.out.println(fileResult.get(i).getText()); // filename"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            //System.out.println(fileResult.get(i).getAttribute(\"href\")); // link"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * Download files, download all the selected files mentioned after the PREFIX_SELECTED_FILES to the specified"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * download location"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @param driver is the current existing WebDriver session"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected void downloadFiles(WebDriver driver) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        WebElement treeview \u003d driver.findElement(By.className(TREEVIEW_CLASS_ID));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        List\u003cWebElement\u003e fileResult \u003d treeview.findElements(By.cssSelector(WORKBIN_CSS_SELECTOR_ID));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        for (int fileId : fileSelect) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            driver.get(fileResult.get(fileId).getAttribute(FILE_DOWNLOAD_LINK_ATTRIBUTE_ID));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 154
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENROLLED_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\" + \"[\" + PREFIX_ENROLLED_MODULE + \"MODULE]...\" + \"\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index                of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        lastShownList \u003d ((ObservableList\u003cPerson\u003e) lastShownList).filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Map\u003cString, EnrolledModule\u003e updatedEnrolledModules \u003d editPersonDescriptor.getEnrolledModules()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "auskure"
        },
        "content": "            .orElse(personToEdit.getEnrolledModules());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e updatedTimeSlots \u003d personToEdit.getTimeSlots();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "auskure"
        },
        "content": "            updatedEnrolledModules, updatedTimeSlots);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "auskure"
        },
        "content": "        private Map\u003cString, EnrolledModule\u003e enrolledModules;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        private Map\u003cString, List\u003cTimeSlots\u003e\u003e timeslots;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "auskure"
        },
        "content": "            setEnrolledModules(toCopy.enrolledModules);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            setTimeSlots(toCopy.timeslots);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, enrolledModules);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (tags !\u003d null) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "auskure"
        },
        "content": "                this.tags \u003d tags;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "auskure"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                this.tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (tags !\u003d null) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "auskure"
        },
        "content": "                return Optional.of(Collections.unmodifiableSet(tags));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "auskure"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "auskure"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "auskure"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "auskure"
        },
        "content": "         * Sets {@code enrolledModules} to this object\u0027s {@code enrolledModules}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "auskure"
        },
        "content": "         * A defensive copy of {@code enrolledModules} is used internally."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "auskure"
        },
        "content": "         */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "auskure"
        },
        "content": "        public void setEnrolledModules(Map\u003cString, EnrolledModule\u003e enrolledModules) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (enrolledModules !\u003d null) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "auskure"
        },
        "content": "                this.enrolledModules \u003d enrolledModules;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "auskure"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "auskure"
        },
        "content": "                this.enrolledModules \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "auskure"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "auskure"
        },
        "content": "         * Returns an unmodifiable map of enrolled modules, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "auskure"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "auskure"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code enrolledModules} is null."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "auskure"
        },
        "content": "         */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "auskure"
        },
        "content": "        public Optional\u003cMap\u003cString, EnrolledModule\u003e\u003e getEnrolledModules() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (enrolledModules !\u003d null) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "auskure"
        },
        "content": "                return Optional.of(Collections.unmodifiableMap(enrolledModules));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "auskure"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "auskure"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        public void setTimeSlots(Map\u003cString, List\u003cTimeSlots\u003e\u003e timeslots) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            this.timeslots \u003d timeslots;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        public Map\u003cString, List\u003cTimeSlots\u003e\u003e getTimeSlots() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return timeslots;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "auskure"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "auskure"
        },
        "content": "                \u0026\u0026 getEnrolledModules().equals(e.getEnrolledModules())"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u0026\u0026 getTimeSlots().equals(e.getTimeSlots());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 21,
      "auskure": 44,
      "-": 228,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.IsSelfPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.awt.datatransfer.StringSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.awt.datatransfer.Clipboard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.awt.Toolkit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Base64;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * Export a person into string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Export a person\u0027s full details \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"into a string, which is used for import (into another NSync).\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"Select \u0027public\u0027 if you would like to export the time-table in its entirety, \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"or select \u0027private\u0027 if you would like to hide the contents of the occupied-time slots.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"Parameters: PRIVACY (public, private), INDEX (positive integer)\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" public 1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private final String index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private final String privacy;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public ExportCommand(String privacy, String index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        this.privacy \u003d privacy;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Calls getSerializedString to get a Base64 string for the person selected through the index."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * This generated string is copied to the user\u0027s clipboard for convenience (easy pasting)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * @throws CommandException if the index given is invalid"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Person myPerson;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (index.equalsIgnoreCase(\"self\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            filteredPersonList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList).filtered(new IsSelfPredicate());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            myPerson \u003d filteredPersonList.get(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            int num;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                num \u003d Integer.parseInt(index) - 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                throw new CommandException(String.format(\"You have entered an invalid number for the INDEX parameter. \" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    \"Please enter a valid index.\\n\" + MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            filteredPersonList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList).filtered"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                (new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            if (num \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            myPerson \u003d filteredPersonList.get(num);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (!privacy.equalsIgnoreCase(\"public\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            changeToBusy(myPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String serializedString \u003d getSerializedString(myPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        StringSelection ss \u003d new StringSelection(serializedString);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Clipboard clipboard \u003d Toolkit.getDefaultToolkit().getSystemClipboard();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        clipboard.setContents(ss, null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String outputToUser \u003d serializedString + \"\\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        outputToUser +\u003d \"The generated string has been copied onto your clip-board.\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return new CommandResult(outputToUser);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Generates the Base64 String for the Person object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private String getSerializedString(Serializable o) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        try (ObjectOutputStream oos \u003d new ObjectOutputStream(baos)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            oos.writeObject(o);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            oos.close();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return Base64.getEncoder().encodeToString(baos.toByteArray());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return \"Error generating string. Please try again.\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private void changeToBusy(Person source) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e timeSlots \u003d source.getTimeSlots();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String[] days \u003d {\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"};"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        for (String day : days) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            List\u003cTimeSlots\u003e daySlots \u003d timeSlots.get(day);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                TimeSlots activity \u003d daySlots.get(i);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                System.out.println(activity.toString() + \" zzk\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                if (!activity.toString().equalsIgnoreCase(\"free\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    activity \u003d new TimeSlots(\"busy\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    daySlots.set(i, activity);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leegengyu": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.TimetableContainsModulePredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "//@@E0201942"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book who has any of the modules or time slots inputted."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters the list to based on free time slots and \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"modules taken \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2101 mon 10am\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final TimetableContainsModulePredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public FilterCommand(TimetableContainsModulePredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        model.getFilteredPersonList().filtered(new IsNotSelfOrMergedPredicate()).size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "E0201942": 6,
      "-": 42,
      "leegengyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"Parameters: LIST(main, merged) KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"main\" + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_AND_GROUPS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 2,
      "-": 40,
      "leegengyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FreeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.IsSelfPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * Checks for common free time slot for 1 or multiple people"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class FreeCommand extends Command {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"free\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the next available time slot for persons \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"listed by their index number.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"Parameter: \" + PREFIX_FREE + \"[INDEX]\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \" for all contacts you would like to compare.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_FREE + \"1 \" + PREFIX_FREE + \"2 \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private static final String MESSAGE_NOT_FREED \u003d \"There are no common free time slots found.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private final List\u003cString\u003e indices;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private final String[] days \u003d {\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"};"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public FreeCommand(List\u003cString\u003e indices) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        requireNonNull(indices);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        this.indices \u003d indices;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        lastShownList \u003d ((ObservableList\u003cPerson\u003e) lastShownList).filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // Check if inputs are valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // Checking could not be done in parser as Model is only available here"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        for (String index : indices) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            if (index.equalsIgnoreCase(\"self\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            int currentIndex \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                currentIndex \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            if (currentIndex \u003e lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // remove the first person from the list as we have reference to him in personFirst"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Person personFirst;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (indices.get(0).equalsIgnoreCase(\"self\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            personFirst \u003d model.getFilteredPersonList().filtered(new IsSelfPredicate()).get(0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            personFirst \u003d lastShownList.get(Integer.parseInt(indices.get(0)) - 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        indices.remove(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // start generation of output string to user"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String outputToUser \u003d \"The next available timeslot for\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        outputToUser +\u003d \" \" + personFirst.getName() + \",\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // if trying to find free slots for more than 1 person, use the merge algorithm to create a merged timetable to"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // find a common free slot(s)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (indices.size() \u003e 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            for (String x : indices) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                Person personTemp;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                if (x.equalsIgnoreCase(\"self\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    personTemp \u003d model.getFilteredPersonList().filtered(new IsSelfPredicate()).get(0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    personTemp \u003d lastShownList.get(Integer.parseInt(x) - 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                personFirst \u003d mergeTimetables(personFirst, personTemp, 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                outputToUser +\u003d \" \" + personTemp.getName() + \",\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            // only finding 1 person free slot, so use the merge algorithm to compare both the same person"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            // to change the time slots to free or busy tag"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            personFirst \u003d mergeTimetables(personFirst, personFirst, 0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        outputToUser \u003d outputToUser.substring(0, outputToUser.length() - 1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        outputToUser \u003d outputToUser + \" is: \";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // if today is saturday or sunday, loop back to monday"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        int dayToCheck;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        boolean isToday \u003d true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (LocalDate.now().getDayOfWeek() \u003d\u003d DayOfWeek.SATURDAY || LocalDate.now().getDayOfWeek()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            \u003d\u003d DayOfWeek.SUNDAY) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck \u003d 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            isToday \u003d false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else if (LocalDate.now().getDayOfWeek() \u003d\u003d DayOfWeek.MONDAY) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck \u003d 0;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else if (LocalDate.now().getDayOfWeek() \u003d\u003d DayOfWeek.TUESDAY) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck \u003d 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else if (LocalDate.now().getDayOfWeek() \u003d\u003d DayOfWeek.WEDNESDAY) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck \u003d 2;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else if (LocalDate.now().getDayOfWeek() \u003d\u003d DayOfWeek.THURSDAY) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck \u003d 3;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck \u003d 4;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Calendar rightNow \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        int hourNow \u003d rightNow.get(Calendar.HOUR_OF_DAY);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (hourNow \u003e\u003d 20) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            // after 8pm, loop to next day"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck++;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck %\u003d 5;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            hourNow \u003d 8;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            isToday \u003d false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cInteger\u003e listFoundSlot \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // loop for 6 days, the 6th day is to look for time that is on this day but hours before current hour"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        for (int i \u003d 0; i \u003c 6; i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            int timeSlotIndex \u003d 0;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            int currentHourIndex \u003d hourNow - 8;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            listFoundSlot.clear();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            boolean found \u003d false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            int prevIndex \u003d -1;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            List\u003cTimeSlots\u003e timeslotToCheck \u003d personFirst.getTimeSlots().get(days[dayToCheck]);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            for (TimeSlots x : timeslotToCheck) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                if (x.toString().equalsIgnoreCase(\"0\")) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    // do not add hours that are before current time if it is today"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    if ((isToday \u0026\u0026 (!(timeSlotIndex \u003c currentHourIndex))) || (!isToday)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                        // finding consecutive slots"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                        if (found \u003d\u003d false) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                            found \u003d true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                            prevIndex \u003d timeSlotIndex;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                            if (timeSlotIndex - prevIndex !\u003d 1) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                                prevIndex \u003d timeSlotIndex;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                        listFoundSlot.add(timeSlotIndex);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                timeSlotIndex++;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            String timeFrom;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            String timeTo;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            DateFormat sdf \u003d new SimpleDateFormat(\"EEE hh:mm aa\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            if (listFoundSlot.size() \u003e 0) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                // found a free slot"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                int foundHour \u003d listFoundSlot.get(0) + 8;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                int endHour \u003d (listFoundSlot.get(listFoundSlot.size() - 1) + 9);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                if (!(isToday \u0026\u0026 (foundHour \u003d\u003d hourNow))) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    isToday \u003d false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                if (isToday) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    timeFrom \u003d sdf.format(rightNow.getTime());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    timeTo \u003d getTimeFormatted(endHour);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    outputToUser +\u003d timeFrom + \" - \" + timeTo;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    return new CommandResult(outputToUser);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    timeFrom \u003d getTimeFormatted(foundHour);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    timeTo \u003d getTimeFormatted(endHour);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    outputToUser +\u003d days[dayToCheck] + \" \" + timeFrom + \" - \" + timeTo;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                return new CommandResult(outputToUser);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck++;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck %\u003d 5;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            hourNow \u003d 8;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            isToday \u003d false;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // if after 6 loops and we are not able to find a common timeslot, returns message"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // to inform user that there is no common free timeslot"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return new CommandResult(MESSAGE_NOT_FREED);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Formats the time into readable String"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * @param Hour"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private String getTimeFormatted(int hours) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String amPm \u003d \"AM\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (hours \u003e 12) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            hours %\u003d 12;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            amPm \u003d \"PM\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else if (hours \u003d\u003d 12) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            amPm \u003d \"PM\";"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return hours + \":00 \" + amPm;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private Person mergeTimetables(Person person1, Person person2, int index) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Name mergedName \u003d new Name(\"a\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Phone phone \u003d new Phone(\"99999999\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Email email \u003d new Email(\"notimportant@no\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Address address;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            address \u003d new Address(person1.getName().toString() + \", \" + person2.getName().toString());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            address \u003d new Address(person1.getAddress().toString() + \", \" + person2.getName().toString());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Set\u003cTag\u003e mergedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        mergedTags.add(new Tag(\"merged\"));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e mergedSlots \u003d mergeTimeSlots(person1.getTimeSlots(), person2.getTimeSlots());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Map\u003cString, EnrolledModule\u003e enrolledClassMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return new Person(mergedName, phone, email, address, mergedTags, enrolledClassMap,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            mergedSlots);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private Map\u003cString, List\u003cTimeSlots\u003e\u003e mergeTimeSlots(Map\u003cString, List\u003cTimeSlots\u003e\u003e slots1,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                                                        Map\u003cString, List\u003cTimeSlots\u003e\u003e slots2) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] mon1 \u003d slots1.get(\"mon\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] mon2 \u003d slots2.get(\"mon\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] tue1 \u003d slots1.get(\"tue\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] tue2 \u003d slots2.get(\"tue\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] wed1 \u003d slots1.get(\"wed\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] wed2 \u003d slots2.get(\"wed\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] thu1 \u003d slots1.get(\"thu\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] thu2 \u003d slots2.get(\"thu\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] fri1 \u003d slots1.get(\"fri\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] fri2 \u003d slots2.get(\"fri\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cTimeSlots\u003e finalMon;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cTimeSlots\u003e finalTue;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cTimeSlots\u003e finalWed;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cTimeSlots\u003e finalThu;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cTimeSlots\u003e finalFri;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e finalSlots \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalMon \u003d compareTimeSlots(mon1, mon2);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalTue \u003d compareTimeSlots(tue1, tue2);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalWed \u003d compareTimeSlots(wed1, wed2);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalThu \u003d compareTimeSlots(thu1, thu2);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalFri \u003d compareTimeSlots(fri1, fri2);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalSlots.put(\"mon\", finalMon);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalSlots.put(\"tue\", finalTue);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalSlots.put(\"wed\", finalWed);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalSlots.put(\"thu\", finalThu);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalSlots.put(\"fri\", finalFri);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return finalSlots;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    List\u003cTimeSlots\u003e compareTimeSlots(TimeSlots[] day1, TimeSlots[] day2) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cTimeSlots\u003e finalDay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            if (day1[i].toString().equalsIgnoreCase(\"free\")"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                || day1[i].toString().equalsIgnoreCase(\"0\")) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                day1[i] \u003d new TimeSlots(\"0\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    Integer.parseInt(day1[i].toString());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    day1[i] \u003d new TimeSlots(\"1\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            if (day2[i].toString().equalsIgnoreCase(\"free\")) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                day2[i] \u003d new TimeSlots(\"0\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                day2[i] \u003d new TimeSlots(\"1\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            String day1BusyCount \u003d day1[i].toString();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            String day2BusyCount \u003d day2[i].toString();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            int totalBusyCount \u003d Integer.parseInt(day1BusyCount) + Integer.parseInt(day2BusyCount);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            String newBusyCount \u003d Integer.toString(totalBusyCount);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            finalDay.add(new TimeSlots(newBusyCount));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return finalDay;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 1,
      "leegengyu": 327
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Base64;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * Import a person from a string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": import the person into the system.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"Parameters: STRING (the Base64 string)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + \"rO0ABXNyACFzZWVkdS5hZGRyZXNzLm1vZGVsLnB...\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private final String personString;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Import successful\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private static final String MESSAGE_FAILED \u003d \"Failed to import\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private static final String MESSAGE_DUPLICATE \u003d \"Failed to import, duplicate person exist\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public ImportCommand(String input) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        this.personString \u003d input.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Reads the input Base64 String and serialize a person object and add it into the addressbook"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * @throws DuplicatePersonException if the person that the user is trying to add already exists"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Person p \u003d getSerializedPerson(personString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            model.addPerson(p);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Serialize a Person object from the given Base64 String"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * @throws CommandException if the given Base64 string is bad and is unable to serialize an object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private Person getSerializedPerson(String s) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            byte[] data \u003d Base64.getDecoder().decode(s);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            ObjectInputStream ois \u003d new ObjectInputStream(new ByteArrayInputStream(data));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            Person p \u003d (Person) ois.readObject();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return p;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            throw new CommandException(MESSAGE_FAILED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leegengyu": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MergeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MERGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.IsSelfPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "//@@E0201942"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Merges the timetables of multiple people"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MergeCommand extends Command {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"merge\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Merges the timetables of selected people\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"by the index number used in the last person listing.\\n \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be positive integer )\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        + PREFIX_MERGE + \"[INDEX] \" + PREFIX_NAME + \"[GROUP NAME]\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"for all timetables you want to merge.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + PREFIX_MERGE + \"1 \" + PREFIX_MERGE + \"2 \" + PREFIX_NAME + \"GES PROJECT\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MERGE_TIMETABLE_SUCCESS \u003d \"Timetables Merged\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_MERGED \u003d \"At least two people to merge must be provided\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"Group name already used, please choose another one\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e indices;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public MergeCommand(List\u003cString\u003e indices, String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(indices);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.indices \u003d indices;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) lastShownList).filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e selfList \u003d ((ObservableList\u003cPerson\u003e) lastShownList).filtered(new IsSelfPredicate());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person[] personsToMerge \u003d new Person[lastShownList.size()];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String index : indices) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (Integer.parseInt(index) \u003e lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String it : indices) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            int index;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                index \u003d Integer.parseInt(it) - 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                    MergeCommand.MESSAGE_USAGE), nfe);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            personsToMerge[i] \u003d mainList.get(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        personsToMerge[i] \u003d selfList.get(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        i++;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int j \u003d 0; j \u003c i - 1; j++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            personsToMerge[j + 1] \u003d mergeTimetables(personsToMerge[j], personsToMerge[j + 1], j);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (model.hasPerson(personsToMerge[i - 1])) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(personsToMerge[i - 1]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_MERGE_TIMETABLE_SUCCESS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Person mergeTimetables(Person person1, Person person2, int index) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Name mergedName \u003d name;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Phone phone \u003d new Phone(\"99999999\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d new Email(\"notimportant@no\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Address address;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            address \u003d new Address(person1.getName().toString() + \", \" + person2.getName().toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            address \u003d new Address(person1.getAddress().toString() + \", \" + person2.getName().toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Set\u003cTag\u003e mergedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        mergedTags.add(new Tag(\"merged\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e mergedSlots \u003d mergeTimeSlots(person1.getTimeSlots(), person2.getTimeSlots());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Map\u003cString, EnrolledModule\u003e enrolledClassMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return new Person(mergedName, phone, email, address, mergedTags, enrolledClassMap,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            mergedSlots);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Map\u003cString, List\u003cTimeSlots\u003e\u003e mergeTimeSlots(Map\u003cString, List\u003cTimeSlots\u003e\u003e slots1,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                                                        Map\u003cString, List\u003cTimeSlots\u003e\u003e slots2) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] mon1 \u003d slots1.get(\"mon\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] mon2 \u003d slots2.get(\"mon\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] tue1 \u003d slots1.get(\"tue\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] tue2 \u003d slots2.get(\"tue\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] wed1 \u003d slots1.get(\"wed\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] wed2 \u003d slots2.get(\"wed\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] thu1 \u003d slots1.get(\"thu\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] thu2 \u003d slots2.get(\"thu\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] fri1 \u003d slots1.get(\"fri\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] fri2 \u003d slots2.get(\"fri\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalMon;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalTue;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalWed;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalThu;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalFri;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e finalSlots \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalMon \u003d compareTimeSlots(mon1, mon2);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalTue \u003d compareTimeSlots(tue1, tue2);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalWed \u003d compareTimeSlots(wed1, wed2);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalThu \u003d compareTimeSlots(thu1, thu2);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalFri \u003d compareTimeSlots(fri1, fri2);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"mon\", finalMon);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"tue\", finalTue);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"wed\", finalWed);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"thu\", finalThu);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"fri\", finalFri);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return finalSlots;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    List\u003cTimeSlots\u003e compareTimeSlots(TimeSlots[] day1, TimeSlots[] day2) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalDay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (day1[i].toString().equalsIgnoreCase(\"free\")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                || day1[i].toString().equalsIgnoreCase(\"0\")) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                day1[i] \u003d new TimeSlots(\"0\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    Integer.parseInt(day1[i].toString());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    day1[i] \u003d new TimeSlots(\"1\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (day2[i].toString().equalsIgnoreCase(\"free\")) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                day2[i] \u003d new TimeSlots(\"0\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                day2[i] \u003d new TimeSlots(\"1\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String day1BusyCount \u003d day1[i].toString();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String day2BusyCount \u003d day2[i].toString();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            int totalBusyCount \u003d Integer.parseInt(day1BusyCount) + Integer.parseInt(day2BusyCount);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String newBusyCount \u003d Integer.toString(totalBusyCount);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            finalDay.add(new TimeSlots(newBusyCount));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return finalDay;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "E0201942": 102,
      "auskure": 2,
      "-": 83,
      "leegengyu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        filteredPersonList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList).filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 3,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShareCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.awt.datatransfer.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.awt.Toolkit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Export a person into string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class ShareCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"share\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Export a contact\u0027s timetable \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        + \"to import it into another address book.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        + \"Parameters: PRIVACY(public, private) INDEX (must be positive integer )\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \"public \" + \" \" + \"1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final String index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final String privacy;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public ShareCommand(String privacy, String index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.privacy \u003d privacy;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Calls getSerializedString to get the Base64 String for the person selected through the index"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * The generated string is copied to the user\u0027s clipboard for easy copy and pasting"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * @throws CommandException if the index given is invalid"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person myPerson;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (index.equalsIgnoreCase(\"self\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            filteredPersonList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList).filtered(new IsSelfPredicate"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                ());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            myPerson \u003d filteredPersonList.get(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            int num;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                num \u003d Integer.parseInt(index) - 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            filteredPersonList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList).filtered"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                (new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (num \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            myPerson \u003d filteredPersonList.get(num);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String theString \u003d getSerializedString(myPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        StringSelection ss \u003d new StringSelection(theString);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Clipboard clipboard \u003d Toolkit.getDefaultToolkit().getSystemClipboard();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        clipboard.setContents(ss, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String output \u003d theString;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        output +\u003d \"The string has been copied onto the clipboard.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return new CommandResult(output);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Generates the Base64 String for the Person object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private String getSerializedString(Person source) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e timeSlots \u003d source.getTimeSlots();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] days \u003d {\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"};"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cString\u003e exportStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String finalExport \u003d \" \";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String day : days) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            List\u003cTimeSlots\u003e daySlots \u003d timeSlots.get(day);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                TimeSlots activity;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                if (privacy.equalsIgnoreCase(\"public\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    activity \u003d daySlots.get(i);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    activity \u003d daySlots.get(i);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    if (!activity.toString().equalsIgnoreCase(\"free\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        activity \u003d new TimeSlots(\"busy\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                String stringToInput \u003d day + \" \" + indexToTime(i) + \" \" + activity.toString() + \" \";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                exportStrings.add(stringToInput);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c exportStrings.size(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            finalExport \u003d finalExport + exportStrings.get(i);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return finalExport;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private String indexToTime(int index) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] timings \u003d {\"8am\", \"9am\", \"10am\", \"11am\", \"12pm\", \"1pm\", \"2pm\", \"3pm\", \"4pm\", \"5pm\", \"6pm\", \"7pm\"};"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return timings[index];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 112,
      "leegengyu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowNotesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "//@@author BearPerson1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "public class ShowNotesCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private String currentDirPath \u003d Paths.get(\".\").toAbsolutePath().normalize().toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private String notesPathExtension \u003d \"/notes\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private String notesPath \u003d currentDirPath + notesPathExtension;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"showNotes\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static final String DIRECTORY_IDENTIFIER \u003d \"Directory: \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static final String FILE_IDENTIFIER \u003d \"File: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static final String NEWLINE_SEPARATOR \u003d \"\\r\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static final String LINE_SEPARATOR \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static final String MESSAGE_FILE_LOCATION_ERROR \u003d \"The folder \\\"notes\\\" is not found!\\r\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        + \"please download some notes to continue using showNotes\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private String MESSAGE_STORED_NOTES \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public String MESSAGE_SUCCESS \u003d \"Here are your Notes stored in: \\r\\n\" + notesPath + \"\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private int DEFAULT_TAB_COUNT \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            getDirectoryFileValues(new File(notesPath), DEFAULT_TAB_COUNT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_LOCATION_ERROR);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + MESSAGE_STORED_NOTES);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * recursively searches for all the files and parses it into MESSAGE_STORED_NOTES"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @param dir   the current starting directory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @param count used to keeptrack of the number of tabs."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public void getDirectoryFileValues(File dir, int count) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File[] files \u003d dir.listFiles();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (count \u003d\u003d 1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            MESSAGE_STORED_NOTES +\u003d LINE_SEPARATOR + NEWLINE_SEPARATOR;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         *  tabPlaceholder is used to insert tabs to make it look more visually appealing"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         *  Count is recursively increased, ie: the deeper the directory, the more tabs the files would have."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String tabPlaceholder \u003d new String();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            tabPlaceholder +\u003d \"\\t\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        for (File file : files) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            if (file.isDirectory()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                    MESSAGE_STORED_NOTES +\u003d LINE_SEPARATOR + NEWLINE_SEPARATOR;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                MESSAGE_STORED_NOTES +\u003d tabPlaceholder + DIRECTORY_IDENTIFIER + file.getName() + NEWLINE_SEPARATOR;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                getDirectoryFileValues(file, count + 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                MESSAGE_STORED_NOTES +\u003d tabPlaceholder + FILE_IDENTIFIER + file.getName() + NEWLINE_SEPARATOR;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENROLLED_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                            PREFIX_ADDRESS, PREFIX_TAG, PREFIX_ENROLLED_MODULE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Map\u003cString, EnrolledModule\u003e enrolledModuleList \u003d ParserUtil.parseEnrolledModules("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                                        argMultimap.getAllValues(PREFIX_ENROLLED_MODULE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList, enrolledModuleList, TimeSlots.initTimeSlots());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 2,
      "auskure": 7,
      "-": 59,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.ChangeTimeSlotCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.ClearNotesCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.DownloadAllNotesCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.DownloadSelectNotesCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.FreeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.MergeCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.ShareCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.ShowNotesCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook Commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Time Table Commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        case ChangeTimeSlotCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return new ChangeTimeSlotCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        case FreeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return new FreeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        case MergeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return new MergeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes Download Commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        case ClearNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return new ClearNotesCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "auskure"
        },
        "content": "        case DownloadAllNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return new DownloadAllNotesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "auskure"
        },
        "content": "        case DownloadSelectNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return new DownloadSelectNotesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        case ShareCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return new ShareCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        case ShowNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return new ShowNotesCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 2,
      "auskure": 6,
      "-": 97,
      "leegengyu": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ChangeTimeSlotCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.commands.ChangeTimeSlotCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.ChangeTimeSlotCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class ChangeTimeSlotCommandParser implements Parser\u003cChangeTimeSlotCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public ChangeTimeSlotCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] actions \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (actions.length \u003c 4) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                ChangeTimeSlotCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (actions.length % 3 !\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                ChangeTimeSlotCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String index \u003d actions[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 1; i \u003c actions.length; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (i % 3 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                if (isInvalidDay(actions[i])) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    throw new ParseException(\"Invalid Day. \" + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (i % 3 \u003d\u003d 2) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                if (isInvalidTime(actions[i])) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    throw new ParseException(\"Invalid Time. \" + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return new ChangeTimeSlotCommand(index, actions);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    Boolean isInvalidDay(String day) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (!day.equalsIgnoreCase(\"mon\") \u0026\u0026 !day.equalsIgnoreCase(\"tue\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            \u0026\u0026 !day.equalsIgnoreCase(\"wed\") \u0026\u0026 !day.equalsIgnoreCase(\"thu\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            \u0026\u0026 !day.equalsIgnoreCase(\"fri\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    Boolean isInvalidTime(String time) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (!time.equalsIgnoreCase(\"8am\") \u0026\u0026 !time.equalsIgnoreCase(\"9am\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"10am\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"11am\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"12pm\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"1pm\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"2pm\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"3pm\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"4pm\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"5pm\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"6pm\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"7pm\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "E0201942": 73,
      "-": 1,
      "leegengyu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final Prefix PREFIX_ENROLLED_MODULE \u003d new Prefix(\"em/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_MERGE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"user/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"pass/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final Prefix PREFIX_MODULECODE \u003d new Prefix(\"mod/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final Prefix PREFIX_SELECT_FILE \u003d new Prefix(\"file/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final Prefix PREFIX_FREE \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 4,
      "auskure": 1,
      "-": 15,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] deleteKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (deleteKeywords.length !\u003d 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (!deleteKeywords[0].equalsIgnoreCase(\"main\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                \u0026\u0026 !deleteKeywords[0].equalsIgnoreCase(\"merged\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(deleteKeywords[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return new DeleteCommand(deleteKeywords[0], index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 17,
      "-": 26,
      "leegengyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DownloadAllNotesCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "//@@author BearPerson1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.commands.DownloadAllNotesCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULECODE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "public class DownloadAllNotesCommandParser implements Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public DownloadAllNotesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            PREFIX_MODULECODE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PASSWORD, PREFIX_USERNAME, PREFIX_MODULECODE)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                DownloadAllNotesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String username \u003d argMultimap.getValue(PREFIX_USERNAME).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String password \u003d argMultimap.getValue(PREFIX_PASSWORD).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String moduleCode \u003d argMultimap.getValue(PREFIX_MODULECODE).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        return new DownloadAllNotesCommand(username, password, moduleCode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DownloadSelectNotesCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "//@@author BearPerson1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.commands.DownloadSelectNotesCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SELECT_FILE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULECODE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "public class DownloadSelectNotesCommandParser implements Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public DownloadSelectNotesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            PREFIX_MODULECODE, PREFIX_SELECT_FILE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PASSWORD, PREFIX_USERNAME, PREFIX_MODULECODE)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                DownloadSelectNotesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String username \u003d argMultimap.getValue(PREFIX_USERNAME).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String password \u003d argMultimap.getValue(PREFIX_PASSWORD).get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String moduleCode \u003d argMultimap.getValue(PREFIX_MODULECODE).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SELECT_FILE).isPresent()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            String fileSelect \u003d argMultimap.getValue(PREFIX_SELECT_FILE).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            if (fileSelect.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                    Messages.MESSAGE_DOWNLOAD_SELECT_NO_FILES_SELECTED));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            return new DownloadSelectNotesCommand(username, password, moduleCode, fileSelect);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            return new DownloadSelectNotesCommand(username, password, moduleCode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENROLLED_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "                PREFIX_ADDRESS, PREFIX_TAG, PREFIX_ENROLLED_MODULE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        argMultimap.getAllValues(PREFIX_TAG);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "auskure"
        },
        "content": "        parseEnrolledModulesForEdit(argMultimap.getAllValues(PREFIX_ENROLLED_MODULE))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": "            .ifPresent(editPersonDescriptor::setEnrolledModules);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : tagSet) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (it.equalsIgnoreCase(\"self\") || it.equalsIgnoreCase(\"merged\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                throw new ParseException(\"Not allowed to set Self or Merged tag\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e enrolledModules} into a {@code Map\u003cString, EnrolledModule\u003e} if {@code tags}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * is non-empty."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * If {@code enrolledModules} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * {@code Map\u003cString, EnrolledModule\u003e} containing zero enrolledModules."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Optional\u003cMap\u003cString, EnrolledModule\u003e\u003e parseEnrolledModulesForEdit(Collection\u003cString\u003e enrolledModules)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "auskure"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assert enrolledModules !\u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (enrolledModules.isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Collection\u003cString\u003e enrolledModulesMap;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (enrolledModules.size() \u003d\u003d 1 \u0026\u0026 enrolledModules.contains(\"\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "auskure"
        },
        "content": "            enrolledModulesMap \u003d Collections.emptySet();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "auskure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "auskure"
        },
        "content": "            enrolledModulesMap \u003d enrolledModules;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return Optional.of(ParserUtil.parseEnrolledModules(enrolledModulesMap));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 8,
      "auskure": 32,
      "-": 82,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (!keywords[0].equalsIgnoreCase(\"private\") \u0026\u0026 !keywords[0].equalsIgnoreCase(\"public\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, \"Please enter either \u0027public\u0027 or \u0027private\u0027 after export.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    + ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (keywords.length \u003e 2) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return new ExportCommand(keywords[0], keywords[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leegengyu": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.TimetableContainsModulePredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "//@@E0201942"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FilterCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] days \u003d {\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            for (String day : days) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                if (keywords[i].equalsIgnoreCase(day)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    if (i + 1 \u003e\u003d keywords.length) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                            FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    String time \u003d keywords[i + 1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    int timeIndex \u003d changeTimeToIndex(time);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    if (timeIndex \u003d\u003d 13) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                            FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    keywords[i + 1] \u003d Integer.toString(timeIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return new FilterCommand(new TimetableContainsModulePredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private int changeTimeToIndex(String time) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        int index \u003d 13;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (time.equalsIgnoreCase(\"8am\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"9am\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"10am\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"11am\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 3;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"12am\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 4;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"1pm\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 5;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"2pm\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 6;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"3pm\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 7;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"4pm\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 8;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"5pm\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 9;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"6pm\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 10;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"7pm\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 11;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 53,
      "-": 27,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (!nameKeywords[0].equalsIgnoreCase(\"merged\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u0026\u0026 !nameKeywords[0].equalsIgnoreCase(\"main\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 5,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FreeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.FreeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.commands.FreeCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * Parses input arguments and creates a new FreeCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class FreeCommandParser implements Parser\u003cFreeCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FreeCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * and returns an FreeCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public FreeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FREE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cString\u003e indices \u003d argMultimap.getAllValues(PREFIX_FREE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (indices.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return new FreeCommand(indices);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leegengyu": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private ArgumentMultimap argMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public ImportCommand parse(String args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return new ImportCommand(args.trim());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leegengyu": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MergeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.MergeCommand.MESSAGE_NOT_MERGED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.commands.MergeCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MERGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.MergeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "//@@E0201942"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FilterCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class MergeCommandParser implements Parser\u003cMergeCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public MergeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MERGE, PREFIX_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e indices \u003d argMultimap.getAllValues(PREFIX_MERGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cString\u003e name \u003d argMultimap.getAllValues(PREFIX_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (indices.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MergeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (name.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException(\"No group name entered. \" + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (indices.size() \u003c 2) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_NOT_MERGED);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return new MergeCommand(indices, name.get(0));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 14,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Parses a {@code String enrolledmodule} into a {@code EnrolledModule}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "auskure"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * @throws ParseException if the given {@code enrolledmodule} is invalid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static EnrolledModule parseEnrolledModule(String enrolledModule) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "auskure"
        },
        "content": "        requireNonNull(enrolledModule);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String trimmedEnrolledModule \u003d enrolledModule.trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (!EnrolledModule.isValidEnRolledModuleName(trimmedEnrolledModule)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new ParseException(EnrolledModule.MESSAGE_ENROLLED_MODULE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return new EnrolledModule(trimmedEnrolledModule);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e enrolledModules} into a {@code Map\u003cString, EnrolledModule\u003e}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static Map\u003cString, EnrolledModule\u003e parseEnrolledModules(Collection\u003cString\u003e enrolledModules)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "auskure"
        },
        "content": "        requireNonNull(enrolledModules);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final Map\u003cString, EnrolledModule\u003e enrolledModuleMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "auskure"
        },
        "content": "        EnrolledModule tempEnrolledModule;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String enrolledModuleName : enrolledModules) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "auskure"
        },
        "content": "            tempEnrolledModule \u003d parseEnrolledModule(enrolledModuleName);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "auskure"
        },
        "content": "            enrolledModuleMap.put(tempEnrolledModule.enrolledModuleName, tempEnrolledModule);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return enrolledModuleMap;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 35,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ShareCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.ShareCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class ShareCommandParser implements Parser\u003cShareCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public ShareCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShareCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (!keywords[0].equalsIgnoreCase(\"private\") \u0026\u0026 !keywords[0].equalsIgnoreCase(\"public\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShareCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (keywords.length \u003e 2) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShareCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return new ShareCommand(keywords[0], keywords[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void setSelf() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person self \u003d (new Person(new Name(\"Self\"), new Phone(\"9999999\"), new Email(\"self@self\"), new Address(\"self\"),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                getTagSet(\"self\"), new TreeMap\u003c\u003e(), TimeSlots.initTimeSlots()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        persons.add(self);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 8,
      "-": 120,
      "leegengyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes Manipulation \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Raises an event to indicate the current notes are manipulated"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void indicateNotesChanged(String event);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Raises an event to indicate the current notes are manipulated"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void indicateNotesDownloaded(String event, String moduleName);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 26,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.commons.events.model.NotesDownloadEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.commons.events.model.NotesEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "auskure"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes Manipulation \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /** Raises an event to indicate the current notes are manipulated */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void indicateNotesChanged(String event) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "auskure"
        },
        "content": "        raise(new NotesEvent(event));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /** Raises an event to indicate the current notes are manipulated */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void indicateNotesDownloaded(String event, String moduleName) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "auskure"
        },
        "content": "        raise(new NotesDownloadEvent(event, moduleName));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 14,
      "-": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Path notesFolderPath \u003d Paths.get(\"notes\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public Path getNotesFolderPath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return notesFolderPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void setNotesFolderPath(Path notesFolderPath) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.notesFolderPath \u003d notesFolderPath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 9,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/enrolledmodule/EnrolledModule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.model.enrolledmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Represents a Person\u0027s enrolled module in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidEnRolledModuleName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class EnrolledModule implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String MESSAGE_ENROLLED_MODULE_CONSTRAINTS \u003d \"Enrolled Module names should be alphanumeric\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String ENROLLED_MODULE_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public final String enrolledModuleName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public final String notesStoragePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Constructs a {@code enrolled module}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * @param enrolledModuleName A valid enrolled module name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public EnrolledModule(String enrolledModuleName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "        requireNonNull(enrolledModuleName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "        checkArgument(isValidEnRolledModuleName(enrolledModuleName), MESSAGE_ENROLLED_MODULE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.enrolledModuleName \u003d enrolledModuleName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.notesStoragePath \u003d \"home/\" + enrolledModuleName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns true if a given string is a valid enrolled module name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static boolean isValidEnRolledModuleName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return test.matches(ENROLLED_MODULE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "            || (other instanceof EnrolledModule // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "            \u0026\u0026 enrolledModuleName.equals(((EnrolledModule) other).enrolledModuleName));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return enrolledModuleName.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return \u0027[\u0027 + enrolledModuleName + \u0027]\u0027;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 57,
      "leegengyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class Address implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 2,
      "-": 57,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class Email implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(EMAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 2,
      "-": 66,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/IsMergedPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class IsMergedPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public IsMergedPredicate() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (Tag it : person.getTags()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (it.toString().equalsIgnoreCase(\"[merged]\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/IsNotSelfOrMergedPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class IsNotSelfOrMergedPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public IsNotSelfOrMergedPredicate() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (Tag it : person.getTags()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (it.toString().equalsIgnoreCase(\"[merged]\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    || it.toString().equalsIgnoreCase(\"[self]\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/IsSelfPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class IsSelfPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public IsSelfPredicate() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (Tag it : person.getTags()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (it.toString().equalsIgnoreCase(\"[self]\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class Name implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 2,
      "-": 58,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        int isMerged \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (keywords.get(0).equalsIgnoreCase(\"merged\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            for (Tag tag : person.getTags()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                if (tag.toString().equalsIgnoreCase(\"[merged]\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    isMerged \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (isMerged \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (keywords.get(0).equalsIgnoreCase(\"main\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            for (Tag tag : person.getTags()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                if (tag.toString().equalsIgnoreCase(\"[merged]\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 20,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class Person implements Serializable {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private final Map\u003cString, EnrolledModule\u003e enrolledModules \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private final Map\u003cString, List\u003cTimeSlots\u003e\u003e timeslots;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Name, Phone, Email, Address and Tags are to be present and not null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "                  Set\u003cTag\u003e tags, Map\u003cString, EnrolledModule\u003e enrolledModules, Map\u003cString, List\u003cTimeSlots\u003e\u003e timeslots) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "        EnrolledModule tempModule;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String tempModuleName : enrolledModules.keySet()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "            tempModule \u003d enrolledModules.get(tempModuleName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "            this.enrolledModules.put(tempModuleName, tempModule);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (timeslots !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            this.timeslots \u003d new HashMap\u003c\u003e(timeslots);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            this.timeslots \u003d TimeSlots.sampleTimeSlots();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns an immutable enrolled module map, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public Map\u003cString, EnrolledModule\u003e getEnrolledModules() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return Collections.unmodifiableMap(enrolledModules);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns an immutable timeslot map, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public Map\u003cString, List\u003cTimeSlots\u003e\u003e getTimeSlots() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return Collections.unmodifiableMap(timeslots);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "auskure"
        },
        "content": "            \u0026\u0026 otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "auskure"
        },
        "content": "            \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "auskure"
        },
        "content": "            \u0026\u0026 otherPerson.getEnrolledModules().equals(getEnrolledModules());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags, enrolledModules, timeslots);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Phone: \")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getPhone())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Email: \")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getEmail())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Address: \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getAddress())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Tags: \");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "auskure"
        },
        "content": "        builder.append(\" Enrolled Modules: \");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String temp : getEnrolledModules().keySet()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "auskure"
        },
        "content": "            temp \u003d temp + \" \";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "auskure"
        },
        "content": "            builder.append(temp);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 5,
      "auskure": 31,
      "-": 113,
      "leegengyu": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class Phone implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 2,
      "-": 52,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TimeSlots.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class TimeSlots implements Serializable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String[] SET_VALUES \u003d new String[] {\"8am    \", \"9am    \", \"10am   \", \"11am    \", \"12pm   \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \"1pm    \", \"2pm     \", \"3pm     \", \"4pm    \", \"5pm     \", \"6pm    \", \"7pm\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String[] mon \u003d new String[] {\"free\", \"free\", \"free\", \"free\", \"free\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        , \"free\", \"free\", \"free\", \"free\", \"free\", \"free\", \"free\", \"free\", \"free\", \"free\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String[] tue \u003d new String[] {\"free\", \"free\", \"free\", \"free\", \"free\", \"free\", \"free\", \"free\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \"free\", \"free\", \"free\", \"free\", \"free\", \"free\", \"free\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String[] wed \u003d new String[] {\"free\", \"free\", \"free\", \"free\", \"free\", \"free\", \"free\", \"free\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \"free\", \"free\", \"free\", \"free\", \"free\", \"free\", \"free\"};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String[] thu \u003d new String[] {\"free\", \"free\", \"free\", \"free\", \"free\", \"free\", \"free\", \"free\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \"free\", \"free\", \"free\", \"free\", \"free\", \"free\", \"free\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String[] fri \u003d new String[] {\"free\", \"free\", \"free\", \"free\", \"free\", \"free\", \"free\", \"free\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \"free\", \"free\", \"free\", \"free\", \"free\", \"free\", \"free\"};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String[] sampleTue \u003d new String[] {\"CS2040c\", \"CS2040c\", \"ST2332\", \"ST2332\", \"free\", \"free\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \"CS2107\", \"CS2107\", \"free\", \"free\", \"free\", \"free\"};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String[] sampleWed \u003d new String[] {\"CS2101\", \"CS2101\", \"free\", \"free\", \"GES1041\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \"GES1041\", \"free\", \"free\", \"CS2113\", \"CS2113\", \"free\", \"free\"};"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String[] sampleThu \u003d new String[] {\"free\", \"free\", \"MA1521\", \"MA1521\", \"free\", \"free\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \"CS2040c\", \"CS2040c\", \"free\", \"free\", \"free\", \"free\"};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String[] sampleFri \u003d new String[] {\"free\", \"free\", \"CS2107\", \"free\", \"free\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \"free\", \"CS2101\", \"free\", \"free\", \"free\", \"free\", \"free\"};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public String timeslot;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public TimeSlots(String timeslot) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        requireNonNull(timeslot);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.timeslot \u003d timeslot;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static Map\u003cString, List\u003cTimeSlots\u003e\u003e initTimeSlots() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e inittimeslot \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        inittimeslot.put(\"mon\", getMon());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        inittimeslot.put(\"tue\", getTue());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        inittimeslot.put(\"wed\", getWed());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        inittimeslot.put(\"thu\", getThu());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        inittimeslot.put(\"fri\", getFri());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return inittimeslot;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static Map\u003cString, List\u003cTimeSlots\u003e\u003e sampleTimeSlots() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e sampletimeslot \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        sampletimeslot.put(\"mon\", getMon());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        sampletimeslot.put(\"tue\", getSampleTue());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        sampletimeslot.put(\"wed\", getSampleWed());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        sampletimeslot.put(\"thu\", getSampleThu());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        sampletimeslot.put(\"fri\", getSampleFri());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return sampletimeslot;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static String[] getHeader() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return SET_VALUES;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static List\u003cTimeSlots\u003e getMon() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e monTimeSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : mon) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            monTimeSlots.add(new TimeSlots(it));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return monTimeSlots;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static List\u003cTimeSlots\u003e getTue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e tueTimeSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : tue) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            tueTimeSlots.add(new TimeSlots(it));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return tueTimeSlots;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static List\u003cTimeSlots\u003e getWed() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e wedTimeSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : wed) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            wedTimeSlots.add(new TimeSlots(it));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return wedTimeSlots;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static List\u003cTimeSlots\u003e getThu() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e thuTimeSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : thu) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            thuTimeSlots.add(new TimeSlots(it));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return thuTimeSlots;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static List\u003cTimeSlots\u003e getFri() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e friTimeSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : fri) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            friTimeSlots.add(new TimeSlots(it));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return friTimeSlots;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static List\u003cTimeSlots\u003e getSampleTue() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e tueTimeSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : sampleTue) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            tueTimeSlots.add(new TimeSlots(it));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return tueTimeSlots;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static List\u003cTimeSlots\u003e getSampleWed() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e wedTimeSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : sampleWed) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            wedTimeSlots.add(new TimeSlots(it));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return wedTimeSlots;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static List\u003cTimeSlots\u003e getSampleThu() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e thuTimeSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : sampleThu) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            thuTimeSlots.add(new TimeSlots(it));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return thuTimeSlots;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static List\u003cTimeSlots\u003e getSampleFri() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e friTimeSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : sampleFri) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            friTimeSlots.add(new TimeSlots(it));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return friTimeSlots;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return timeslot.hashCode();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return timeslot;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 165,
      "leegengyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TimetableContainsModulePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "//@@E0201942"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class TimetableContainsModulePredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TimetableContainsModulePredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (Tag tags : person.getTags()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (tags.toString().equalsIgnoreCase(\"[merged]\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] days \u003d {\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e timetable \u003d person.getTimeSlots();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            for (String day : days) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                if (keywords.get(i).equalsIgnoreCase(day)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    List\u003cTimeSlots\u003e daySlots \u003d timetable.get(day);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    int timeIndex \u003d Integer.parseInt(keywords.get(i + 1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    TimeSlots checkSlot \u003d daySlots.get(timeIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    if (checkSlot.toString().equalsIgnoreCase(\"free\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String day : days) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            List\u003cTimeSlots\u003e daySlots \u003d timetable.get(day);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            for (TimeSlots module : daySlots) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                for (String check : keywords) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (check.equalsIgnoreCase(module.toString())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof seedu.address.model.person.TimetableContainsModulePredicate"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((seedu.address.model.person.TimetableContainsModulePredicate) other).keywords));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "E0201942": 29,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private final UniquePersonListHelper uniquePersonListHelper \u003d new UniquePersonListHelper();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return uniquePersonListHelper.contains(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "        uniquePersonListHelper.add(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "        updateInternalList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "        uniquePersonListHelper.edit(target, editedPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "        updateInternalList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": "        uniquePersonListHelper.remove(toRemove);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "        updateInternalList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": "        uniquePersonListHelper.removeAll();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (Person tempPerson : replacement) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "auskure"
        },
        "content": "            uniquePersonListHelper.add(tempPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "auskure"
        },
        "content": "        updateInternalList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": "        uniquePersonListHelper.removeAll();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (Person tempPerson : persons) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": "            uniquePersonListHelper.add(tempPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "auskure"
        },
        "content": "        updateInternalList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Updates the internal list, allowing it to have sorted contacts"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private void updateInternalList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "auskure"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String name : uniquePersonListHelper.acquireAllNames()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "auskure"
        },
        "content": "            internalList.add(uniquePersonListHelper.get(name));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 31,
      "-": 107,
      "leegengyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonListHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": " * A supporting data structure (Treemap) that helps keep the contacts in the contact list sorted, increasing"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": " * usability."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": " * The names are sorted in an alphabetical order, with uppercase letters always being in front of lowercase letters."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Therefore, a possible order of the list is \"Alice, Bob, amy, andrew\"."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class UniquePersonListHelper {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private final Map\u003cString, Person\u003e internalListHelper \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public Set\u003cString\u003e acquireAllNames() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return internalListHelper.keySet();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns true if the ordered map contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String toCheckName \u003d nameFinder(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (internalListHelper.get(toCheckName) \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "            Person tempPerson \u003d internalListHelper.get(toCheckName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return toCheck.isSamePerson(tempPerson);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Adds a person to the sorted map."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String toAddName \u003d nameFinder(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "        internalListHelper.put(toAddName, toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * {@code target} must exist in the sorted map."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void edit(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String editedPersonName \u003d nameFinder(editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String targetName \u003d nameFinder(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (internalListHelper.get(targetName) \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "auskure"
        },
        "content": "        internalListHelper.remove(targetName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "auskure"
        },
        "content": "        internalListHelper.put(editedPersonName, editedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns the person in the contact list, given the name."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public Person get(String name) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return internalListHelper.get(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Removes the equivalent person from the sorted map."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * The person must exist in the sorted map."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String toRemoveName \u003d nameFinder(toRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (internalListHelper.get(toRemoveName) \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "auskure"
        },
        "content": "        internalListHelper.remove(toRemoveName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Removes all contacts currently in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void removeAll() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "auskure"
        },
        "content": "        internalListHelper.clear();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns the name of the given person contact."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private String nameFinder(Person person) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return person.getName().toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class Tag implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String[] SET_VALUES \u003d new String[] {\"8am    \", \"9am    \", \"10am   \", \"11am    \", \"12am   \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        , \"1pm    \", \"2pm     \", \"3pm     \", \"4pm    \", \"5pm     \", \"6pm    \", \"7pm\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String[] mon \u003d new String[] {\"Mon8am\", \"Mon9am\", \"Mon10am\", \"Mon11am\", \"Mon12am\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        , \"Mon1pm\", \"Mon2pm\", \"Mon3pm\", \"Mon4pm\", \"Mon5pm\", \"Mon6pm\", \"Mon7pm\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /*public static final String[] tue \u003d new String[] { \"Tue8am\", \"Tue9am\", \"Tue10am\", \"Tue11am\", \"Tue12am\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            ,\"Tue1pm\",\"Tue2pm\",\"Tue3pm\",\"Tue4pm\",\"Tue5pm\",\"Tue6pm\",\"Tue7pm\" };"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String[] wed \u003d new String[] { \"Wed8am\", \"Wed9am\", \"Wed10am\", \"Wed11am\", \"Wed12am\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            ,\"Wed1pm\",\"Wed2pm\",\"Wed3pm\",\"Wed4pm\",\"Wed5pm\",\"Wed6pm\",\"Wed7pm\" };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String[] thu \u003d new String[] { \"Thu8am\", \"Thu9am\", \"Thu10am\", \"Thu11am\", \"Thu12am\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            ,\"Thu1pm\",\"Thu2pm\",\"Thu3pm\",\"Thu4pm\",\"Thu5pm\",\"Thu6pm\",\"Thu7pm\" };"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String[] fri \u003d new String[] { \"Fri8am\", \"Fri9am\", \"Fri10am\", \"Fri11am\", \"Fri12am\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            ,\"Fri1pm\",\"Fri2pm\",\"Fri3pm\",\"Fri4pm\",\"Fri5pm\",\"Fri6pm\",\"Fri7pm\" };*/"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String[] tue \u003d new String[] {\"CS2040c\", \"CS2040c\", \"ST2332\", \"ST2332\", \"Tue12am\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        , \"Tue1pm\", \"CS2107\", \"CS2107\", \"Tue4pm\", \"Tue5pm\", \"Tue6pm\", \"Tue7pm\"};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String[] wed \u003d new String[] {\"CS2101\", \"CS2101\", \"Wed10am\", \"Wed11am\", \"GES1041\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        , \"GES1041\", \"Wed2pm\", \"Wed3pm\", \"CS2113\", \"CS2113\", \"Wed6pm\", \"Wed7pm\"};"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String[] thu \u003d new String[] {\"Thu8am\", \"Thu9am\", \"MA1521\", \"MA1521\", \"Thu12am\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        , \"Thu1pm\", \"CS2040c\", \"CS2040c\", \"Thu4pm\", \"Thu5pm\", \"Thu6pm\", \"Thu7pm\"};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String[] fri \u003d new String[] {\"Fri8am\", \"Fri9am\", \"CS2107\", \"Fri11am\", \"Fri12am\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        , \"Fri1pm\", \"CS2101\", \"Fri3pm\", \"Fri4pm\", \"Fri5pm\", \"Fri6pm\", \"Fri7pm\"};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public String tagName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String[] getHeader() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return SET_VALUES;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String[] getMon() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return mon;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String[] getTue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return tue;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String[] getWed() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return wed;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String[] getThu() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return thu;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String[] getFri() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return fri;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 12,
      "-": 83,
      "leegengyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "                getTagSet(\"friends\"), getEnrolledModuleMap(\"CS2101\", \"CS2113T\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                TimeSlots.sampleTimeSlots()),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), getEnrolledModuleMap(\"CS2105\", \"CS2106\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                TimeSlots.sampleTimeSlots()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "                getTagSet(\"neighbours\"), getEnrolledModuleMap(\"CS2101\", \"CS2113T\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                TimeSlots.sampleTimeSlots()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "                getTagSet(\"family\"), getEnrolledModuleMap(\"CS3235\", \"CS3236\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                TimeSlots.sampleTimeSlots()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "                getTagSet(\"classmates\"), getEnrolledModuleMap(\"CS1010\", \"CS1231\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                TimeSlots.sampleTimeSlots()),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                getTagSet(\"colleagues\"), getEnrolledModuleMap(\"CS2101\", \"CS2113T\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                TimeSlots.sampleTimeSlots()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            new Person(new Name(\"Self\"), new Phone(\"9999999\"), new Email(\"self@self\"), new Address(\"self\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                getTagSet(\"self\"), new TreeMap\u003c\u003e(), TimeSlots.initTimeSlots())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns a enrolled class map containing the list of strings given."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static Map\u003cString, EnrolledModule\u003e getEnrolledModuleMap(String... strings) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Map\u003cString, EnrolledModule\u003e enrolledClassMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "auskure"
        },
        "content": "        EnrolledModule tempEnrolledModule;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String enrolledClassName : strings) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "auskure"
        },
        "content": "            tempEnrolledModule \u003d new EnrolledModule(enrolledClassName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": "            enrolledClassMap.put(tempEnrolledModule.enrolledModuleName, tempEnrolledModule);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return enrolledClassMap;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 5,
      "auskure": 17,
      "-": 58,
      "leegengyu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ListWrapper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javax.xml.bind.annotation.XmlAccessType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javax.xml.bind.annotation.XmlAccessorType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javax.xml.bind.annotation.XmlElementWrapper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "@XmlAccessorType(XmlAccessType.FIELD)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class ListWrapper {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @XmlElementWrapper"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private ArrayList\u003cXmlAdaptedTimeSlots\u003e list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void setList(ArrayList\u003cXmlAdaptedTimeSlots\u003e list) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public ArrayList\u003cXmlAdaptedTimeSlots\u003e getList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 19,
      "leegengyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/NotesDownloadStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Represents the storage component for the downloaded notes"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "public interface NotesDownloadStorage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "    Path getNotesFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void deleteAllNotes() throws IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void relocateNotes(String moduleName) throws IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void unzipNotes(String moduleName) throws IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/NotesDownloadStorageHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.commons.util.FileUtil.createDirectoryIfMissing;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.commons.util.FileUtil.deleteAllFiles;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.commons.util.FileUtil.relocateFiles;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.commons.util.UnzipUtil.unzipFile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class NotesDownloadStorageHelper implements NotesDownloadStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Path notesFilePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Path absoluteNotesFilePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public NotesDownloadStorageHelper(Path notesFilePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.notesFilePath \u003d notesFilePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.absoluteNotesFilePath \u003d notesFilePath.toAbsolutePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public Path getNotesFilePath() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return notesFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Deletes all notes in the notes folder"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void deleteAllNotes() throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "        createDirectoryIfMissing(absoluteNotesFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "        deleteAllFiles(absoluteNotesFilePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Relocates notes to their appropriate folders"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void relocateNotes(String moduleName) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path moduleDirectory \u003d Paths.get(notesFilePath.toString(), moduleName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "        createDirectoryIfMissing(moduleDirectory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "        relocateFiles(absoluteNotesFilePath, moduleName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Unzips newly downloaded notes in the notes folder"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void unzipNotes(String moduleName) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": "        unzipFile(absoluteNotesFilePath, moduleName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.commons.events.model.NotesDownloadEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.commons.events.model.NotesEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, NotesDownloadStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "    Path getNotesFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void deleteAllNotes() throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void relocateNotes(String moduleName) throws IOException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void unzipNotes(String moduleName) throws IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Depending on the type of the event, this executes operations on notes currently stored in your computer"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Raises {@link IOException} if there was an error during saving."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void handleNotesManipulationEvent(NotesEvent notesEvent) throws IOException;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Depending on the type of the event, this executes operations on new notes downloaded"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Raises {@link IOException} if there was an error during saving."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void handleNotesDownloadedEvent(NotesDownloadEvent notesDownloadEvent) throws IOException;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 27,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.commons.events.model.NotesDownloadEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.commons.events.model.NotesEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.logic.commands.ClearNotesCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.logic.commands.DownloadAllNotesCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.logic.commands.DownloadSelectNotesCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private NotesDownloadStorage notesDownloadStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "                          NotesDownloadStorage notesDownloadStorage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.notesDownloadStorage \u003d notesDownloadStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "auskure"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes Download methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public Path getNotesFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return notesDownloadStorage.getNotesFilePath();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void deleteAllNotes() throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "auskure"
        },
        "content": "        notesDownloadStorage.deleteAllNotes();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void relocateNotes(String moduleName) throws IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "auskure"
        },
        "content": "        notesDownloadStorage.relocateNotes(moduleName);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void unzipNotes(String moduleName) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "auskure"
        },
        "content": "        notesDownloadStorage.unzipNotes(moduleName);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void handleNotesManipulationEvent(NotesEvent notesEvent) throws IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "auskure"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(notesEvent, \"notes manipulated\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final String commandWord \u003d notesEvent.getEvent();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "auskure"
        },
        "content": "        //switch-case syntax is used here, to easily allow for future expandability."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "auskure"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "auskure"
        },
        "content": "        case ClearNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "auskure"
        },
        "content": "            deleteAllNotes();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "auskure"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void handleNotesDownloadedEvent(NotesDownloadEvent notesDownloadEvent) throws IOException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "auskure"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(notesDownloadEvent, \"notes downloaded\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final String commandWord \u003d notesDownloadEvent.getEvent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "auskure"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "auskure"
        },
        "content": "        case DownloadAllNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "auskure"
        },
        "content": "            unzipNotes(notesDownloadEvent.getModuleName());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "auskure"
        },
        "content": "        case DownloadSelectNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "auskure"
        },
        "content": "            relocateNotes(notesDownloadEvent.getModuleName());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "auskure"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 69,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedEnrolledModule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": " * JAXB-friendly adapted version of the EnrolledModule."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class XmlAdaptedEnrolledModule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private String enrolledModuleName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Constructs an XmlAdaptedEnrolledModule."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public XmlAdaptedEnrolledModule() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Constructs a {@code XmlAdaptedEnrolledModule} with the given {@code enrolledModuleName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public XmlAdaptedEnrolledModule(String enrolledModuleName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.enrolledModuleName \u003d enrolledModuleName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Converts a given EnrolledModule into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public XmlAdaptedEnrolledModule(EnrolledModule source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "        enrolledModuleName \u003d source.enrolledModuleName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Converts this jaxb-friendly adapted EnrolledModule object into the model\u0027s EnrolledModule object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public EnrolledModule toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (!EnrolledModule.isValidEnRolledModuleName(enrolledModuleName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new IllegalValueException(EnrolledModule.MESSAGE_ENROLLED_MODULE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return new EnrolledModule(enrolledModuleName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (!(other instanceof XmlAdaptedEnrolledModule)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return enrolledModuleName.equals(((XmlAdaptedEnrolledModule) other).enrolledModuleName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javax.xml.bind.annotation.XmlElementWrapper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private List\u003cXmlAdaptedEnrolledModule\u003e enrolled \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @XmlElementWrapper"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Map\u003cString, ListWrapper\u003e timeslots \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public XmlAdaptedPerson() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": "                            List\u003cXmlAdaptedTag\u003e tagged, List\u003cXmlAdaptedEnrolledModule\u003e enrolled, Map\u003cString,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        ListWrapper\u003e timeslots) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (enrolled !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": "            this.enrolled \u003d new ArrayList\u003c\u003e(enrolled);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        this.timeslots \u003d new HashMap\u003c\u003e(timeslots);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": "        XmlAdaptedEnrolledModule tempXmlClass;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String nameTemp : source.getEnrolledModules().keySet()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "auskure"
        },
        "content": "            tempXmlClass \u003d new XmlAdaptedEnrolledModule(nameTemp);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "auskure"
        },
        "content": "            enrolled.add(tempXmlClass);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        timeslots \u003d toXmlAdaptedTimeSlots(source.getTimeSlots());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static Map\u003cString, ListWrapper\u003e toXmlAdaptedTimeSlots(Map\u003cString, List\u003cTimeSlots\u003e\u003e source) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, ListWrapper\u003e timeslots \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String[] days \u003d {\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"};"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        for (String day : days) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            ArrayList\u003cXmlAdaptedTimeSlots\u003e toAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            ListWrapper wrapper \u003d new ListWrapper();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            wrapper.setList(toAdd);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            for (TimeSlots i : source.get(day)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                toAdd.add(new XmlAdaptedTimeSlots(i));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            timeslots.put(day, wrapper);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return timeslots;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static List\u003cXmlAdaptedEnrolledModule\u003e toXmlAdaptedEnrolledModules(Map\u003cString, EnrolledModule\u003e source) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Iterator\u003cMap.Entry\u003cString, EnrolledModule\u003e\u003e it \u003d source.entrySet().iterator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cXmlAdaptedEnrolledModule\u003e enrolledModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Map.Entry\u003cString, EnrolledModule\u003e pair \u003d it.next();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            enrolledModules.add(new XmlAdaptedEnrolledModule(pair.getValue()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return enrolledModules;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final List\u003cEnrolledModule\u003e personEnrolledModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (XmlAdaptedEnrolledModule enrolledClass : enrolled) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "auskure"
        },
        "content": "            personEnrolledModules.add(enrolledClass.toModelType());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        final Map\u003cString, List\u003cTimeSlots\u003e\u003e personTimeSlots \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String[] days \u003d {\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"};"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        for (String day : days) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            List\u003cTimeSlots\u003e toAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            for (XmlAdaptedTimeSlots i : timeslots.get(day).getList()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                toAdd.add(i.toModelType());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            personTimeSlots.put(day, toAdd);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final Map\u003cString, EnrolledModule\u003e modelEnrolledClasses \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (EnrolledModule tempClass : personEnrolledModules) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "auskure"
        },
        "content": "            modelEnrolledClasses.put(tempClass.enrolledModuleName, tempClass);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        final Map\u003cString, List\u003cTimeSlots\u003e\u003e modelTimeSlots \u003d new HashMap\u003c\u003e(personTimeSlots);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelEnrolledClasses,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            modelTimeSlots);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "auskure"
        },
        "content": "            \u0026\u0026 tagged.equals(otherPerson.tagged)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "auskure"
        },
        "content": "            \u0026\u0026 enrolled.equals(otherPerson.enrolled)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "auskure"
        },
        "content": "            \u0026\u0026 timeslots.equals(otherPerson.timeslots);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 25,
      "auskure": 29,
      "-": 135,
      "leegengyu": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTimeSlots.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class XmlAdaptedTimeSlots {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private String timeSlot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public XmlAdaptedTimeSlots() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public XmlAdaptedTimeSlots(String timeSlot) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public XmlAdaptedTimeSlots(TimeSlots source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        timeSlot \u003d source.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public TimeSlots toModelType() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return new TimeSlots(timeSlot);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (!(other instanceof XmlAdaptedTimeSlots)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return timeSlot.equals(((XmlAdaptedTimeSlots) other).timeSlot);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 55,
      "leegengyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        \"https://www.google.com.sg/webhp?hl\u003den\u0026sa\u003dX\u0026ved\u003d0ahUKEwj6i6PVlJ3eAhXNfn0KHRJ_DTAQPAgH\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    // \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        loadPage(SEARCH_PAGE_URL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPersonPage(event.getNewSelection());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 2,
      "-": 70,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private MergedTimetablePanel mergedTimetablePanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private SelfCardPanel selfCardPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private StackPane mergedTimetablePlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private StackPane selfPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        mergedTimetablePanel \u003d new MergedTimetablePanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        mergedTimetablePlaceholder.getChildren().add(mergedTimetablePanel.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        selfCardPanel \u003d new SelfCardPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        selfPlaceholder.getChildren().add(selfCardPanel.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public MergedTimetablePanel getMergedTimetablePanel() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return mergedTimetablePanel;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 19,
      "-": 203
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MergedTimetablePanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsMergedPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class MergedTimetablePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String FXML \u003d \"MergedTimetablePanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MergedTimetablePanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private ListView\u003cPerson\u003e timetable;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public MergedTimetablePanel(ObservableList\u003cPerson\u003e timetableList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        timetableList \u003d timetableList.filtered(new IsMergedPredicate());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        setConnections(timetableList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void setConnections(ObservableList\u003cPerson\u003e timetableList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        timetable.setItems(timetableList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        timetable.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        timetable.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            timetable.scrollTo(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            timetable.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                setGraphic(new TimetableCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d {\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pink\", \"black\", \"grey\", \"maroon\", \"navy\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    //@@E0201942"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private FlowPane enrolledClasses;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane header;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane monday;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tuesday;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane wednesday;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane thursday;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane friday;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String tempEnrolledClassName : person.getEnrolledModules().keySet()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": "            Label enrolledModule \u003d new Label(tempEnrolledClassName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            enrolledModule.setPrefSize(51, 10);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            enrolledModule.getStyleClass().add(getColor(tempEnrolledClassName));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            enrolledClasses.getChildren().add(enrolledModule);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : TimeSlots.getHeader()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            Label day \u003d new Label(it);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            day.setPrefSize(58, 10);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            header.getChildren().add(day);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] mon \u003d new String[12];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] tue \u003d new String[12];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] wed \u003d new String[12];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] thu \u003d new String[12];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] fri \u003d new String[12];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            mon[i] \u003d person.getTimeSlots().get(\"mon\").get(i).toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            tue[i] \u003d person.getTimeSlots().get(\"tue\").get(i).toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            wed[i] \u003d person.getTimeSlots().get(\"wed\").get(i).toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            thu[i] \u003d person.getTimeSlots().get(\"thu\").get(i).toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            fri[i] \u003d person.getTimeSlots().get(\"fri\").get(i).toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(mon, monday);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(tue, tuesday);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(wed, wednesday);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(thu, thursday);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(fri, friday);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //Takes the mods for the day and adds them to the FlowPane"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void getMod(String[] mods, FlowPane day) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String it : mods) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            Label slot \u003d new Label(it);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            slot.setPrefSize(51, 25);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (it.equalsIgnoreCase(\"busy\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.getStyleClass().add(\"black\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.setText(\" \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else if (it.equalsIgnoreCase(\"free\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.getStyleClass().add(\"white\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.setText(\" \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                slot.getStyleClass().add(getColor(it));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            day.getChildren().add(slot);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    //Returns a colour based on the module code"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getColor(String tagName) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads tags from a person, changes them to labels and adds colour"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void colourTag(Person person) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tag.tagName.equals(\"free\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                tagLabel.getStyleClass().add(\"white\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                tagLabel.setText(\" \");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (tag.tagName.equals(\"busy\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                tagLabel.getStyleClass().add(\"black\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                tagLabel.setText(\" \");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                tagLabel.getStyleClass().add(getColor(tag.tagName));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            tagLabel.setPrefSize(53, 25);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            monday.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 42,
      "auskure": 4,
      "-": 130,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        personList \u003d personList.filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        setConnections(personList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setConnections(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.scrollTo(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 2,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SelfCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class SelfCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d {\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \"pink\", \"black\", \"grey\", \"maroon\", \"navy\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane enrolledClasses;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane header;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane monday;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane tuesday;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane wednesday;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane thursday;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane friday;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public SelfCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        id.setText(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        name.setText(\"Self\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        phone.setText(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        address.setText(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        email.setText(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        for (String tempEnrolledClassName : person.getEnrolledClasses().keySet()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Label enrolledClass \u003d new Label(tempEnrolledClassName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            enrolledClass.setPrefSize(61, 10);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            header.getChildren().add(enrolledClass);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : TimeSlots.getHeader()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Label day \u003d new Label(it);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            day.setPrefSize(58, 10);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            header.getChildren().add(day);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] mon \u003d new String[12];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] tue \u003d new String[12];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] wed \u003d new String[12];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] thu \u003d new String[12];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] fri \u003d new String[12];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            mon[i] \u003d person.getTimeSlots().get(\"mon\").get(i).toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            tue[i] \u003d person.getTimeSlots().get(\"tue\").get(i).toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            wed[i] \u003d person.getTimeSlots().get(\"wed\").get(i).toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            thu[i] \u003d person.getTimeSlots().get(\"thu\").get(i).toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            fri[i] \u003d person.getTimeSlots().get(\"fri\").get(i).toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(mon, monday);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(tue, tuesday);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(wed, wednesday);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(thu, thursday);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(fri, friday);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    //Takes the mods for the day and adds them to the FlowPane"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void getMod(String[] mods, FlowPane day) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : mods) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Label slot \u003d new Label(it);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            slot.setPrefSize(51, 25);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (it.equalsIgnoreCase(\"busy\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.getStyleClass().add(\"black\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.setText(\" \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else if (it.equalsIgnoreCase(\"free\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.getStyleClass().add(\"white\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.setText(\" \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.getStyleClass().add(getColor(it));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            day.getChildren().add(slot);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    //Returns a colour based on the module code"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static String getColor(String tagName) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Reads tags from a person, changes them to labels and adds colour"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void colourTag(Person person) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (tag.tagName.equals(\"free\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                tagLabel.getStyleClass().add(\"white\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                tagLabel.setText(\" \");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else if (tag.tagName.equals(\"busy\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                tagLabel.getStyleClass().add(\"black\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                tagLabel.setText(\" \");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                tagLabel.getStyleClass().add(getColor(tag.tagName));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            tagLabel.setPrefSize(53, 25);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            monday.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        });"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        SelfCard card \u003d (SelfCard) other;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 172,
      "leegengyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SelfCardPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsSelfPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class SelfCardPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String FXML \u003d \"MergedTimetablePanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MergedTimetablePanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private ListView\u003cPerson\u003e timetable;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public SelfCardPanel(ObservableList\u003cPerson\u003e selfList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        selfList \u003d selfList.filtered(new IsSelfPredicate());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        setConnections(selfList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void setConnections(ObservableList\u003cPerson\u003e timetableList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        timetable.setItems(timetableList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        timetable.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        timetable.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            timetable.scrollTo(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            timetable.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                setGraphic(new SelfCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimetableCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class TimetableCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d {\"white\", \"yellow\", \"darkorange\", \"maroon\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \"black\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane header;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane monday;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane tuesday;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane wednesday;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane thursday;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane friday;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public TimetableCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        phone.setText(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        address.setText(person.getAddress().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        email.setText(\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : TimeSlots.getHeader()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Label day \u003d new Label(it);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            day.setPrefSize(58, 10);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            header.getChildren().add(day);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] mon \u003d new String[12];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] tue \u003d new String[12];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] wed \u003d new String[12];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] thu \u003d new String[12];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] fri \u003d new String[12];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            mon[i] \u003d person.getTimeSlots().get(\"mon\").get(i).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            tue[i] \u003d person.getTimeSlots().get(\"tue\").get(i).toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            wed[i] \u003d person.getTimeSlots().get(\"wed\").get(i).toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            thu[i] \u003d person.getTimeSlots().get(\"thu\").get(i).toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            fri[i] \u003d person.getTimeSlots().get(\"fri\").get(i).toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(mon, monday);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(tue, tuesday);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(wed, wednesday);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(thu, thursday);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(fri, friday);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    //Takes the mods for the day and adds them to the FlowPane"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void getMod(String[] mods, FlowPane day) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : mods) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Label slot \u003d new Label(it);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            slot.setPrefSize(51, 25);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (it.equalsIgnoreCase(\"busy\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.getStyleClass().add(\"black\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.setText(\" \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            } else if (it.equalsIgnoreCase(\"0\") || it.equalsIgnoreCase(\"free\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.getStyleClass().add(\"white\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.setText(\" \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.getStyleClass().add(getColor(it));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.setText(it);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            day.getChildren().add(slot);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    //Returns a colour based on the module code"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static String getColor(String tagName) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        int tagIndex \u003d Integer.parseInt(tagName);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (tagIndex \u003c\u003d 4) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return TAG_COLOR_STYLES[tagIndex];"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return TAG_COLOR_STYLES[4];"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Reads tags from a person, changes them to labels and adds colour"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void colourTag(Person person) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (tag.tagName.equals(\"free\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                tagLabel.getStyleClass().add(\"white\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                tagLabel.setText(\" \");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else if (tag.tagName.equals(\"busy\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                tagLabel.getStyleClass().add(\"black\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                tagLabel.setText(\" \");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                tagLabel.getStyleClass().add(getColor(tag.tagName));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            tagLabel.setPrefSize(53, 25);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            monday.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        });"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (!(other instanceof TimetableCard)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimetableCard card \u003d (TimetableCard) other;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 171,
      "leegengyu": 2
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": " #tags .red {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": " #tags .yellow {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": " #tags .blue {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": " #tags .orange {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": " #tags .brown {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": " #tags .green {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": " #tags .pink {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": " #tags .black {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": " #tags .grey {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "  #tags .white {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: white;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "  #tags .navy {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: navy;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "  #tags .maroon {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: maroon;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "E0201942"
        },
        "content": " #tags .grey1 {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "E0201942"
        },
        "content": "      -fx-text-fill: black;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "E0201942"
        },
        "content": "      -fx-background-color: #E5E5E5;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "E0201942"
        },
        "content": " }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "E0201942"
        },
        "content": "  #tags .grey2 {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        -fx-text-fill: white;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        -fx-background-color: #CCCCCC;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "E0201942"
        },
        "content": " }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "E0201942"
        },
        "content": "  #tags .grey3 {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "E0201942"
        },
        "content": "          -fx-text-fill: black;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "E0201942"
        },
        "content": "          -fx-background-color: #B2B2B2;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "E0201942"
        },
        "content": " }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "E0201942"
        },
        "content": "  #tags .grey4 {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-text-fill: white;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-background-color: #999999;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "E0201942"
        },
        "content": " }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "E0201942"
        },
        "content": "  #tags .grey5 {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-text-fill: white;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-background-color: #7F7F7F;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "E0201942"
        },
        "content": " }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "E0201942"
        },
        "content": "  #tags .grey6 {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-text-fill: white;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-background-color: #666666;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "E0201942"
        },
        "content": " }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "E0201942"
        },
        "content": "  #tags .grey7 {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-text-fill: white;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-background-color: #4C4C4C;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "E0201942"
        },
        "content": " }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "E0201942"
        },
        "content": "#tags .darkorange {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-text-fill: white;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-background-color: #FF8C00;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "E0201942"
        },
        "content": " }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "E0201942"
        },
        "content": " #tags .maroon {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "E0201942"
        },
        "content": "             -fx-text-fill: white;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "E0201942"
        },
        "content": "             -fx-background-color: #800000;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "E0201942"
        },
        "content": "  }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "E0201942": 40,
      "-": 401
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"selfPlaceholder\" prefHeight\u003d\"320\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane2\" dividerPositions\u003d\"0.5\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003cVBox fx:id\u003d\"timetableList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" prefHeight\u003d\"320\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane1\" dividerPositions\u003d\"0.5\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"mergedTimetablePlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 12,
      "-": 65
    }
  },
  {
    "path": "src/main/resources/view/MergedTimetablePanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003cListView fx:id\u003d\"timetable\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 8
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e\u003cFlowPane id\u003d\"tags\" fx:id\u003d\"enrolledClasses\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"header\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"monday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"tuesday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"wednesday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"thursday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"friday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 1,
      "-": 40
    }
  },
  {
    "path": "src/main/resources/view/SelfCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"header\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"monday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"tuesday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"wednesday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"thursday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"friday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 41
    }
  },
  {
    "path": "src/main/resources/view/SelfCardList.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003cListView fx:id\u003d\"selfList\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 8
    }
  },
  {
    "path": "src/main/resources/view/TimetableCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"header\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"monday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"tuesday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"wednesday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"thursday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"friday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 38
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTagStyleClasses(String tag) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(label -\u003e label.getText().equals(tag))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getStyleClass)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 1,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.toXmlAdaptedTimeSlots;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.storage.*;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final List\u003cXmlAdaptedEnrolledModule\u003e VALID_MODULES \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Collections.singletonList(new XmlAdaptedEnrolledModule(\"CS2107\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final Map\u003cString, List\u003cTimeSlots\u003e\u003e blankTimeSlots \u003d TimeSlots.initTimeSlots();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final Map\u003cString, ListWrapper\u003e VALID_TIMESLOTS \u003d toXmlAdaptedTimeSlots(blankTimeSlots);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 15,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"main\", INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"main\", outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"main\" ,INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"main\", outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"main\", INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"main\", outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"main\", INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(\"main\", INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(\"main\", INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(\"main\", INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 10,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertEquals(new DeleteCommand(\"main\", INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 1,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(\"main\", INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.toXmlAdaptedEnrolledModules;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.toXmlAdaptedTimeSlots;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final Map\u003cString, EnrolledModule\u003e enrolledModules \u003d BENSON.getEnrolledModules();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final List\u003cXmlAdaptedEnrolledModule\u003e VALID_ENROLLED_MODULES \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            toXmlAdaptedEnrolledModules(enrolledModules);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final Map\u003cString, List\u003cTimeSlots\u003e\u003e blankTimeSlots \u003d TimeSlots.initTimeSlots();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final Map\u003cString, ListWrapper\u003e VALID_TIMESLOTS \u003d toXmlAdaptedTimeSlots(blankTimeSlots);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        VALID_ENROLLED_MODULES, VALID_TIMESLOTS );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                VALID_ENROLLED_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        VALID_ENROLLED_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                VALID_ENROLLED_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        VALID_ENROLLED_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                VALID_ENROLLED_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        VALID_ENROLLED_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                VALID_ENROLLED_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        VALID_ENROLLED_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 27,
      "auskure": 1,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Map\u003cString, EnrolledModule\u003e enrolledModules;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Map\u003cString, List\u003cTimeSlots\u003e\u003e timeslots;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "        enrolledModules \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "        timeslots \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "        enrolledModules \u003d new TreeMap\u003c\u003e(personToCopy.getEnrolledModules());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "        timeslots \u003d new HashMap\u003c\u003e(personToCopy.getTimeSlots());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Parses the {@code enrolledModules} into a {@code Map\u003cenrolledModules\u003e}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public PersonBuilder withEnrolledModules(String ... enrolledModules) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.enrolledModules \u003d SampleDataUtil.getEnrolledModuleMap(enrolledModules);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Parses the {@code timeslots} into a {@code Map\u003ctimeslots\u003e}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public PersonBuilder withTimeslots() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.timeslots \u003d TimeSlots.initTimeSlots();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return new Person(name, phone, email, address, tags, enrolledModules, timeslots);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 3,
      "auskure": 28,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "            .withEnrolledModules(\"CS2101\", \"CS2113T\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            .withTimeslots().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 1,
      "auskure": 2,
      "-": 75
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Index indexSecond \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getTwoBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertCommandSuccess(command, indexSecond, BOB);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getTwoBased()), BOB);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertCommandSuccess(command, indexSecond, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 5,
      "-": 281
    }
  }
]
